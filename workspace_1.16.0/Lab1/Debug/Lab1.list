
Lab1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014668  08010000  08010000  00010000  2**16
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000230  08024668  08024668  00024668  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08024898  08024898  00025070  2**0
                  CONTENTS
  4 .ARM          00000000  08024898  08024898  00025070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08024898  08024898  00025070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08024898  08024898  00024898  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0802489c  0802489c  0002489c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  080248a0  00025000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000158  20000070  08024910  00025070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001c8  08024910  000251c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00025070  2**0
                  CONTENTS, READONLY
 12 .debug_line   00008720  00000000  00000000  000250a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_line_str 00000079  00000000  00000000  0002d7c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_info   0000995b  00000000  00000000  0002d839  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001f8e  00000000  00000000  00037194  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000006a8  00000000  00000000  00039128  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000f976b  00000000  00000000  000397d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 0000041a  00000000  00000000  00132f3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  00028e38  00000000  00000000  00133355  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      000000b8  00000000  00000000  0015c18d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001d08  00000000  00000000  0015c248  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    000033dd  00000000  00000000  0015df50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00000088  00000000  00000000  0016132d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08010000 <__do_global_dtors_aux>:
 8010000:	b510      	push	{r4, lr}
 8010002:	4c05      	ldr	r4, [pc, #20]	@ (8010018 <__do_global_dtors_aux+0x18>)
 8010004:	7823      	ldrb	r3, [r4, #0]
 8010006:	b933      	cbnz	r3, 8010016 <__do_global_dtors_aux+0x16>
 8010008:	4b04      	ldr	r3, [pc, #16]	@ (801001c <__do_global_dtors_aux+0x1c>)
 801000a:	b113      	cbz	r3, 8010012 <__do_global_dtors_aux+0x12>
 801000c:	4804      	ldr	r0, [pc, #16]	@ (8010020 <__do_global_dtors_aux+0x20>)
 801000e:	f3af 8000 	nop.w
 8010012:	2301      	movs	r3, #1
 8010014:	7023      	strb	r3, [r4, #0]
 8010016:	bd10      	pop	{r4, pc}
 8010018:	20000070 	.word	0x20000070
 801001c:	00000000 	.word	0x00000000
 8010020:	08024650 	.word	0x08024650

08010024 <frame_dummy>:
 8010024:	b508      	push	{r3, lr}
 8010026:	4b03      	ldr	r3, [pc, #12]	@ (8010034 <frame_dummy+0x10>)
 8010028:	b11b      	cbz	r3, 8010032 <frame_dummy+0xe>
 801002a:	4903      	ldr	r1, [pc, #12]	@ (8010038 <frame_dummy+0x14>)
 801002c:	4803      	ldr	r0, [pc, #12]	@ (801003c <frame_dummy+0x18>)
 801002e:	f3af 8000 	nop.w
 8010032:	bd08      	pop	{r3, pc}
 8010034:	00000000 	.word	0x00000000
 8010038:	20000074 	.word	0x20000074
 801003c:	08024650 	.word	0x08024650
	...

08020000 <kalman_assem>:
//PUSH current state to stack
//setup registers
//your function
//POP stack

push {r7}
 8020000:	b480      	push	{r7}
mov r2,#0 //counter to move through array
 8020002:	f04f 0200 	mov.w	r2, #0
add r3, r0, r2, lsl #2 //getting q and putting address in r3
 8020006:	eb00 0382 	add.w	r3, r0, r2, lsl #2
vldr s1, [r3] //putting value of q in s1
 802000a:	edd3 0a00 	vldr	s1, [r3]

add r2, r2, #1
 802000e:	f102 0201 	add.w	r2, r2, #1
add r4, r0, r2, lsl #2 //getting r and putting address in r4
 8020012:	eb00 0482 	add.w	r4, r0, r2, lsl #2
vldr s2, [r4] //putting value of r in s2
 8020016:	ed94 1a00 	vldr	s2, [r4]

add r2, r2, #1
 802001a:	f102 0201 	add.w	r2, r2, #1
add r5, r0, r2, lsl #2 //getting p and putting address in r5
 802001e:	eb00 0582 	add.w	r5, r0, r2, lsl #2
vldr s3, [r5] //putting value of p in s3
 8020022:	edd5 1a00 	vldr	s3, [r5]

add r2, r2, #1
 8020026:	f102 0201 	add.w	r2, r2, #1
add r6, r0, r2, lsl #2 //getting x and putting address in r6
 802002a:	eb00 0682 	add.w	r6, r0, r2, lsl #2
vldr s4, [r6] //putting value of x in s4
 802002e:	ed96 2a00 	vldr	s4, [r6]

add r2, r2, #1
 8020032:	f102 0201 	add.w	r2, r2, #1
add r7, r0, r2, lsl #2 //getting k and putting address in r7
 8020036:	eb00 0782 	add.w	r7, r0, r2, lsl #2
vldr s5, [r7] //putting value of k in s5
 802003a:	edd7 2a00 	vldr	s5, [r7]

//p <- p + q
vadd.f32 s3,s3,s1 // s3 contains updated p
 802003e:	ee71 1aa0 	vadd.f32	s3, s3, s1

//k <- p / (p+r)
vadd.f32 s6,s3,s2
 8020042:	ee31 3a81 	vadd.f32	s6, s3, s2
vdiv.f32 s5,s3,s6 // s5 contains updated k
 8020046:	eec1 2a83 	vdiv.f32	s5, s3, s6
vstr s5, [r7]
 802004a:	edc7 2a00 	vstr	s5, [r7]

//x <- x + k*(measurement - x)
vsub.f32 s6,s0,s4
 802004e:	ee30 3a42 	vsub.f32	s6, s0, s4
vmul.f32 s6,s5,s6
 8020052:	ee22 3a83 	vmul.f32	s6, s5, s6
vadd.f32 s4,s4,s6 // s4 contains updated x
 8020056:	ee32 2a03 	vadd.f32	s4, s4, s6
vstr s4, [r6]
 802005a:	ed86 2a00 	vstr	s4, [r6]
vmov s0, s4 // to return the value of x
 802005e:	eeb0 0a42 	vmov.f32	s0, s4

//p <- (1-k)*p
vmov s6, #1.0
 8020062:	eeb7 3a00 	vmov.f32	s6, #112	@ 0x3f800000  1.0
vsub.f32 s6,s6,s5
 8020066:	ee33 3a62 	vsub.f32	s6, s6, s5
vmul.f32 s3,s3,s6 // s3 contains updated p
 802006a:	ee61 1a83 	vmul.f32	s3, s3, s6
vstr s3, [r5]
 802006e:	edc5 1a00 	vstr	s3, [r5]

//checking if overflow, underflow or division by zero
vmrs r0, fpscr
 8020072:	eef1 0a10 	vmrs	r0, fpscr
mov r1, #0xE  // 0xE corresponds to bits 1, 2, and 3
 8020076:	f04f 010e 	mov.w	r1, #14
and r2, r0, r1
 802007a:	ea00 0201 	and.w	r2, r0, r1
mov r3, #0
 802007e:	f04f 0300 	mov.w	r3, #0
cmp r2, r3
 8020082:	429a      	cmp	r2, r3
bne iferror
 8020084:	d101      	bne.n	802008a <iferror>

pop {r7}
 8020086:	bc80      	pop	{r7}
bx lr
 8020088:	4770      	bx	lr

0802008a <iferror>:

iferror:
mov r0, #0
 802008a:	f04f 0000 	mov.w	r0, #0
sub r0, r0, #1//move -1 in r0 because of either overflow, underflow or division by 0
 802008e:	f1a0 0001 	sub.w	r0, r0, #1
b iferror //infinite loop to stop program
 8020092:	e7fa      	b.n	802008a <iferror>

08020094 <__aeabi_drsub>:
 8020094:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8020098:	e002      	b.n	80200a0 <__adddf3>
 802009a:	bf00      	nop

0802009c <__aeabi_dsub>:
 802009c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080200a0 <__adddf3>:
 80200a0:	b530      	push	{r4, r5, lr}
 80200a2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80200a6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80200aa:	ea94 0f05 	teq	r4, r5
 80200ae:	bf08      	it	eq
 80200b0:	ea90 0f02 	teqeq	r0, r2
 80200b4:	bf1f      	itttt	ne
 80200b6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80200ba:	ea55 0c02 	orrsne.w	ip, r5, r2
 80200be:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80200c2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80200c6:	f000 80e2 	beq.w	802028e <__adddf3+0x1ee>
 80200ca:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80200ce:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80200d2:	bfb8      	it	lt
 80200d4:	426d      	neglt	r5, r5
 80200d6:	dd0c      	ble.n	80200f2 <__adddf3+0x52>
 80200d8:	442c      	add	r4, r5
 80200da:	ea80 0202 	eor.w	r2, r0, r2
 80200de:	ea81 0303 	eor.w	r3, r1, r3
 80200e2:	ea82 0000 	eor.w	r0, r2, r0
 80200e6:	ea83 0101 	eor.w	r1, r3, r1
 80200ea:	ea80 0202 	eor.w	r2, r0, r2
 80200ee:	ea81 0303 	eor.w	r3, r1, r3
 80200f2:	2d36      	cmp	r5, #54	@ 0x36
 80200f4:	bf88      	it	hi
 80200f6:	bd30      	pophi	{r4, r5, pc}
 80200f8:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80200fc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8020100:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8020104:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8020108:	d002      	beq.n	8020110 <__adddf3+0x70>
 802010a:	4240      	negs	r0, r0
 802010c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8020110:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8020114:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8020118:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 802011c:	d002      	beq.n	8020124 <__adddf3+0x84>
 802011e:	4252      	negs	r2, r2
 8020120:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8020124:	ea94 0f05 	teq	r4, r5
 8020128:	f000 80a7 	beq.w	802027a <__adddf3+0x1da>
 802012c:	f1a4 0401 	sub.w	r4, r4, #1
 8020130:	f1d5 0e20 	rsbs	lr, r5, #32
 8020134:	db0d      	blt.n	8020152 <__adddf3+0xb2>
 8020136:	fa02 fc0e 	lsl.w	ip, r2, lr
 802013a:	fa22 f205 	lsr.w	r2, r2, r5
 802013e:	1880      	adds	r0, r0, r2
 8020140:	f141 0100 	adc.w	r1, r1, #0
 8020144:	fa03 f20e 	lsl.w	r2, r3, lr
 8020148:	1880      	adds	r0, r0, r2
 802014a:	fa43 f305 	asr.w	r3, r3, r5
 802014e:	4159      	adcs	r1, r3
 8020150:	e00e      	b.n	8020170 <__adddf3+0xd0>
 8020152:	f1a5 0520 	sub.w	r5, r5, #32
 8020156:	f10e 0e20 	add.w	lr, lr, #32
 802015a:	2a01      	cmp	r2, #1
 802015c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8020160:	bf28      	it	cs
 8020162:	f04c 0c02 	orrcs.w	ip, ip, #2
 8020166:	fa43 f305 	asr.w	r3, r3, r5
 802016a:	18c0      	adds	r0, r0, r3
 802016c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8020170:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8020174:	d507      	bpl.n	8020186 <__adddf3+0xe6>
 8020176:	f04f 0e00 	mov.w	lr, #0
 802017a:	f1dc 0c00 	rsbs	ip, ip, #0
 802017e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8020182:	eb6e 0101 	sbc.w	r1, lr, r1
 8020186:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 802018a:	d31b      	bcc.n	80201c4 <__adddf3+0x124>
 802018c:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8020190:	d30c      	bcc.n	80201ac <__adddf3+0x10c>
 8020192:	0849      	lsrs	r1, r1, #1
 8020194:	ea5f 0030 	movs.w	r0, r0, rrx
 8020198:	ea4f 0c3c 	mov.w	ip, ip, rrx
 802019c:	f104 0401 	add.w	r4, r4, #1
 80201a0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80201a4:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80201a8:	f080 809a 	bcs.w	80202e0 <__adddf3+0x240>
 80201ac:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80201b0:	bf08      	it	eq
 80201b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80201b6:	f150 0000 	adcs.w	r0, r0, #0
 80201ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80201be:	ea41 0105 	orr.w	r1, r1, r5
 80201c2:	bd30      	pop	{r4, r5, pc}
 80201c4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80201c8:	4140      	adcs	r0, r0
 80201ca:	eb41 0101 	adc.w	r1, r1, r1
 80201ce:	3c01      	subs	r4, #1
 80201d0:	bf28      	it	cs
 80201d2:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80201d6:	d2e9      	bcs.n	80201ac <__adddf3+0x10c>
 80201d8:	f091 0f00 	teq	r1, #0
 80201dc:	bf04      	itt	eq
 80201de:	4601      	moveq	r1, r0
 80201e0:	2000      	moveq	r0, #0
 80201e2:	fab1 f381 	clz	r3, r1
 80201e6:	bf08      	it	eq
 80201e8:	3320      	addeq	r3, #32
 80201ea:	f1a3 030b 	sub.w	r3, r3, #11
 80201ee:	f1b3 0220 	subs.w	r2, r3, #32
 80201f2:	da0c      	bge.n	802020e <__adddf3+0x16e>
 80201f4:	320c      	adds	r2, #12
 80201f6:	dd08      	ble.n	802020a <__adddf3+0x16a>
 80201f8:	f102 0c14 	add.w	ip, r2, #20
 80201fc:	f1c2 020c 	rsb	r2, r2, #12
 8020200:	fa01 f00c 	lsl.w	r0, r1, ip
 8020204:	fa21 f102 	lsr.w	r1, r1, r2
 8020208:	e00c      	b.n	8020224 <__adddf3+0x184>
 802020a:	f102 0214 	add.w	r2, r2, #20
 802020e:	bfd8      	it	le
 8020210:	f1c2 0c20 	rsble	ip, r2, #32
 8020214:	fa01 f102 	lsl.w	r1, r1, r2
 8020218:	fa20 fc0c 	lsr.w	ip, r0, ip
 802021c:	bfdc      	itt	le
 802021e:	ea41 010c 	orrle.w	r1, r1, ip
 8020222:	4090      	lslle	r0, r2
 8020224:	1ae4      	subs	r4, r4, r3
 8020226:	bfa2      	ittt	ge
 8020228:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 802022c:	4329      	orrge	r1, r5
 802022e:	bd30      	popge	{r4, r5, pc}
 8020230:	ea6f 0404 	mvn.w	r4, r4
 8020234:	3c1f      	subs	r4, #31
 8020236:	da1c      	bge.n	8020272 <__adddf3+0x1d2>
 8020238:	340c      	adds	r4, #12
 802023a:	dc0e      	bgt.n	802025a <__adddf3+0x1ba>
 802023c:	f104 0414 	add.w	r4, r4, #20
 8020240:	f1c4 0220 	rsb	r2, r4, #32
 8020244:	fa20 f004 	lsr.w	r0, r0, r4
 8020248:	fa01 f302 	lsl.w	r3, r1, r2
 802024c:	ea40 0003 	orr.w	r0, r0, r3
 8020250:	fa21 f304 	lsr.w	r3, r1, r4
 8020254:	ea45 0103 	orr.w	r1, r5, r3
 8020258:	bd30      	pop	{r4, r5, pc}
 802025a:	f1c4 040c 	rsb	r4, r4, #12
 802025e:	f1c4 0220 	rsb	r2, r4, #32
 8020262:	fa20 f002 	lsr.w	r0, r0, r2
 8020266:	fa01 f304 	lsl.w	r3, r1, r4
 802026a:	ea40 0003 	orr.w	r0, r0, r3
 802026e:	4629      	mov	r1, r5
 8020270:	bd30      	pop	{r4, r5, pc}
 8020272:	fa21 f004 	lsr.w	r0, r1, r4
 8020276:	4629      	mov	r1, r5
 8020278:	bd30      	pop	{r4, r5, pc}
 802027a:	f094 0f00 	teq	r4, #0
 802027e:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8020282:	bf06      	itte	eq
 8020284:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8020288:	3401      	addeq	r4, #1
 802028a:	3d01      	subne	r5, #1
 802028c:	e74e      	b.n	802012c <__adddf3+0x8c>
 802028e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8020292:	bf18      	it	ne
 8020294:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8020298:	d029      	beq.n	80202ee <__adddf3+0x24e>
 802029a:	ea94 0f05 	teq	r4, r5
 802029e:	bf08      	it	eq
 80202a0:	ea90 0f02 	teqeq	r0, r2
 80202a4:	d005      	beq.n	80202b2 <__adddf3+0x212>
 80202a6:	ea54 0c00 	orrs.w	ip, r4, r0
 80202aa:	bf04      	itt	eq
 80202ac:	4619      	moveq	r1, r3
 80202ae:	4610      	moveq	r0, r2
 80202b0:	bd30      	pop	{r4, r5, pc}
 80202b2:	ea91 0f03 	teq	r1, r3
 80202b6:	bf1e      	ittt	ne
 80202b8:	2100      	movne	r1, #0
 80202ba:	2000      	movne	r0, #0
 80202bc:	bd30      	popne	{r4, r5, pc}
 80202be:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80202c2:	d105      	bne.n	80202d0 <__adddf3+0x230>
 80202c4:	0040      	lsls	r0, r0, #1
 80202c6:	4149      	adcs	r1, r1
 80202c8:	bf28      	it	cs
 80202ca:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80202ce:	bd30      	pop	{r4, r5, pc}
 80202d0:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80202d4:	bf3c      	itt	cc
 80202d6:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80202da:	bd30      	popcc	{r4, r5, pc}
 80202dc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80202e0:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80202e4:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80202e8:	f04f 0000 	mov.w	r0, #0
 80202ec:	bd30      	pop	{r4, r5, pc}
 80202ee:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80202f2:	bf1a      	itte	ne
 80202f4:	4619      	movne	r1, r3
 80202f6:	4610      	movne	r0, r2
 80202f8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80202fc:	bf1c      	itt	ne
 80202fe:	460b      	movne	r3, r1
 8020300:	4602      	movne	r2, r0
 8020302:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8020306:	bf06      	itte	eq
 8020308:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 802030c:	ea91 0f03 	teqeq	r1, r3
 8020310:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8020314:	bd30      	pop	{r4, r5, pc}
 8020316:	bf00      	nop

08020318 <__aeabi_ui2d>:
 8020318:	f090 0f00 	teq	r0, #0
 802031c:	bf04      	itt	eq
 802031e:	2100      	moveq	r1, #0
 8020320:	4770      	bxeq	lr
 8020322:	b530      	push	{r4, r5, lr}
 8020324:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8020328:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 802032c:	f04f 0500 	mov.w	r5, #0
 8020330:	f04f 0100 	mov.w	r1, #0
 8020334:	e750      	b.n	80201d8 <__adddf3+0x138>
 8020336:	bf00      	nop

08020338 <__aeabi_i2d>:
 8020338:	f090 0f00 	teq	r0, #0
 802033c:	bf04      	itt	eq
 802033e:	2100      	moveq	r1, #0
 8020340:	4770      	bxeq	lr
 8020342:	b530      	push	{r4, r5, lr}
 8020344:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8020348:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 802034c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8020350:	bf48      	it	mi
 8020352:	4240      	negmi	r0, r0
 8020354:	f04f 0100 	mov.w	r1, #0
 8020358:	e73e      	b.n	80201d8 <__adddf3+0x138>
 802035a:	bf00      	nop

0802035c <__aeabi_f2d>:
 802035c:	0042      	lsls	r2, r0, #1
 802035e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8020362:	ea4f 0131 	mov.w	r1, r1, rrx
 8020366:	ea4f 7002 	mov.w	r0, r2, lsl #28
 802036a:	bf1f      	itttt	ne
 802036c:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8020370:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8020374:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8020378:	4770      	bxne	lr
 802037a:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 802037e:	bf08      	it	eq
 8020380:	4770      	bxeq	lr
 8020382:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8020386:	bf04      	itt	eq
 8020388:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 802038c:	4770      	bxeq	lr
 802038e:	b530      	push	{r4, r5, lr}
 8020390:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8020394:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8020398:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 802039c:	e71c      	b.n	80201d8 <__adddf3+0x138>
 802039e:	bf00      	nop

080203a0 <__aeabi_ul2d>:
 80203a0:	ea50 0201 	orrs.w	r2, r0, r1
 80203a4:	bf08      	it	eq
 80203a6:	4770      	bxeq	lr
 80203a8:	b530      	push	{r4, r5, lr}
 80203aa:	f04f 0500 	mov.w	r5, #0
 80203ae:	e00a      	b.n	80203c6 <__aeabi_l2d+0x16>

080203b0 <__aeabi_l2d>:
 80203b0:	ea50 0201 	orrs.w	r2, r0, r1
 80203b4:	bf08      	it	eq
 80203b6:	4770      	bxeq	lr
 80203b8:	b530      	push	{r4, r5, lr}
 80203ba:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80203be:	d502      	bpl.n	80203c6 <__aeabi_l2d+0x16>
 80203c0:	4240      	negs	r0, r0
 80203c2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80203c6:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80203ca:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80203ce:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80203d2:	f43f aed8 	beq.w	8020186 <__adddf3+0xe6>
 80203d6:	f04f 0203 	mov.w	r2, #3
 80203da:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80203de:	bf18      	it	ne
 80203e0:	3203      	addne	r2, #3
 80203e2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80203e6:	bf18      	it	ne
 80203e8:	3203      	addne	r2, #3
 80203ea:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80203ee:	f1c2 0320 	rsb	r3, r2, #32
 80203f2:	fa00 fc03 	lsl.w	ip, r0, r3
 80203f6:	fa20 f002 	lsr.w	r0, r0, r2
 80203fa:	fa01 fe03 	lsl.w	lr, r1, r3
 80203fe:	ea40 000e 	orr.w	r0, r0, lr
 8020402:	fa21 f102 	lsr.w	r1, r1, r2
 8020406:	4414      	add	r4, r2
 8020408:	e6bd      	b.n	8020186 <__adddf3+0xe6>
 802040a:	bf00      	nop

0802040c <__aeabi_dmul>:
 802040c:	b570      	push	{r4, r5, r6, lr}
 802040e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8020412:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8020416:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 802041a:	bf1d      	ittte	ne
 802041c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8020420:	ea94 0f0c 	teqne	r4, ip
 8020424:	ea95 0f0c 	teqne	r5, ip
 8020428:	f000 f8de 	bleq	80205e8 <__aeabi_dmul+0x1dc>
 802042c:	442c      	add	r4, r5
 802042e:	ea81 0603 	eor.w	r6, r1, r3
 8020432:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8020436:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 802043a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 802043e:	bf18      	it	ne
 8020440:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8020444:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8020448:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 802044c:	d038      	beq.n	80204c0 <__aeabi_dmul+0xb4>
 802044e:	fba0 ce02 	umull	ip, lr, r0, r2
 8020452:	f04f 0500 	mov.w	r5, #0
 8020456:	fbe1 e502 	umlal	lr, r5, r1, r2
 802045a:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 802045e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8020462:	f04f 0600 	mov.w	r6, #0
 8020466:	fbe1 5603 	umlal	r5, r6, r1, r3
 802046a:	f09c 0f00 	teq	ip, #0
 802046e:	bf18      	it	ne
 8020470:	f04e 0e01 	orrne.w	lr, lr, #1
 8020474:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8020478:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 802047c:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8020480:	d204      	bcs.n	802048c <__aeabi_dmul+0x80>
 8020482:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8020486:	416d      	adcs	r5, r5
 8020488:	eb46 0606 	adc.w	r6, r6, r6
 802048c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8020490:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8020494:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8020498:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 802049c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80204a0:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80204a4:	bf88      	it	hi
 80204a6:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80204aa:	d81e      	bhi.n	80204ea <__aeabi_dmul+0xde>
 80204ac:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80204b0:	bf08      	it	eq
 80204b2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80204b6:	f150 0000 	adcs.w	r0, r0, #0
 80204ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80204be:	bd70      	pop	{r4, r5, r6, pc}
 80204c0:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80204c4:	ea46 0101 	orr.w	r1, r6, r1
 80204c8:	ea40 0002 	orr.w	r0, r0, r2
 80204cc:	ea81 0103 	eor.w	r1, r1, r3
 80204d0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80204d4:	bfc2      	ittt	gt
 80204d6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80204da:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80204de:	bd70      	popgt	{r4, r5, r6, pc}
 80204e0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80204e4:	f04f 0e00 	mov.w	lr, #0
 80204e8:	3c01      	subs	r4, #1
 80204ea:	f300 80ab 	bgt.w	8020644 <__aeabi_dmul+0x238>
 80204ee:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80204f2:	bfde      	ittt	le
 80204f4:	2000      	movle	r0, #0
 80204f6:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80204fa:	bd70      	pople	{r4, r5, r6, pc}
 80204fc:	f1c4 0400 	rsb	r4, r4, #0
 8020500:	3c20      	subs	r4, #32
 8020502:	da35      	bge.n	8020570 <__aeabi_dmul+0x164>
 8020504:	340c      	adds	r4, #12
 8020506:	dc1b      	bgt.n	8020540 <__aeabi_dmul+0x134>
 8020508:	f104 0414 	add.w	r4, r4, #20
 802050c:	f1c4 0520 	rsb	r5, r4, #32
 8020510:	fa00 f305 	lsl.w	r3, r0, r5
 8020514:	fa20 f004 	lsr.w	r0, r0, r4
 8020518:	fa01 f205 	lsl.w	r2, r1, r5
 802051c:	ea40 0002 	orr.w	r0, r0, r2
 8020520:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8020524:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8020528:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 802052c:	fa21 f604 	lsr.w	r6, r1, r4
 8020530:	eb42 0106 	adc.w	r1, r2, r6
 8020534:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8020538:	bf08      	it	eq
 802053a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 802053e:	bd70      	pop	{r4, r5, r6, pc}
 8020540:	f1c4 040c 	rsb	r4, r4, #12
 8020544:	f1c4 0520 	rsb	r5, r4, #32
 8020548:	fa00 f304 	lsl.w	r3, r0, r4
 802054c:	fa20 f005 	lsr.w	r0, r0, r5
 8020550:	fa01 f204 	lsl.w	r2, r1, r4
 8020554:	ea40 0002 	orr.w	r0, r0, r2
 8020558:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 802055c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8020560:	f141 0100 	adc.w	r1, r1, #0
 8020564:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8020568:	bf08      	it	eq
 802056a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 802056e:	bd70      	pop	{r4, r5, r6, pc}
 8020570:	f1c4 0520 	rsb	r5, r4, #32
 8020574:	fa00 f205 	lsl.w	r2, r0, r5
 8020578:	ea4e 0e02 	orr.w	lr, lr, r2
 802057c:	fa20 f304 	lsr.w	r3, r0, r4
 8020580:	fa01 f205 	lsl.w	r2, r1, r5
 8020584:	ea43 0302 	orr.w	r3, r3, r2
 8020588:	fa21 f004 	lsr.w	r0, r1, r4
 802058c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8020590:	fa21 f204 	lsr.w	r2, r1, r4
 8020594:	ea20 0002 	bic.w	r0, r0, r2
 8020598:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 802059c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80205a0:	bf08      	it	eq
 80205a2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80205a6:	bd70      	pop	{r4, r5, r6, pc}
 80205a8:	f094 0f00 	teq	r4, #0
 80205ac:	d10f      	bne.n	80205ce <__aeabi_dmul+0x1c2>
 80205ae:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80205b2:	0040      	lsls	r0, r0, #1
 80205b4:	eb41 0101 	adc.w	r1, r1, r1
 80205b8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80205bc:	bf08      	it	eq
 80205be:	3c01      	subeq	r4, #1
 80205c0:	d0f7      	beq.n	80205b2 <__aeabi_dmul+0x1a6>
 80205c2:	ea41 0106 	orr.w	r1, r1, r6
 80205c6:	f095 0f00 	teq	r5, #0
 80205ca:	bf18      	it	ne
 80205cc:	4770      	bxne	lr
 80205ce:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80205d2:	0052      	lsls	r2, r2, #1
 80205d4:	eb43 0303 	adc.w	r3, r3, r3
 80205d8:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80205dc:	bf08      	it	eq
 80205de:	3d01      	subeq	r5, #1
 80205e0:	d0f7      	beq.n	80205d2 <__aeabi_dmul+0x1c6>
 80205e2:	ea43 0306 	orr.w	r3, r3, r6
 80205e6:	4770      	bx	lr
 80205e8:	ea94 0f0c 	teq	r4, ip
 80205ec:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80205f0:	bf18      	it	ne
 80205f2:	ea95 0f0c 	teqne	r5, ip
 80205f6:	d00c      	beq.n	8020612 <__aeabi_dmul+0x206>
 80205f8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80205fc:	bf18      	it	ne
 80205fe:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8020602:	d1d1      	bne.n	80205a8 <__aeabi_dmul+0x19c>
 8020604:	ea81 0103 	eor.w	r1, r1, r3
 8020608:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 802060c:	f04f 0000 	mov.w	r0, #0
 8020610:	bd70      	pop	{r4, r5, r6, pc}
 8020612:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8020616:	bf06      	itte	eq
 8020618:	4610      	moveq	r0, r2
 802061a:	4619      	moveq	r1, r3
 802061c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8020620:	d019      	beq.n	8020656 <__aeabi_dmul+0x24a>
 8020622:	ea94 0f0c 	teq	r4, ip
 8020626:	d102      	bne.n	802062e <__aeabi_dmul+0x222>
 8020628:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 802062c:	d113      	bne.n	8020656 <__aeabi_dmul+0x24a>
 802062e:	ea95 0f0c 	teq	r5, ip
 8020632:	d105      	bne.n	8020640 <__aeabi_dmul+0x234>
 8020634:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8020638:	bf1c      	itt	ne
 802063a:	4610      	movne	r0, r2
 802063c:	4619      	movne	r1, r3
 802063e:	d10a      	bne.n	8020656 <__aeabi_dmul+0x24a>
 8020640:	ea81 0103 	eor.w	r1, r1, r3
 8020644:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8020648:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 802064c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8020650:	f04f 0000 	mov.w	r0, #0
 8020654:	bd70      	pop	{r4, r5, r6, pc}
 8020656:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 802065a:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 802065e:	bd70      	pop	{r4, r5, r6, pc}

08020660 <__aeabi_ddiv>:
 8020660:	b570      	push	{r4, r5, r6, lr}
 8020662:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8020666:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 802066a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 802066e:	bf1d      	ittte	ne
 8020670:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8020674:	ea94 0f0c 	teqne	r4, ip
 8020678:	ea95 0f0c 	teqne	r5, ip
 802067c:	f000 f8a7 	bleq	80207ce <__aeabi_ddiv+0x16e>
 8020680:	eba4 0405 	sub.w	r4, r4, r5
 8020684:	ea81 0e03 	eor.w	lr, r1, r3
 8020688:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 802068c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8020690:	f000 8088 	beq.w	80207a4 <__aeabi_ddiv+0x144>
 8020694:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8020698:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 802069c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80206a0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80206a4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80206a8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80206ac:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80206b0:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80206b4:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80206b8:	429d      	cmp	r5, r3
 80206ba:	bf08      	it	eq
 80206bc:	4296      	cmpeq	r6, r2
 80206be:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80206c2:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80206c6:	d202      	bcs.n	80206ce <__aeabi_ddiv+0x6e>
 80206c8:	085b      	lsrs	r3, r3, #1
 80206ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80206ce:	1ab6      	subs	r6, r6, r2
 80206d0:	eb65 0503 	sbc.w	r5, r5, r3
 80206d4:	085b      	lsrs	r3, r3, #1
 80206d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80206da:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80206de:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80206e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80206e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80206ea:	bf22      	ittt	cs
 80206ec:	1ab6      	subcs	r6, r6, r2
 80206ee:	4675      	movcs	r5, lr
 80206f0:	ea40 000c 	orrcs.w	r0, r0, ip
 80206f4:	085b      	lsrs	r3, r3, #1
 80206f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80206fa:	ebb6 0e02 	subs.w	lr, r6, r2
 80206fe:	eb75 0e03 	sbcs.w	lr, r5, r3
 8020702:	bf22      	ittt	cs
 8020704:	1ab6      	subcs	r6, r6, r2
 8020706:	4675      	movcs	r5, lr
 8020708:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 802070c:	085b      	lsrs	r3, r3, #1
 802070e:	ea4f 0232 	mov.w	r2, r2, rrx
 8020712:	ebb6 0e02 	subs.w	lr, r6, r2
 8020716:	eb75 0e03 	sbcs.w	lr, r5, r3
 802071a:	bf22      	ittt	cs
 802071c:	1ab6      	subcs	r6, r6, r2
 802071e:	4675      	movcs	r5, lr
 8020720:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8020724:	085b      	lsrs	r3, r3, #1
 8020726:	ea4f 0232 	mov.w	r2, r2, rrx
 802072a:	ebb6 0e02 	subs.w	lr, r6, r2
 802072e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8020732:	bf22      	ittt	cs
 8020734:	1ab6      	subcs	r6, r6, r2
 8020736:	4675      	movcs	r5, lr
 8020738:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 802073c:	ea55 0e06 	orrs.w	lr, r5, r6
 8020740:	d018      	beq.n	8020774 <__aeabi_ddiv+0x114>
 8020742:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8020746:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 802074a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 802074e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8020752:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8020756:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 802075a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 802075e:	d1c0      	bne.n	80206e2 <__aeabi_ddiv+0x82>
 8020760:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8020764:	d10b      	bne.n	802077e <__aeabi_ddiv+0x11e>
 8020766:	ea41 0100 	orr.w	r1, r1, r0
 802076a:	f04f 0000 	mov.w	r0, #0
 802076e:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8020772:	e7b6      	b.n	80206e2 <__aeabi_ddiv+0x82>
 8020774:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8020778:	bf04      	itt	eq
 802077a:	4301      	orreq	r1, r0
 802077c:	2000      	moveq	r0, #0
 802077e:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8020782:	bf88      	it	hi
 8020784:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8020788:	f63f aeaf 	bhi.w	80204ea <__aeabi_dmul+0xde>
 802078c:	ebb5 0c03 	subs.w	ip, r5, r3
 8020790:	bf04      	itt	eq
 8020792:	ebb6 0c02 	subseq.w	ip, r6, r2
 8020796:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 802079a:	f150 0000 	adcs.w	r0, r0, #0
 802079e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80207a2:	bd70      	pop	{r4, r5, r6, pc}
 80207a4:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80207a8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80207ac:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80207b0:	bfc2      	ittt	gt
 80207b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80207b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80207ba:	bd70      	popgt	{r4, r5, r6, pc}
 80207bc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80207c0:	f04f 0e00 	mov.w	lr, #0
 80207c4:	3c01      	subs	r4, #1
 80207c6:	e690      	b.n	80204ea <__aeabi_dmul+0xde>
 80207c8:	ea45 0e06 	orr.w	lr, r5, r6
 80207cc:	e68d      	b.n	80204ea <__aeabi_dmul+0xde>
 80207ce:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80207d2:	ea94 0f0c 	teq	r4, ip
 80207d6:	bf08      	it	eq
 80207d8:	ea95 0f0c 	teqeq	r5, ip
 80207dc:	f43f af3b 	beq.w	8020656 <__aeabi_dmul+0x24a>
 80207e0:	ea94 0f0c 	teq	r4, ip
 80207e4:	d10a      	bne.n	80207fc <__aeabi_ddiv+0x19c>
 80207e6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80207ea:	f47f af34 	bne.w	8020656 <__aeabi_dmul+0x24a>
 80207ee:	ea95 0f0c 	teq	r5, ip
 80207f2:	f47f af25 	bne.w	8020640 <__aeabi_dmul+0x234>
 80207f6:	4610      	mov	r0, r2
 80207f8:	4619      	mov	r1, r3
 80207fa:	e72c      	b.n	8020656 <__aeabi_dmul+0x24a>
 80207fc:	ea95 0f0c 	teq	r5, ip
 8020800:	d106      	bne.n	8020810 <__aeabi_ddiv+0x1b0>
 8020802:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8020806:	f43f aefd 	beq.w	8020604 <__aeabi_dmul+0x1f8>
 802080a:	4610      	mov	r0, r2
 802080c:	4619      	mov	r1, r3
 802080e:	e722      	b.n	8020656 <__aeabi_dmul+0x24a>
 8020810:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8020814:	bf18      	it	ne
 8020816:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 802081a:	f47f aec5 	bne.w	80205a8 <__aeabi_dmul+0x19c>
 802081e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8020822:	f47f af0d 	bne.w	8020640 <__aeabi_dmul+0x234>
 8020826:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 802082a:	f47f aeeb 	bne.w	8020604 <__aeabi_dmul+0x1f8>
 802082e:	e712      	b.n	8020656 <__aeabi_dmul+0x24a>

08020830 <__gedf2>:
 8020830:	f04f 3cff 	mov.w	ip, #4294967295
 8020834:	e006      	b.n	8020844 <__cmpdf2+0x4>
 8020836:	bf00      	nop

08020838 <__ledf2>:
 8020838:	f04f 0c01 	mov.w	ip, #1
 802083c:	e002      	b.n	8020844 <__cmpdf2+0x4>
 802083e:	bf00      	nop

08020840 <__cmpdf2>:
 8020840:	f04f 0c01 	mov.w	ip, #1
 8020844:	f84d cd04 	str.w	ip, [sp, #-4]!
 8020848:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 802084c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8020850:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8020854:	bf18      	it	ne
 8020856:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 802085a:	d01b      	beq.n	8020894 <__cmpdf2+0x54>
 802085c:	b001      	add	sp, #4
 802085e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8020862:	bf0c      	ite	eq
 8020864:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8020868:	ea91 0f03 	teqne	r1, r3
 802086c:	bf02      	ittt	eq
 802086e:	ea90 0f02 	teqeq	r0, r2
 8020872:	2000      	moveq	r0, #0
 8020874:	4770      	bxeq	lr
 8020876:	f110 0f00 	cmn.w	r0, #0
 802087a:	ea91 0f03 	teq	r1, r3
 802087e:	bf58      	it	pl
 8020880:	4299      	cmppl	r1, r3
 8020882:	bf08      	it	eq
 8020884:	4290      	cmpeq	r0, r2
 8020886:	bf2c      	ite	cs
 8020888:	17d8      	asrcs	r0, r3, #31
 802088a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 802088e:	f040 0001 	orr.w	r0, r0, #1
 8020892:	4770      	bx	lr
 8020894:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8020898:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 802089c:	d102      	bne.n	80208a4 <__cmpdf2+0x64>
 802089e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80208a2:	d107      	bne.n	80208b4 <__cmpdf2+0x74>
 80208a4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80208a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80208ac:	d1d6      	bne.n	802085c <__cmpdf2+0x1c>
 80208ae:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80208b2:	d0d3      	beq.n	802085c <__cmpdf2+0x1c>
 80208b4:	f85d 0b04 	ldr.w	r0, [sp], #4
 80208b8:	4770      	bx	lr
 80208ba:	bf00      	nop

080208bc <__aeabi_cdrcmple>:
 80208bc:	4684      	mov	ip, r0
 80208be:	4610      	mov	r0, r2
 80208c0:	4662      	mov	r2, ip
 80208c2:	468c      	mov	ip, r1
 80208c4:	4619      	mov	r1, r3
 80208c6:	4663      	mov	r3, ip
 80208c8:	e000      	b.n	80208cc <__aeabi_cdcmpeq>
 80208ca:	bf00      	nop

080208cc <__aeabi_cdcmpeq>:
 80208cc:	b501      	push	{r0, lr}
 80208ce:	f7ff ffb7 	bl	8020840 <__cmpdf2>
 80208d2:	2800      	cmp	r0, #0
 80208d4:	bf48      	it	mi
 80208d6:	f110 0f00 	cmnmi.w	r0, #0
 80208da:	bd01      	pop	{r0, pc}

080208dc <__aeabi_dcmpeq>:
 80208dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80208e0:	f7ff fff4 	bl	80208cc <__aeabi_cdcmpeq>
 80208e4:	bf0c      	ite	eq
 80208e6:	2001      	moveq	r0, #1
 80208e8:	2000      	movne	r0, #0
 80208ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80208ee:	bf00      	nop

080208f0 <__aeabi_dcmplt>:
 80208f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80208f4:	f7ff ffea 	bl	80208cc <__aeabi_cdcmpeq>
 80208f8:	bf34      	ite	cc
 80208fa:	2001      	movcc	r0, #1
 80208fc:	2000      	movcs	r0, #0
 80208fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8020902:	bf00      	nop

08020904 <__aeabi_dcmple>:
 8020904:	f84d ed08 	str.w	lr, [sp, #-8]!
 8020908:	f7ff ffe0 	bl	80208cc <__aeabi_cdcmpeq>
 802090c:	bf94      	ite	ls
 802090e:	2001      	movls	r0, #1
 8020910:	2000      	movhi	r0, #0
 8020912:	f85d fb08 	ldr.w	pc, [sp], #8
 8020916:	bf00      	nop

08020918 <__aeabi_dcmpge>:
 8020918:	f84d ed08 	str.w	lr, [sp, #-8]!
 802091c:	f7ff ffce 	bl	80208bc <__aeabi_cdrcmple>
 8020920:	bf94      	ite	ls
 8020922:	2001      	movls	r0, #1
 8020924:	2000      	movhi	r0, #0
 8020926:	f85d fb08 	ldr.w	pc, [sp], #8
 802092a:	bf00      	nop

0802092c <__aeabi_dcmpgt>:
 802092c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8020930:	f7ff ffc4 	bl	80208bc <__aeabi_cdrcmple>
 8020934:	bf34      	ite	cc
 8020936:	2001      	movcc	r0, #1
 8020938:	2000      	movcs	r0, #0
 802093a:	f85d fb08 	ldr.w	pc, [sp], #8
 802093e:	bf00      	nop

08020940 <__aeabi_dcmpun>:
 8020940:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8020944:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8020948:	d102      	bne.n	8020950 <__aeabi_dcmpun+0x10>
 802094a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 802094e:	d10a      	bne.n	8020966 <__aeabi_dcmpun+0x26>
 8020950:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8020954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8020958:	d102      	bne.n	8020960 <__aeabi_dcmpun+0x20>
 802095a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 802095e:	d102      	bne.n	8020966 <__aeabi_dcmpun+0x26>
 8020960:	f04f 0000 	mov.w	r0, #0
 8020964:	4770      	bx	lr
 8020966:	f04f 0001 	mov.w	r0, #1
 802096a:	4770      	bx	lr

0802096c <__aeabi_d2f>:
 802096c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8020970:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8020974:	bf24      	itt	cs
 8020976:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 802097a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 802097e:	d90d      	bls.n	802099c <__aeabi_d2f+0x30>
 8020980:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8020984:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8020988:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 802098c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8020990:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8020994:	bf08      	it	eq
 8020996:	f020 0001 	biceq.w	r0, r0, #1
 802099a:	4770      	bx	lr
 802099c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 80209a0:	d121      	bne.n	80209e6 <__aeabi_d2f+0x7a>
 80209a2:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 80209a6:	bfbc      	itt	lt
 80209a8:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 80209ac:	4770      	bxlt	lr
 80209ae:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80209b2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80209b6:	f1c2 0218 	rsb	r2, r2, #24
 80209ba:	f1c2 0c20 	rsb	ip, r2, #32
 80209be:	fa10 f30c 	lsls.w	r3, r0, ip
 80209c2:	fa20 f002 	lsr.w	r0, r0, r2
 80209c6:	bf18      	it	ne
 80209c8:	f040 0001 	orrne.w	r0, r0, #1
 80209cc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80209d0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80209d4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80209d8:	ea40 000c 	orr.w	r0, r0, ip
 80209dc:	fa23 f302 	lsr.w	r3, r3, r2
 80209e0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80209e4:	e7cc      	b.n	8020980 <__aeabi_d2f+0x14>
 80209e6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80209ea:	d107      	bne.n	80209fc <__aeabi_d2f+0x90>
 80209ec:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80209f0:	bf1e      	ittt	ne
 80209f2:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 80209f6:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 80209fa:	4770      	bxne	lr
 80209fc:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8020a00:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8020a04:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8020a08:	4770      	bx	lr
 8020a0a:	bf00      	nop

08020a0c <Kalmanfilter>:
#include <math.h>
#include "kalman_c.h"

int Kalmanfilter(float* InputArray, float* OutputArray, kalman_state* kstate, int Length){
 8020a0c:	b480      	push	{r7}
 8020a0e:	b087      	sub	sp, #28
 8020a10:	af00      	add	r7, sp, #0
 8020a12:	60f8      	str	r0, [r7, #12]
 8020a14:	60b9      	str	r1, [r7, #8]
 8020a16:	607a      	str	r2, [r7, #4]
 8020a18:	603b      	str	r3, [r7, #0]
	for(int i =0; i <Length; i++){
 8020a1a:	2300      	movs	r3, #0
 8020a1c:	617b      	str	r3, [r7, #20]
 8020a1e:	e093      	b.n	8020b48 <Kalmanfilter+0x13c>
		if (isnan(kstate->x) || isnan(kstate->p) || isinf(kstate->x) || isinf(kstate->p) || (kstate->p + kstate->r==0)){
 8020a20:	687b      	ldr	r3, [r7, #4]
 8020a22:	edd3 7a03 	vldr	s15, [r3, #12]
 8020a26:	eef4 7a67 	vcmp.f32	s15, s15
 8020a2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020a2e:	d63c      	bvs.n	8020aaa <Kalmanfilter+0x9e>
 8020a30:	687b      	ldr	r3, [r7, #4]
 8020a32:	edd3 7a02 	vldr	s15, [r3, #8]
 8020a36:	eef4 7a67 	vcmp.f32	s15, s15
 8020a3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020a3e:	d634      	bvs.n	8020aaa <Kalmanfilter+0x9e>
 8020a40:	687b      	ldr	r3, [r7, #4]
 8020a42:	edd3 7a03 	vldr	s15, [r3, #12]
 8020a46:	eef0 7ae7 	vabs.f32	s15, s15
 8020a4a:	ed9f 7a45 	vldr	s14, [pc, #276]	@ 8020b60 <Kalmanfilter+0x154>
 8020a4e:	eef4 7a47 	vcmp.f32	s15, s14
 8020a52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020a56:	bfd4      	ite	le
 8020a58:	2301      	movle	r3, #1
 8020a5a:	2300      	movgt	r3, #0
 8020a5c:	b2db      	uxtb	r3, r3
 8020a5e:	f083 0301 	eor.w	r3, r3, #1
 8020a62:	b2db      	uxtb	r3, r3
 8020a64:	2b00      	cmp	r3, #0
 8020a66:	d120      	bne.n	8020aaa <Kalmanfilter+0x9e>
 8020a68:	687b      	ldr	r3, [r7, #4]
 8020a6a:	edd3 7a02 	vldr	s15, [r3, #8]
 8020a6e:	eef0 7ae7 	vabs.f32	s15, s15
 8020a72:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 8020b60 <Kalmanfilter+0x154>
 8020a76:	eef4 7a47 	vcmp.f32	s15, s14
 8020a7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020a7e:	bfd4      	ite	le
 8020a80:	2301      	movle	r3, #1
 8020a82:	2300      	movgt	r3, #0
 8020a84:	b2db      	uxtb	r3, r3
 8020a86:	f083 0301 	eor.w	r3, r3, #1
 8020a8a:	b2db      	uxtb	r3, r3
 8020a8c:	2b00      	cmp	r3, #0
 8020a8e:	d10c      	bne.n	8020aaa <Kalmanfilter+0x9e>
 8020a90:	687b      	ldr	r3, [r7, #4]
 8020a92:	ed93 7a02 	vldr	s14, [r3, #8]
 8020a96:	687b      	ldr	r3, [r7, #4]
 8020a98:	edd3 7a01 	vldr	s15, [r3, #4]
 8020a9c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8020aa0:	eef5 7a40 	vcmp.f32	s15, #0.0
 8020aa4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020aa8:	d102      	bne.n	8020ab0 <Kalmanfilter+0xa4>
			return -1;
 8020aaa:	f04f 33ff 	mov.w	r3, #4294967295
 8020aae:	e051      	b.n	8020b54 <Kalmanfilter+0x148>
		}
		kstate->p = kstate->p + kstate->q;
 8020ab0:	687b      	ldr	r3, [r7, #4]
 8020ab2:	ed93 7a02 	vldr	s14, [r3, #8]
 8020ab6:	687b      	ldr	r3, [r7, #4]
 8020ab8:	edd3 7a00 	vldr	s15, [r3]
 8020abc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8020ac0:	687b      	ldr	r3, [r7, #4]
 8020ac2:	edc3 7a02 	vstr	s15, [r3, #8]
		kstate->k = kstate->p/(kstate->p + kstate->r);
 8020ac6:	687b      	ldr	r3, [r7, #4]
 8020ac8:	edd3 6a02 	vldr	s13, [r3, #8]
 8020acc:	687b      	ldr	r3, [r7, #4]
 8020ace:	ed93 7a02 	vldr	s14, [r3, #8]
 8020ad2:	687b      	ldr	r3, [r7, #4]
 8020ad4:	edd3 7a01 	vldr	s15, [r3, #4]
 8020ad8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8020adc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8020ae0:	687b      	ldr	r3, [r7, #4]
 8020ae2:	edc3 7a04 	vstr	s15, [r3, #16]
		kstate->x = kstate->x + kstate->k * (InputArray[i] - kstate->x);
 8020ae6:	687b      	ldr	r3, [r7, #4]
 8020ae8:	ed93 7a03 	vldr	s14, [r3, #12]
 8020aec:	687b      	ldr	r3, [r7, #4]
 8020aee:	edd3 6a04 	vldr	s13, [r3, #16]
 8020af2:	697b      	ldr	r3, [r7, #20]
 8020af4:	009b      	lsls	r3, r3, #2
 8020af6:	68fa      	ldr	r2, [r7, #12]
 8020af8:	4413      	add	r3, r2
 8020afa:	ed93 6a00 	vldr	s12, [r3]
 8020afe:	687b      	ldr	r3, [r7, #4]
 8020b00:	edd3 7a03 	vldr	s15, [r3, #12]
 8020b04:	ee76 7a67 	vsub.f32	s15, s12, s15
 8020b08:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8020b0c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8020b10:	687b      	ldr	r3, [r7, #4]
 8020b12:	edc3 7a03 	vstr	s15, [r3, #12]
		kstate->p = (1 - kstate->k) * kstate->p;
 8020b16:	687b      	ldr	r3, [r7, #4]
 8020b18:	edd3 7a04 	vldr	s15, [r3, #16]
 8020b1c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8020b20:	ee37 7a67 	vsub.f32	s14, s14, s15
 8020b24:	687b      	ldr	r3, [r7, #4]
 8020b26:	edd3 7a02 	vldr	s15, [r3, #8]
 8020b2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8020b2e:	687b      	ldr	r3, [r7, #4]
 8020b30:	edc3 7a02 	vstr	s15, [r3, #8]
		OutputArray[i]=kstate->x;
 8020b34:	697b      	ldr	r3, [r7, #20]
 8020b36:	009b      	lsls	r3, r3, #2
 8020b38:	68ba      	ldr	r2, [r7, #8]
 8020b3a:	4413      	add	r3, r2
 8020b3c:	687a      	ldr	r2, [r7, #4]
 8020b3e:	68d2      	ldr	r2, [r2, #12]
 8020b40:	601a      	str	r2, [r3, #0]
	for(int i =0; i <Length; i++){
 8020b42:	697b      	ldr	r3, [r7, #20]
 8020b44:	3301      	adds	r3, #1
 8020b46:	617b      	str	r3, [r7, #20]
 8020b48:	697a      	ldr	r2, [r7, #20]
 8020b4a:	683b      	ldr	r3, [r7, #0]
 8020b4c:	429a      	cmp	r2, r3
 8020b4e:	f6ff af67 	blt.w	8020a20 <Kalmanfilter+0x14>
	}

	return 0;
 8020b52:	2300      	movs	r3, #0
}
 8020b54:	4618      	mov	r0, r3
 8020b56:	371c      	adds	r7, #28
 8020b58:	46bd      	mov	sp, r7
 8020b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020b5e:	4770      	bx	lr
 8020b60:	7f7fffff 	.word	0x7f7fffff

08020b64 <KalmanfilterCMSIS>:
#include <math.h>
#include "kalman_c.h"

int KalmanfilterCMSIS(float* InputArray, float* OutputArray, kalman_state* kstate, int Length){
 8020b64:	b580      	push	{r7, lr}
 8020b66:	b08e      	sub	sp, #56	@ 0x38
 8020b68:	af00      	add	r7, sp, #0
 8020b6a:	60f8      	str	r0, [r7, #12]
 8020b6c:	60b9      	str	r1, [r7, #8]
 8020b6e:	607a      	str	r2, [r7, #4]
 8020b70:	603b      	str	r3, [r7, #0]
	for(int i =0; i <Length; i++){
 8020b72:	2300      	movs	r3, #0
 8020b74:	637b      	str	r3, [r7, #52]	@ 0x34
 8020b76:	e0ca      	b.n	8020d0e <KalmanfilterCMSIS+0x1aa>
		if (isnan(kstate->x) || isnan(kstate->p) || isinf(kstate->x) || isinf(kstate->p) || (kstate->p + kstate->r==0)){
 8020b78:	687b      	ldr	r3, [r7, #4]
 8020b7a:	edd3 7a03 	vldr	s15, [r3, #12]
 8020b7e:	eef4 7a67 	vcmp.f32	s15, s15
 8020b82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020b86:	d63c      	bvs.n	8020c02 <KalmanfilterCMSIS+0x9e>
 8020b88:	687b      	ldr	r3, [r7, #4]
 8020b8a:	edd3 7a02 	vldr	s15, [r3, #8]
 8020b8e:	eef4 7a67 	vcmp.f32	s15, s15
 8020b92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020b96:	d634      	bvs.n	8020c02 <KalmanfilterCMSIS+0x9e>
 8020b98:	687b      	ldr	r3, [r7, #4]
 8020b9a:	edd3 7a03 	vldr	s15, [r3, #12]
 8020b9e:	eef0 7ae7 	vabs.f32	s15, s15
 8020ba2:	ed9f 7a60 	vldr	s14, [pc, #384]	@ 8020d24 <KalmanfilterCMSIS+0x1c0>
 8020ba6:	eef4 7a47 	vcmp.f32	s15, s14
 8020baa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020bae:	bfd4      	ite	le
 8020bb0:	2301      	movle	r3, #1
 8020bb2:	2300      	movgt	r3, #0
 8020bb4:	b2db      	uxtb	r3, r3
 8020bb6:	f083 0301 	eor.w	r3, r3, #1
 8020bba:	b2db      	uxtb	r3, r3
 8020bbc:	2b00      	cmp	r3, #0
 8020bbe:	d120      	bne.n	8020c02 <KalmanfilterCMSIS+0x9e>
 8020bc0:	687b      	ldr	r3, [r7, #4]
 8020bc2:	edd3 7a02 	vldr	s15, [r3, #8]
 8020bc6:	eef0 7ae7 	vabs.f32	s15, s15
 8020bca:	ed9f 7a56 	vldr	s14, [pc, #344]	@ 8020d24 <KalmanfilterCMSIS+0x1c0>
 8020bce:	eef4 7a47 	vcmp.f32	s15, s14
 8020bd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020bd6:	bfd4      	ite	le
 8020bd8:	2301      	movle	r3, #1
 8020bda:	2300      	movgt	r3, #0
 8020bdc:	b2db      	uxtb	r3, r3
 8020bde:	f083 0301 	eor.w	r3, r3, #1
 8020be2:	b2db      	uxtb	r3, r3
 8020be4:	2b00      	cmp	r3, #0
 8020be6:	d10c      	bne.n	8020c02 <KalmanfilterCMSIS+0x9e>
 8020be8:	687b      	ldr	r3, [r7, #4]
 8020bea:	ed93 7a02 	vldr	s14, [r3, #8]
 8020bee:	687b      	ldr	r3, [r7, #4]
 8020bf0:	edd3 7a01 	vldr	s15, [r3, #4]
 8020bf4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8020bf8:	eef5 7a40 	vcmp.f32	s15, #0.0
 8020bfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020c00:	d102      	bne.n	8020c08 <KalmanfilterCMSIS+0xa4>
			return -1;
 8020c02:	f04f 33ff 	mov.w	r3, #4294967295
 8020c06:	e088      	b.n	8020d1a <KalmanfilterCMSIS+0x1b6>
		}

		float p[]={kstate->p};
 8020c08:	687b      	ldr	r3, [r7, #4]
 8020c0a:	689b      	ldr	r3, [r3, #8]
 8020c0c:	633b      	str	r3, [r7, #48]	@ 0x30
		float k[]={kstate->k};
 8020c0e:	687b      	ldr	r3, [r7, #4]
 8020c10:	691b      	ldr	r3, [r3, #16]
 8020c12:	62fb      	str	r3, [r7, #44]	@ 0x2c
		float q[]={kstate->q};
 8020c14:	687b      	ldr	r3, [r7, #4]
 8020c16:	681b      	ldr	r3, [r3, #0]
 8020c18:	62bb      	str	r3, [r7, #40]	@ 0x28
		float x[]={kstate->x};
 8020c1a:	687b      	ldr	r3, [r7, #4]
 8020c1c:	68db      	ldr	r3, [r3, #12]
 8020c1e:	627b      	str	r3, [r7, #36]	@ 0x24
		float r[]={kstate->r};
 8020c20:	687b      	ldr	r3, [r7, #4]
 8020c22:	685b      	ldr	r3, [r3, #4]
 8020c24:	623b      	str	r3, [r7, #32]
		float measurement[]={InputArray[i]};
 8020c26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8020c28:	009b      	lsls	r3, r3, #2
 8020c2a:	68fa      	ldr	r2, [r7, #12]
 8020c2c:	4413      	add	r3, r2
 8020c2e:	681b      	ldr	r3, [r3, #0]
 8020c30:	61fb      	str	r3, [r7, #28]
		float temp[1];
		float oneArr[]={1.0};
 8020c32:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8020c36:	617b      	str	r3, [r7, #20]

		//p <- p + q
		arm_add_f32(p, q, p,1);
 8020c38:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8020c3c:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8020c40:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 8020c44:	2301      	movs	r3, #1
 8020c46:	f002 fcbb 	bl	80235c0 <arm_add_f32>

		//k <- p / (p+r)
		arm_add_f32(p, r, temp,1);
 8020c4a:	f107 0218 	add.w	r2, r7, #24
 8020c4e:	f107 0120 	add.w	r1, r7, #32
 8020c52:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 8020c56:	2301      	movs	r3, #1
 8020c58:	f002 fcb2 	bl	80235c0 <arm_add_f32>
		kstate->k = p[0]/temp[0];
 8020c5c:	edd7 6a0c 	vldr	s13, [r7, #48]	@ 0x30
 8020c60:	ed97 7a06 	vldr	s14, [r7, #24]
 8020c64:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8020c68:	687b      	ldr	r3, [r7, #4]
 8020c6a:	edc3 7a04 	vstr	s15, [r3, #16]
		k[0]=kstate->k;
 8020c6e:	687b      	ldr	r3, [r7, #4]
 8020c70:	691b      	ldr	r3, [r3, #16]
 8020c72:	62fb      	str	r3, [r7, #44]	@ 0x2c

		//x <- x + k*(measurement - x)
		arm_negate_f32(x, temp, 1);
 8020c74:	f107 0118 	add.w	r1, r7, #24
 8020c78:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8020c7c:	2201      	movs	r2, #1
 8020c7e:	4618      	mov	r0, r3
 8020c80:	f002 fc00 	bl	8023484 <arm_negate_f32>
		arm_add_f32(measurement, temp,temp,1);
 8020c84:	f107 0218 	add.w	r2, r7, #24
 8020c88:	f107 0118 	add.w	r1, r7, #24
 8020c8c:	f107 001c 	add.w	r0, r7, #28
 8020c90:	2301      	movs	r3, #1
 8020c92:	f002 fc95 	bl	80235c0 <arm_add_f32>
		arm_mult_f32(k, temp, temp,1);
 8020c96:	f107 0218 	add.w	r2, r7, #24
 8020c9a:	f107 0118 	add.w	r1, r7, #24
 8020c9e:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 8020ca2:	2301      	movs	r3, #1
 8020ca4:	f002 fc32 	bl	802350c <arm_mult_f32>
		arm_add_f32(x, temp,x,1);
 8020ca8:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8020cac:	f107 0118 	add.w	r1, r7, #24
 8020cb0:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8020cb4:	2301      	movs	r3, #1
 8020cb6:	f002 fc83 	bl	80235c0 <arm_add_f32>
		kstate->x=x[0];
 8020cba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8020cbc:	687b      	ldr	r3, [r7, #4]
 8020cbe:	60da      	str	r2, [r3, #12]

		//p <- (1-k)*p
		arm_negate_f32(k,temp,1);
 8020cc0:	f107 0118 	add.w	r1, r7, #24
 8020cc4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8020cc8:	2201      	movs	r2, #1
 8020cca:	4618      	mov	r0, r3
 8020ccc:	f002 fbda 	bl	8023484 <arm_negate_f32>
		arm_add_f32(oneArr,temp,temp,1);
 8020cd0:	f107 0218 	add.w	r2, r7, #24
 8020cd4:	f107 0118 	add.w	r1, r7, #24
 8020cd8:	f107 0014 	add.w	r0, r7, #20
 8020cdc:	2301      	movs	r3, #1
 8020cde:	f002 fc6f 	bl	80235c0 <arm_add_f32>
		arm_mult_f32(p,temp,p,1);
 8020ce2:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8020ce6:	f107 0118 	add.w	r1, r7, #24
 8020cea:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 8020cee:	2301      	movs	r3, #1
 8020cf0:	f002 fc0c 	bl	802350c <arm_mult_f32>
		kstate->p = p[0];
 8020cf4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8020cf6:	687b      	ldr	r3, [r7, #4]
 8020cf8:	609a      	str	r2, [r3, #8]
		OutputArray[i]=kstate->x;
 8020cfa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8020cfc:	009b      	lsls	r3, r3, #2
 8020cfe:	68ba      	ldr	r2, [r7, #8]
 8020d00:	4413      	add	r3, r2
 8020d02:	687a      	ldr	r2, [r7, #4]
 8020d04:	68d2      	ldr	r2, [r2, #12]
 8020d06:	601a      	str	r2, [r3, #0]
	for(int i =0; i <Length; i++){
 8020d08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8020d0a:	3301      	adds	r3, #1
 8020d0c:	637b      	str	r3, [r7, #52]	@ 0x34
 8020d0e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8020d10:	683b      	ldr	r3, [r7, #0]
 8020d12:	429a      	cmp	r2, r3
 8020d14:	f6ff af30 	blt.w	8020b78 <KalmanfilterCMSIS+0x14>
	}

	return 0;
 8020d18:	2300      	movs	r3, #0
}
 8020d1a:	4618      	mov	r0, r3
 8020d1c:	3738      	adds	r7, #56	@ 0x38
 8020d1e:	46bd      	mov	sp, r7
 8020d20:	bd80      	pop	{r7, pc}
 8020d22:	bf00      	nop
 8020d24:	7f7fffff 	.word	0x7f7fffff

08020d28 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8020d28:	b5b0      	push	{r4, r5, r7, lr}
 8020d2a:	f5ad 5dc1 	sub.w	sp, sp, #6176	@ 0x1820
 8020d2e:	b086      	sub	sp, #24
 8020d30:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8020d32:	f000 fcd0 	bl	80216d6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8020d36:	f000 fbc3 	bl	80214c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8020d3a:	f000 fc13 	bl	8021564 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  float TEST_ARRAY[] = {10.4915760032, 10.1349974709, 9.53992591829, 9.60311878706,
 8020d3e:	f507 53c1 	add.w	r3, r7, #6176	@ 0x1820
 8020d42:	f103 0310 	add.w	r3, r3, #16
 8020d46:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8020d4a:	4abd      	ldr	r2, [pc, #756]	@ (8021040 <main+0x318>)
 8020d4c:	4618      	mov	r0, r3
 8020d4e:	4611      	mov	r1, r2
 8020d50:	f44f 73ca 	mov.w	r3, #404	@ 0x194
 8020d54:	461a      	mov	r2, r3
 8020d56:	f002 fcbf 	bl	80236d8 <memcpy>
                        9.5799256668};

  float test_array_output_C[101];
  float test_array_output_ass[101];
  float test_array_output_cmsis[101];
  int l = 101;
 8020d5a:	2365      	movs	r3, #101	@ 0x65
 8020d5c:	f507 52bf 	add.w	r2, r7, #6112	@ 0x17e0
 8020d60:	f102 0208 	add.w	r2, r2, #8
 8020d64:	6013      	str	r3, [r2, #0]
  int output;
  int output2;

  ITM_Port32(31) = 1;
 8020d66:	4bb7      	ldr	r3, [pc, #732]	@ (8021044 <main+0x31c>)
 8020d68:	2201      	movs	r2, #1
 8020d6a:	601a      	str	r2, [r3, #0]

  for (int z = 0; z < 1000; z++)
 8020d6c:	2300      	movs	r3, #0
 8020d6e:	f507 52c1 	add.w	r2, r7, #6176	@ 0x1820
 8020d72:	f102 0204 	add.w	r2, r2, #4
 8020d76:	6013      	str	r3, [r2, #0]
 8020d78:	e02c      	b.n	8020dd4 <main+0xac>
  { // 1000 execution of kalman filter in C
    kalman_state state = {0.1, 0.1, 0.1, 5, 0};
 8020d7a:	f507 6303 	add.w	r3, r7, #2096	@ 0x830
 8020d7e:	f6a3 0308 	subw	r3, r3, #2056	@ 0x808
 8020d82:	4ab1      	ldr	r2, [pc, #708]	@ (8021048 <main+0x320>)
 8020d84:	461c      	mov	r4, r3
 8020d86:	4615      	mov	r5, r2
 8020d88:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8020d8a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8020d8c:	682b      	ldr	r3, [r5, #0]
 8020d8e:	6023      	str	r3, [r4, #0]
    output = Kalmanfilter(TEST_ARRAY, test_array_output_C, &state, l);
 8020d90:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8020d94:	3a08      	subs	r2, #8
 8020d96:	f507 51a5 	add.w	r1, r7, #5280	@ 0x14a0
 8020d9a:	f101 0118 	add.w	r1, r1, #24
 8020d9e:	f507 50b2 	add.w	r0, r7, #5696	@ 0x1640
 8020da2:	f100 000c 	add.w	r0, r0, #12
 8020da6:	f507 53bf 	add.w	r3, r7, #6112	@ 0x17e0
 8020daa:	f103 0308 	add.w	r3, r3, #8
 8020dae:	681b      	ldr	r3, [r3, #0]
 8020db0:	f7ff fe2c 	bl	8020a0c <Kalmanfilter>
 8020db4:	f507 53c1 	add.w	r3, r7, #6176	@ 0x1820
 8020db8:	f103 030c 	add.w	r3, r3, #12
 8020dbc:	6018      	str	r0, [r3, #0]
  for (int z = 0; z < 1000; z++)
 8020dbe:	f507 53c1 	add.w	r3, r7, #6176	@ 0x1820
 8020dc2:	f103 0304 	add.w	r3, r3, #4
 8020dc6:	681b      	ldr	r3, [r3, #0]
 8020dc8:	3301      	adds	r3, #1
 8020dca:	f507 52c1 	add.w	r2, r7, #6176	@ 0x1820
 8020dce:	f102 0204 	add.w	r2, r2, #4
 8020dd2:	6013      	str	r3, [r2, #0]
 8020dd4:	f507 53c1 	add.w	r3, r7, #6176	@ 0x1820
 8020dd8:	f103 0304 	add.w	r3, r3, #4
 8020ddc:	681b      	ldr	r3, [r3, #0]
 8020dde:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8020de2:	dbca      	blt.n	8020d7a <main+0x52>
  }
  ITM_Port32(31) = 2;
 8020de4:	4b97      	ldr	r3, [pc, #604]	@ (8021044 <main+0x31c>)
 8020de6:	2202      	movs	r2, #2
 8020de8:	601a      	str	r2, [r3, #0]

  for (int z = 0; z < 1000; z++)
 8020dea:	2300      	movs	r3, #0
 8020dec:	f507 52c1 	add.w	r2, r7, #6176	@ 0x1820
 8020df0:	6013      	str	r3, [r2, #0]
 8020df2:	e057      	b.n	8020ea4 <main+0x17c>
  { // 1000 execution of kalman filter in ASSEMBLY
    float stateArr[5] = {0.1, 0.1, 0.1, 5, 0};
 8020df4:	f507 6303 	add.w	r3, r7, #2096	@ 0x830
 8020df8:	f6a3 031c 	subw	r3, r3, #2076	@ 0x81c
 8020dfc:	4a93      	ldr	r2, [pc, #588]	@ (802104c <main+0x324>)
 8020dfe:	461c      	mov	r4, r3
 8020e00:	4615      	mov	r5, r2
 8020e02:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8020e04:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8020e06:	682b      	ldr	r3, [r5, #0]
 8020e08:	6023      	str	r3, [r4, #0]
    for (int i = 0; i < l; i++)
 8020e0a:	2300      	movs	r3, #0
 8020e0c:	f507 52c0 	add.w	r2, r7, #6144	@ 0x1800
 8020e10:	f102 021c 	add.w	r2, r2, #28
 8020e14:	6013      	str	r3, [r2, #0]
 8020e16:	e032      	b.n	8020e7e <main+0x156>
    {
      test_array_output_ass[i] = kalman_assem(TEST_ARRAY[i], &stateArr);
 8020e18:	f507 53c1 	add.w	r3, r7, #6176	@ 0x1820
 8020e1c:	f103 0310 	add.w	r3, r3, #16
 8020e20:	f5a3 72f2 	sub.w	r2, r3, #484	@ 0x1e4
 8020e24:	f507 53c0 	add.w	r3, r7, #6144	@ 0x1800
 8020e28:	f103 031c 	add.w	r3, r3, #28
 8020e2c:	681b      	ldr	r3, [r3, #0]
 8020e2e:	009b      	lsls	r3, r3, #2
 8020e30:	4413      	add	r3, r2
 8020e32:	edd3 7a00 	vldr	s15, [r3]
 8020e36:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8020e3a:	3b1c      	subs	r3, #28
 8020e3c:	4618      	mov	r0, r3
 8020e3e:	eeb0 0a67 	vmov.f32	s0, s15
 8020e42:	f7ff f8dd 	bl	8020000 <kalman_assem>
 8020e46:	eef0 7a40 	vmov.f32	s15, s0
 8020e4a:	f507 53c1 	add.w	r3, r7, #6176	@ 0x1820
 8020e4e:	f103 0310 	add.w	r3, r3, #16
 8020e52:	f2a3 520c 	subw	r2, r3, #1292	@ 0x50c
 8020e56:	f507 53c0 	add.w	r3, r7, #6144	@ 0x1800
 8020e5a:	f103 031c 	add.w	r3, r3, #28
 8020e5e:	681b      	ldr	r3, [r3, #0]
 8020e60:	009b      	lsls	r3, r3, #2
 8020e62:	4413      	add	r3, r2
 8020e64:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < l; i++)
 8020e68:	f507 53c0 	add.w	r3, r7, #6144	@ 0x1800
 8020e6c:	f103 031c 	add.w	r3, r3, #28
 8020e70:	681b      	ldr	r3, [r3, #0]
 8020e72:	3301      	adds	r3, #1
 8020e74:	f507 52c0 	add.w	r2, r7, #6144	@ 0x1800
 8020e78:	f102 021c 	add.w	r2, r2, #28
 8020e7c:	6013      	str	r3, [r2, #0]
 8020e7e:	f507 53c0 	add.w	r3, r7, #6144	@ 0x1800
 8020e82:	f103 031c 	add.w	r3, r3, #28
 8020e86:	681a      	ldr	r2, [r3, #0]
 8020e88:	f507 53bf 	add.w	r3, r7, #6112	@ 0x17e0
 8020e8c:	f103 0308 	add.w	r3, r3, #8
 8020e90:	681b      	ldr	r3, [r3, #0]
 8020e92:	429a      	cmp	r2, r3
 8020e94:	dbc0      	blt.n	8020e18 <main+0xf0>
  for (int z = 0; z < 1000; z++)
 8020e96:	f507 53c1 	add.w	r3, r7, #6176	@ 0x1820
 8020e9a:	681b      	ldr	r3, [r3, #0]
 8020e9c:	3301      	adds	r3, #1
 8020e9e:	f507 52c1 	add.w	r2, r7, #6176	@ 0x1820
 8020ea2:	6013      	str	r3, [r2, #0]
 8020ea4:	f507 53c1 	add.w	r3, r7, #6176	@ 0x1820
 8020ea8:	681b      	ldr	r3, [r3, #0]
 8020eaa:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8020eae:	dba1      	blt.n	8020df4 <main+0xcc>
    }
  }
  ITM_Port32(31) = 3;
 8020eb0:	4b64      	ldr	r3, [pc, #400]	@ (8021044 <main+0x31c>)
 8020eb2:	2203      	movs	r2, #3
 8020eb4:	601a      	str	r2, [r3, #0]

  for (int z = 0; z < 1000; z++)
 8020eb6:	2300      	movs	r3, #0
 8020eb8:	f507 52c0 	add.w	r2, r7, #6144	@ 0x1800
 8020ebc:	f102 0218 	add.w	r2, r2, #24
 8020ec0:	6013      	str	r3, [r2, #0]
 8020ec2:	e02c      	b.n	8020f1e <main+0x1f6>
  { // 1000 execution of kalman filter in CMSIS
    kalman_state state2 = {0.1, 0.1, 0.1, 5, 0};
 8020ec4:	f507 6303 	add.w	r3, r7, #2096	@ 0x830
 8020ec8:	f5a3 6303 	sub.w	r3, r3, #2096	@ 0x830
 8020ecc:	4a5e      	ldr	r2, [pc, #376]	@ (8021048 <main+0x320>)
 8020ece:	461c      	mov	r4, r3
 8020ed0:	4615      	mov	r5, r2
 8020ed2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8020ed4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8020ed6:	682b      	ldr	r3, [r5, #0]
 8020ed8:	6023      	str	r3, [r4, #0]
    output2 = KalmanfilterCMSIS(TEST_ARRAY, test_array_output_cmsis, &state2, l);
 8020eda:	f107 0210 	add.w	r2, r7, #16
 8020ede:	3a10      	subs	r2, #16
 8020ee0:	f507 518c 	add.w	r1, r7, #4480	@ 0x1180
 8020ee4:	f101 0110 	add.w	r1, r1, #16
 8020ee8:	f507 50b2 	add.w	r0, r7, #5696	@ 0x1640
 8020eec:	f100 000c 	add.w	r0, r0, #12
 8020ef0:	f507 53bf 	add.w	r3, r7, #6112	@ 0x17e0
 8020ef4:	f103 0308 	add.w	r3, r3, #8
 8020ef8:	681b      	ldr	r3, [r3, #0]
 8020efa:	f7ff fe33 	bl	8020b64 <KalmanfilterCMSIS>
 8020efe:	f507 53c1 	add.w	r3, r7, #6176	@ 0x1820
 8020f02:	f103 0308 	add.w	r3, r3, #8
 8020f06:	6018      	str	r0, [r3, #0]
  for (int z = 0; z < 1000; z++)
 8020f08:	f507 53c0 	add.w	r3, r7, #6144	@ 0x1800
 8020f0c:	f103 0318 	add.w	r3, r3, #24
 8020f10:	681b      	ldr	r3, [r3, #0]
 8020f12:	3301      	adds	r3, #1
 8020f14:	f507 52c0 	add.w	r2, r7, #6144	@ 0x1800
 8020f18:	f102 0218 	add.w	r2, r2, #24
 8020f1c:	6013      	str	r3, [r2, #0]
 8020f1e:	f507 53c0 	add.w	r3, r7, #6144	@ 0x1800
 8020f22:	f103 0318 	add.w	r3, r3, #24
 8020f26:	681b      	ldr	r3, [r3, #0]
 8020f28:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8020f2c:	dbca      	blt.n	8020ec4 <main+0x19c>
  }

  ITM_Port32(31) = 4;
 8020f2e:	4b45      	ldr	r3, [pc, #276]	@ (8021044 <main+0x31c>)
 8020f30:	2204      	movs	r2, #4
 8020f32:	601a      	str	r2, [r3, #0]

  //if kalman function in C or in CMSIS return -1, then we had an error
  if(output == -1 || output2 == -1){
 8020f34:	f507 53c1 	add.w	r3, r7, #6176	@ 0x1820
 8020f38:	f103 030c 	add.w	r3, r3, #12
 8020f3c:	681b      	ldr	r3, [r3, #0]
 8020f3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8020f42:	d007      	beq.n	8020f54 <main+0x22c>
 8020f44:	f507 53c1 	add.w	r3, r7, #6176	@ 0x1820
 8020f48:	f103 0308 	add.w	r3, r3, #8
 8020f4c:	681b      	ldr	r3, [r3, #0]
 8020f4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8020f52:	d102      	bne.n	8020f5a <main+0x232>
	  return -1;
 8020f54:	f04f 33ff 	mov.w	r3, #4294967295
 8020f58:	e2ac      	b.n	80214b4 <main+0x78c>
  }

  // SUBTRACTION OF DATA POINTS IN C
  float output_differences[101];
  for (int z = 0; z < 101; z++)
 8020f5a:	2300      	movs	r3, #0
 8020f5c:	f507 52c0 	add.w	r2, r7, #6144	@ 0x1800
 8020f60:	f102 0214 	add.w	r2, r2, #20
 8020f64:	6013      	str	r3, [r2, #0]
 8020f66:	e039      	b.n	8020fdc <main+0x2b4>
  {
    output_differences[z] = TEST_ARRAY[z] - test_array_output_C[z];
 8020f68:	f507 53c1 	add.w	r3, r7, #6176	@ 0x1820
 8020f6c:	f103 0310 	add.w	r3, r3, #16
 8020f70:	f5a3 72f2 	sub.w	r2, r3, #484	@ 0x1e4
 8020f74:	f507 53c0 	add.w	r3, r7, #6144	@ 0x1800
 8020f78:	f103 0314 	add.w	r3, r3, #20
 8020f7c:	681b      	ldr	r3, [r3, #0]
 8020f7e:	009b      	lsls	r3, r3, #2
 8020f80:	4413      	add	r3, r2
 8020f82:	ed93 7a00 	vldr	s14, [r3]
 8020f86:	f507 53c1 	add.w	r3, r7, #6176	@ 0x1820
 8020f8a:	f103 0310 	add.w	r3, r3, #16
 8020f8e:	f5a3 725e 	sub.w	r2, r3, #888	@ 0x378
 8020f92:	f507 53c0 	add.w	r3, r7, #6144	@ 0x1800
 8020f96:	f103 0314 	add.w	r3, r3, #20
 8020f9a:	681b      	ldr	r3, [r3, #0]
 8020f9c:	009b      	lsls	r3, r3, #2
 8020f9e:	4413      	add	r3, r2
 8020fa0:	edd3 7a00 	vldr	s15, [r3]
 8020fa4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8020fa8:	f507 53c1 	add.w	r3, r7, #6176	@ 0x1820
 8020fac:	f103 0310 	add.w	r3, r3, #16
 8020fb0:	f6a3 0234 	subw	r2, r3, #2100	@ 0x834
 8020fb4:	f507 53c0 	add.w	r3, r7, #6144	@ 0x1800
 8020fb8:	f103 0314 	add.w	r3, r3, #20
 8020fbc:	681b      	ldr	r3, [r3, #0]
 8020fbe:	009b      	lsls	r3, r3, #2
 8020fc0:	4413      	add	r3, r2
 8020fc2:	edc3 7a00 	vstr	s15, [r3]
  for (int z = 0; z < 101; z++)
 8020fc6:	f507 53c0 	add.w	r3, r7, #6144	@ 0x1800
 8020fca:	f103 0314 	add.w	r3, r3, #20
 8020fce:	681b      	ldr	r3, [r3, #0]
 8020fd0:	3301      	adds	r3, #1
 8020fd2:	f507 52c0 	add.w	r2, r7, #6144	@ 0x1800
 8020fd6:	f102 0214 	add.w	r2, r2, #20
 8020fda:	6013      	str	r3, [r2, #0]
 8020fdc:	f507 53c0 	add.w	r3, r7, #6144	@ 0x1800
 8020fe0:	f103 0314 	add.w	r3, r3, #20
 8020fe4:	681b      	ldr	r3, [r3, #0]
 8020fe6:	2b64      	cmp	r3, #100	@ 0x64
 8020fe8:	ddbe      	ble.n	8020f68 <main+0x240>
  }

  // SUBTRACTION IN CMSIS
  float negated_output[101];
  float output_differences_CMSIS[101];
  arm_negate_f32(test_array_output_cmsis, negated_output, 101);
 8020fea:	f607 6168 	addw	r1, r7, #3688	@ 0xe68
 8020fee:	f507 538c 	add.w	r3, r7, #4480	@ 0x1180
 8020ff2:	f103 0310 	add.w	r3, r3, #16
 8020ff6:	2265      	movs	r2, #101	@ 0x65
 8020ff8:	4618      	mov	r0, r3
 8020ffa:	f002 fa43 	bl	8023484 <arm_negate_f32>
  arm_add_f32(TEST_ARRAY, negated_output, output_differences_CMSIS, 101);
 8020ffe:	f607 42d4 	addw	r2, r7, #3284	@ 0xcd4
 8021002:	f607 6168 	addw	r1, r7, #3688	@ 0xe68
 8021006:	f507 50b2 	add.w	r0, r7, #5696	@ 0x1640
 802100a:	f100 000c 	add.w	r0, r0, #12
 802100e:	2365      	movs	r3, #101	@ 0x65
 8021010:	f002 fad6 	bl	80235c0 <arm_add_f32>

  float sum = 0.0, average, variance = 0.0, stddev;
 8021014:	f04f 0300 	mov.w	r3, #0
 8021018:	f507 52c0 	add.w	r2, r7, #6144	@ 0x1800
 802101c:	f102 0210 	add.w	r2, r2, #16
 8021020:	6013      	str	r3, [r2, #0]
 8021022:	f04f 0300 	mov.w	r3, #0
 8021026:	f507 52c0 	add.w	r2, r7, #6144	@ 0x1800
 802102a:	f102 020c 	add.w	r2, r2, #12
 802102e:	6013      	str	r3, [r2, #0]
  // sum of all differences
  for (int z = 0; z < 101; z++)
 8021030:	2300      	movs	r3, #0
 8021032:	f507 52c0 	add.w	r2, r7, #6144	@ 0x1800
 8021036:	f102 0208 	add.w	r2, r2, #8
 802103a:	6013      	str	r3, [r2, #0]
 802103c:	e032      	b.n	80210a4 <main+0x37c>
 802103e:	bf00      	nop
 8021040:	08024668 	.word	0x08024668
 8021044:	e000007c 	.word	0xe000007c
 8021048:	080247fc 	.word	0x080247fc
 802104c:	08024810 	.word	0x08024810
 8021050:	42ca0000 	.word	0x42ca0000
  {
    sum += output_differences[z];
 8021054:	f507 53c1 	add.w	r3, r7, #6176	@ 0x1820
 8021058:	f103 0310 	add.w	r3, r3, #16
 802105c:	f6a3 0234 	subw	r2, r3, #2100	@ 0x834
 8021060:	f507 53c0 	add.w	r3, r7, #6144	@ 0x1800
 8021064:	f103 0308 	add.w	r3, r3, #8
 8021068:	681b      	ldr	r3, [r3, #0]
 802106a:	009b      	lsls	r3, r3, #2
 802106c:	4413      	add	r3, r2
 802106e:	edd3 7a00 	vldr	s15, [r3]
 8021072:	f507 53c0 	add.w	r3, r7, #6144	@ 0x1800
 8021076:	f103 0310 	add.w	r3, r3, #16
 802107a:	ed93 7a00 	vldr	s14, [r3]
 802107e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8021082:	f507 53c0 	add.w	r3, r7, #6144	@ 0x1800
 8021086:	f103 0310 	add.w	r3, r3, #16
 802108a:	edc3 7a00 	vstr	s15, [r3]
  for (int z = 0; z < 101; z++)
 802108e:	f507 53c0 	add.w	r3, r7, #6144	@ 0x1800
 8021092:	f103 0308 	add.w	r3, r3, #8
 8021096:	681b      	ldr	r3, [r3, #0]
 8021098:	3301      	adds	r3, #1
 802109a:	f507 52c0 	add.w	r2, r7, #6144	@ 0x1800
 802109e:	f102 0208 	add.w	r2, r2, #8
 80210a2:	6013      	str	r3, [r2, #0]
 80210a4:	f507 53c0 	add.w	r3, r7, #6144	@ 0x1800
 80210a8:	f103 0308 	add.w	r3, r3, #8
 80210ac:	681b      	ldr	r3, [r3, #0]
 80210ae:	2b64      	cmp	r3, #100	@ 0x64
 80210b0:	ddd0      	ble.n	8021054 <main+0x32c>
  }
  // AVERAGE
  average = sum / 101;
 80210b2:	f507 53c0 	add.w	r3, r7, #6144	@ 0x1800
 80210b6:	f103 0310 	add.w	r3, r3, #16
 80210ba:	ed93 7a00 	vldr	s14, [r3]
 80210be:	ed5f 6a1c 	vldr	s13, [pc, #-112]	@ 8021050 <main+0x328>
 80210c2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80210c6:	f507 53bf 	add.w	r3, r7, #6112	@ 0x17e0
 80210ca:	f103 0304 	add.w	r3, r3, #4
 80210ce:	edc3 7a00 	vstr	s15, [r3]

  // variance
  for (int z = 0; z < 101; z++)
 80210d2:	2300      	movs	r3, #0
 80210d4:	f507 52c0 	add.w	r2, r7, #6144	@ 0x1800
 80210d8:	f102 0204 	add.w	r2, r2, #4
 80210dc:	6013      	str	r3, [r2, #0]
 80210de:	e048      	b.n	8021172 <main+0x44a>
  {
    variance += pow(output_differences[z] - average, 2); // Sum of squared differences from the mean
 80210e0:	f507 53c1 	add.w	r3, r7, #6176	@ 0x1820
 80210e4:	f103 0310 	add.w	r3, r3, #16
 80210e8:	f6a3 0234 	subw	r2, r3, #2100	@ 0x834
 80210ec:	f507 53c0 	add.w	r3, r7, #6144	@ 0x1800
 80210f0:	f103 0304 	add.w	r3, r3, #4
 80210f4:	681b      	ldr	r3, [r3, #0]
 80210f6:	009b      	lsls	r3, r3, #2
 80210f8:	4413      	add	r3, r2
 80210fa:	ed93 7a00 	vldr	s14, [r3]
 80210fe:	f507 53bf 	add.w	r3, r7, #6112	@ 0x17e0
 8021102:	f103 0304 	add.w	r3, r3, #4
 8021106:	edd3 7a00 	vldr	s15, [r3]
 802110a:	ee77 7a67 	vsub.f32	s15, s14, s15
 802110e:	ee17 0a90 	vmov	r0, s15
 8021112:	f7ff f923 	bl	802035c <__aeabi_f2d>
 8021116:	4602      	mov	r2, r0
 8021118:	460b      	mov	r3, r1
 802111a:	ed9f 1bab 	vldr	d1, [pc, #684]	@ 80213c8 <main+0x6a0>
 802111e:	ec43 2b10 	vmov	d0, r2, r3
 8021122:	f002 fae7 	bl	80236f4 <pow>
 8021126:	ec55 4b10 	vmov	r4, r5, d0
 802112a:	f507 53c0 	add.w	r3, r7, #6144	@ 0x1800
 802112e:	f103 030c 	add.w	r3, r3, #12
 8021132:	6818      	ldr	r0, [r3, #0]
 8021134:	f7ff f912 	bl	802035c <__aeabi_f2d>
 8021138:	4602      	mov	r2, r0
 802113a:	460b      	mov	r3, r1
 802113c:	4620      	mov	r0, r4
 802113e:	4629      	mov	r1, r5
 8021140:	f7fe ffae 	bl	80200a0 <__adddf3>
 8021144:	4602      	mov	r2, r0
 8021146:	460b      	mov	r3, r1
 8021148:	4610      	mov	r0, r2
 802114a:	4619      	mov	r1, r3
 802114c:	f7ff fc0e 	bl	802096c <__aeabi_d2f>
 8021150:	4603      	mov	r3, r0
 8021152:	f507 52c0 	add.w	r2, r7, #6144	@ 0x1800
 8021156:	f102 020c 	add.w	r2, r2, #12
 802115a:	6013      	str	r3, [r2, #0]
  for (int z = 0; z < 101; z++)
 802115c:	f507 53c0 	add.w	r3, r7, #6144	@ 0x1800
 8021160:	f103 0304 	add.w	r3, r3, #4
 8021164:	681b      	ldr	r3, [r3, #0]
 8021166:	3301      	adds	r3, #1
 8021168:	f507 52c0 	add.w	r2, r7, #6144	@ 0x1800
 802116c:	f102 0204 	add.w	r2, r2, #4
 8021170:	6013      	str	r3, [r2, #0]
 8021172:	f507 53c0 	add.w	r3, r7, #6144	@ 0x1800
 8021176:	f103 0304 	add.w	r3, r3, #4
 802117a:	681b      	ldr	r3, [r3, #0]
 802117c:	2b64      	cmp	r3, #100	@ 0x64
 802117e:	ddaf      	ble.n	80210e0 <main+0x3b8>
  }
  variance /= 101; // Divide by number of elements to get the variance
 8021180:	f507 53c0 	add.w	r3, r7, #6144	@ 0x1800
 8021184:	f103 030c 	add.w	r3, r3, #12
 8021188:	ed93 7a00 	vldr	s14, [r3]
 802118c:	eddf 6a90 	vldr	s13, [pc, #576]	@ 80213d0 <main+0x6a8>
 8021190:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8021194:	f507 53c0 	add.w	r3, r7, #6144	@ 0x1800
 8021198:	f103 030c 	add.w	r3, r3, #12
 802119c:	edc3 7a00 	vstr	s15, [r3]

  // STANDARD DEVIATION
  stddev = sqrt(variance);
 80211a0:	f507 53c0 	add.w	r3, r7, #6144	@ 0x1800
 80211a4:	f103 030c 	add.w	r3, r3, #12
 80211a8:	6818      	ldr	r0, [r3, #0]
 80211aa:	f7ff f8d7 	bl	802035c <__aeabi_f2d>
 80211ae:	4602      	mov	r2, r0
 80211b0:	460b      	mov	r3, r1
 80211b2:	ec43 2b10 	vmov	d0, r2, r3
 80211b6:	f002 fb0d 	bl	80237d4 <sqrt>
 80211ba:	ec53 2b10 	vmov	r2, r3, d0
 80211be:	4610      	mov	r0, r2
 80211c0:	4619      	mov	r1, r3
 80211c2:	f7ff fbd3 	bl	802096c <__aeabi_d2f>
 80211c6:	4603      	mov	r3, r0
 80211c8:	f507 52bf 	add.w	r2, r7, #6112	@ 0x17e0
 80211cc:	6013      	str	r3, [r2, #0]

  // AVERAGE IN CMSIS
  float cmsis_average[1];
  arm_mean_f32(output_differences_CMSIS, 101, cmsis_average);
 80211ce:	f507 624d 	add.w	r2, r7, #3280	@ 0xcd0
 80211d2:	f607 43d4 	addw	r3, r7, #3284	@ 0xcd4
 80211d6:	2165      	movs	r1, #101	@ 0x65
 80211d8:	4618      	mov	r0, r3
 80211da:	f001 fbc5 	bl	8022968 <arm_mean_f32>

  // STANDARD DEV IN CMSIS
  float cmsis_stddev[1];
  arm_std_f32(output_differences_CMSIS, 101, cmsis_stddev);
 80211de:	f607 42cc 	addw	r2, r7, #3276	@ 0xccc
 80211e2:	f607 43d4 	addw	r3, r7, #3284	@ 0xcd4
 80211e6:	2165      	movs	r1, #101	@ 0x65
 80211e8:	4618      	mov	r0, r3
 80211ea:	f001 fb33 	bl	8022854 <arm_std_f32>

  // CMSIS CORRELATION
  float corr_CMSIS[2 * 101 - 1];
  arm_correlate_f32(TEST_ARRAY, 101, test_array_output_cmsis, 101, corr_CMSIS);
 80211ee:	f507 528c 	add.w	r2, r7, #4480	@ 0x1180
 80211f2:	f102 0210 	add.w	r2, r2, #16
 80211f6:	f507 50b2 	add.w	r0, r7, #5696	@ 0x1640
 80211fa:	f100 000c 	add.w	r0, r0, #12
 80211fe:	f607 13a8 	addw	r3, r7, #2472	@ 0x9a8
 8021202:	9300      	str	r3, [sp, #0]
 8021204:	2365      	movs	r3, #101	@ 0x65
 8021206:	2165      	movs	r1, #101	@ 0x65
 8021208:	f001 fbec 	bl	80229e4 <arm_correlate_f32>

  // CMSIS CONVOLUTION
  float conv_CMSIS[2 * 101 - 1];
  arm_conv_f32(TEST_ARRAY, 101, test_array_output_cmsis, 101, conv_CMSIS);
 802120c:	f507 528c 	add.w	r2, r7, #4480	@ 0x1180
 8021210:	f102 0210 	add.w	r2, r2, #16
 8021214:	f507 50b2 	add.w	r0, r7, #5696	@ 0x1640
 8021218:	f100 000c 	add.w	r0, r0, #12
 802121c:	f507 63d2 	add.w	r3, r7, #1680	@ 0x690
 8021220:	3b0c      	subs	r3, #12
 8021222:	9300      	str	r3, [sp, #0]
 8021224:	2365      	movs	r3, #101	@ 0x65
 8021226:	2165      	movs	r1, #101	@ 0x65
 8021228:	f001 fe92 	bl	8022f50 <arm_conv_f32>

  // C CONVOLUTION
  float conv_result[2 * 101 - 1];
  for (int z = 0; z < 201; z++)
 802122c:	2300      	movs	r3, #0
 802122e:	f507 52c0 	add.w	r2, r7, #6144	@ 0x1800
 8021232:	6013      	str	r3, [r2, #0]
 8021234:	e012      	b.n	802125c <main+0x534>
  {
    conv_result[z] = 0;
 8021236:	f507 6303 	add.w	r3, r7, #2096	@ 0x830
 802123a:	f5a3 629a 	sub.w	r2, r3, #1232	@ 0x4d0
 802123e:	f507 53c0 	add.w	r3, r7, #6144	@ 0x1800
 8021242:	681b      	ldr	r3, [r3, #0]
 8021244:	009b      	lsls	r3, r3, #2
 8021246:	4413      	add	r3, r2
 8021248:	f04f 0200 	mov.w	r2, #0
 802124c:	601a      	str	r2, [r3, #0]
  for (int z = 0; z < 201; z++)
 802124e:	f507 53c0 	add.w	r3, r7, #6144	@ 0x1800
 8021252:	681b      	ldr	r3, [r3, #0]
 8021254:	3301      	adds	r3, #1
 8021256:	f507 52c0 	add.w	r2, r7, #6144	@ 0x1800
 802125a:	6013      	str	r3, [r2, #0]
 802125c:	f507 53c0 	add.w	r3, r7, #6144	@ 0x1800
 8021260:	681b      	ldr	r3, [r3, #0]
 8021262:	2bc8      	cmp	r3, #200	@ 0xc8
 8021264:	dde7      	ble.n	8021236 <main+0x50e>
  }
  for (int i = 0; i < 101; i++)
 8021266:	2300      	movs	r3, #0
 8021268:	f507 52bf 	add.w	r2, r7, #6112	@ 0x17e0
 802126c:	f102 021c 	add.w	r2, r2, #28
 8021270:	6013      	str	r3, [r2, #0]
 8021272:	e06b      	b.n	802134c <main+0x624>
  {
    for (int z = 0; z < 101; z++)
 8021274:	2300      	movs	r3, #0
 8021276:	f507 52bf 	add.w	r2, r7, #6112	@ 0x17e0
 802127a:	f102 0218 	add.w	r2, r2, #24
 802127e:	6013      	str	r3, [r2, #0]
 8021280:	e052      	b.n	8021328 <main+0x600>
    {
      conv_result[i + z] += TEST_ARRAY[i] * test_array_output_cmsis[z];
 8021282:	f507 53bf 	add.w	r3, r7, #6112	@ 0x17e0
 8021286:	f103 031c 	add.w	r3, r3, #28
 802128a:	681a      	ldr	r2, [r3, #0]
 802128c:	f507 53bf 	add.w	r3, r7, #6112	@ 0x17e0
 8021290:	f103 0318 	add.w	r3, r3, #24
 8021294:	681b      	ldr	r3, [r3, #0]
 8021296:	4413      	add	r3, r2
 8021298:	f507 6203 	add.w	r2, r7, #2096	@ 0x830
 802129c:	f5a2 629a 	sub.w	r2, r2, #1232	@ 0x4d0
 80212a0:	009b      	lsls	r3, r3, #2
 80212a2:	4413      	add	r3, r2
 80212a4:	ed93 7a00 	vldr	s14, [r3]
 80212a8:	f507 53c1 	add.w	r3, r7, #6176	@ 0x1820
 80212ac:	f103 0310 	add.w	r3, r3, #16
 80212b0:	f5a3 72f2 	sub.w	r2, r3, #484	@ 0x1e4
 80212b4:	f507 53bf 	add.w	r3, r7, #6112	@ 0x17e0
 80212b8:	f103 031c 	add.w	r3, r3, #28
 80212bc:	681b      	ldr	r3, [r3, #0]
 80212be:	009b      	lsls	r3, r3, #2
 80212c0:	4413      	add	r3, r2
 80212c2:	edd3 6a00 	vldr	s13, [r3]
 80212c6:	f507 53c1 	add.w	r3, r7, #6176	@ 0x1820
 80212ca:	f103 0310 	add.w	r3, r3, #16
 80212ce:	f5a3 62d4 	sub.w	r2, r3, #1696	@ 0x6a0
 80212d2:	f507 53bf 	add.w	r3, r7, #6112	@ 0x17e0
 80212d6:	f103 0318 	add.w	r3, r3, #24
 80212da:	681b      	ldr	r3, [r3, #0]
 80212dc:	009b      	lsls	r3, r3, #2
 80212de:	4413      	add	r3, r2
 80212e0:	edd3 7a00 	vldr	s15, [r3]
 80212e4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80212e8:	f507 53bf 	add.w	r3, r7, #6112	@ 0x17e0
 80212ec:	f103 031c 	add.w	r3, r3, #28
 80212f0:	681a      	ldr	r2, [r3, #0]
 80212f2:	f507 53bf 	add.w	r3, r7, #6112	@ 0x17e0
 80212f6:	f103 0318 	add.w	r3, r3, #24
 80212fa:	681b      	ldr	r3, [r3, #0]
 80212fc:	4413      	add	r3, r2
 80212fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8021302:	f507 6203 	add.w	r2, r7, #2096	@ 0x830
 8021306:	f5a2 629a 	sub.w	r2, r2, #1232	@ 0x4d0
 802130a:	009b      	lsls	r3, r3, #2
 802130c:	4413      	add	r3, r2
 802130e:	edc3 7a00 	vstr	s15, [r3]
    for (int z = 0; z < 101; z++)
 8021312:	f507 53bf 	add.w	r3, r7, #6112	@ 0x17e0
 8021316:	f103 0318 	add.w	r3, r3, #24
 802131a:	681b      	ldr	r3, [r3, #0]
 802131c:	3301      	adds	r3, #1
 802131e:	f507 52bf 	add.w	r2, r7, #6112	@ 0x17e0
 8021322:	f102 0218 	add.w	r2, r2, #24
 8021326:	6013      	str	r3, [r2, #0]
 8021328:	f507 53bf 	add.w	r3, r7, #6112	@ 0x17e0
 802132c:	f103 0318 	add.w	r3, r3, #24
 8021330:	681b      	ldr	r3, [r3, #0]
 8021332:	2b64      	cmp	r3, #100	@ 0x64
 8021334:	dda5      	ble.n	8021282 <main+0x55a>
  for (int i = 0; i < 101; i++)
 8021336:	f507 53bf 	add.w	r3, r7, #6112	@ 0x17e0
 802133a:	f103 031c 	add.w	r3, r3, #28
 802133e:	681b      	ldr	r3, [r3, #0]
 8021340:	3301      	adds	r3, #1
 8021342:	f507 52bf 	add.w	r2, r7, #6112	@ 0x17e0
 8021346:	f102 021c 	add.w	r2, r2, #28
 802134a:	6013      	str	r3, [r2, #0]
 802134c:	f507 53bf 	add.w	r3, r7, #6112	@ 0x17e0
 8021350:	f103 031c 	add.w	r3, r3, #28
 8021354:	681b      	ldr	r3, [r3, #0]
 8021356:	2b64      	cmp	r3, #100	@ 0x64
 8021358:	dd8c      	ble.n	8021274 <main+0x54c>
    }
  }

  // C CORRELATION
  float corr_result[2 * 101 - 1];
  for (int z = 0; z < 201; z++)
 802135a:	2300      	movs	r3, #0
 802135c:	f507 52bf 	add.w	r2, r7, #6112	@ 0x17e0
 8021360:	f102 0214 	add.w	r2, r2, #20
 8021364:	6013      	str	r3, [r2, #0]
 8021366:	e018      	b.n	802139a <main+0x672>
  {
    corr_result[z] = 0;
 8021368:	f507 6303 	add.w	r3, r7, #2096	@ 0x830
 802136c:	f2a3 72f4 	subw	r2, r3, #2036	@ 0x7f4
 8021370:	f507 53bf 	add.w	r3, r7, #6112	@ 0x17e0
 8021374:	f103 0314 	add.w	r3, r3, #20
 8021378:	681b      	ldr	r3, [r3, #0]
 802137a:	009b      	lsls	r3, r3, #2
 802137c:	4413      	add	r3, r2
 802137e:	f04f 0200 	mov.w	r2, #0
 8021382:	601a      	str	r2, [r3, #0]
  for (int z = 0; z < 201; z++)
 8021384:	f507 53bf 	add.w	r3, r7, #6112	@ 0x17e0
 8021388:	f103 0314 	add.w	r3, r3, #20
 802138c:	681b      	ldr	r3, [r3, #0]
 802138e:	3301      	adds	r3, #1
 8021390:	f507 52bf 	add.w	r2, r7, #6112	@ 0x17e0
 8021394:	f102 0214 	add.w	r2, r2, #20
 8021398:	6013      	str	r3, [r2, #0]
 802139a:	f507 53bf 	add.w	r3, r7, #6112	@ 0x17e0
 802139e:	f103 0314 	add.w	r3, r3, #20
 80213a2:	681b      	ldr	r3, [r3, #0]
 80213a4:	2bc8      	cmp	r3, #200	@ 0xc8
 80213a6:	dddf      	ble.n	8021368 <main+0x640>
  }
  for (int i = 0; i < 101; i++)
 80213a8:	2300      	movs	r3, #0
 80213aa:	f507 52bf 	add.w	r2, r7, #6112	@ 0x17e0
 80213ae:	f102 0210 	add.w	r2, r2, #16
 80213b2:	6013      	str	r3, [r2, #0]
 80213b4:	e075      	b.n	80214a2 <main+0x77a>
  {
    for (int z = 0; z < 101; z++)
 80213b6:	2300      	movs	r3, #0
 80213b8:	f507 52bf 	add.w	r2, r7, #6112	@ 0x17e0
 80213bc:	f102 020c 	add.w	r2, r2, #12
 80213c0:	6013      	str	r3, [r2, #0]
 80213c2:	e05c      	b.n	802147e <main+0x756>
 80213c4:	f3af 8000 	nop.w
 80213c8:	00000000 	.word	0x00000000
 80213cc:	40000000 	.word	0x40000000
 80213d0:	42ca0000 	.word	0x42ca0000
    {
      corr_result[i + z] += TEST_ARRAY[i] * test_array_output_cmsis[101 - 1 - z];
 80213d4:	f507 53bf 	add.w	r3, r7, #6112	@ 0x17e0
 80213d8:	f103 0310 	add.w	r3, r3, #16
 80213dc:	681a      	ldr	r2, [r3, #0]
 80213de:	f507 53bf 	add.w	r3, r7, #6112	@ 0x17e0
 80213e2:	f103 030c 	add.w	r3, r3, #12
 80213e6:	681b      	ldr	r3, [r3, #0]
 80213e8:	4413      	add	r3, r2
 80213ea:	f507 6203 	add.w	r2, r7, #2096	@ 0x830
 80213ee:	f2a2 72f4 	subw	r2, r2, #2036	@ 0x7f4
 80213f2:	009b      	lsls	r3, r3, #2
 80213f4:	4413      	add	r3, r2
 80213f6:	ed93 7a00 	vldr	s14, [r3]
 80213fa:	f507 53c1 	add.w	r3, r7, #6176	@ 0x1820
 80213fe:	f103 0310 	add.w	r3, r3, #16
 8021402:	f5a3 72f2 	sub.w	r2, r3, #484	@ 0x1e4
 8021406:	f507 53bf 	add.w	r3, r7, #6112	@ 0x17e0
 802140a:	f103 0310 	add.w	r3, r3, #16
 802140e:	681b      	ldr	r3, [r3, #0]
 8021410:	009b      	lsls	r3, r3, #2
 8021412:	4413      	add	r3, r2
 8021414:	edd3 6a00 	vldr	s13, [r3]
 8021418:	f507 53bf 	add.w	r3, r7, #6112	@ 0x17e0
 802141c:	f103 030c 	add.w	r3, r3, #12
 8021420:	681b      	ldr	r3, [r3, #0]
 8021422:	f1c3 0364 	rsb	r3, r3, #100	@ 0x64
 8021426:	f507 52c1 	add.w	r2, r7, #6176	@ 0x1820
 802142a:	f102 0210 	add.w	r2, r2, #16
 802142e:	f5a2 62d4 	sub.w	r2, r2, #1696	@ 0x6a0
 8021432:	009b      	lsls	r3, r3, #2
 8021434:	4413      	add	r3, r2
 8021436:	edd3 7a00 	vldr	s15, [r3]
 802143a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 802143e:	f507 53bf 	add.w	r3, r7, #6112	@ 0x17e0
 8021442:	f103 0310 	add.w	r3, r3, #16
 8021446:	681a      	ldr	r2, [r3, #0]
 8021448:	f507 53bf 	add.w	r3, r7, #6112	@ 0x17e0
 802144c:	f103 030c 	add.w	r3, r3, #12
 8021450:	681b      	ldr	r3, [r3, #0]
 8021452:	4413      	add	r3, r2
 8021454:	ee77 7a27 	vadd.f32	s15, s14, s15
 8021458:	f507 6203 	add.w	r2, r7, #2096	@ 0x830
 802145c:	f2a2 72f4 	subw	r2, r2, #2036	@ 0x7f4
 8021460:	009b      	lsls	r3, r3, #2
 8021462:	4413      	add	r3, r2
 8021464:	edc3 7a00 	vstr	s15, [r3]
    for (int z = 0; z < 101; z++)
 8021468:	f507 53bf 	add.w	r3, r7, #6112	@ 0x17e0
 802146c:	f103 030c 	add.w	r3, r3, #12
 8021470:	681b      	ldr	r3, [r3, #0]
 8021472:	3301      	adds	r3, #1
 8021474:	f507 52bf 	add.w	r2, r7, #6112	@ 0x17e0
 8021478:	f102 020c 	add.w	r2, r2, #12
 802147c:	6013      	str	r3, [r2, #0]
 802147e:	f507 53bf 	add.w	r3, r7, #6112	@ 0x17e0
 8021482:	f103 030c 	add.w	r3, r3, #12
 8021486:	681b      	ldr	r3, [r3, #0]
 8021488:	2b64      	cmp	r3, #100	@ 0x64
 802148a:	dda3      	ble.n	80213d4 <main+0x6ac>
  for (int i = 0; i < 101; i++)
 802148c:	f507 53bf 	add.w	r3, r7, #6112	@ 0x17e0
 8021490:	f103 0310 	add.w	r3, r3, #16
 8021494:	681b      	ldr	r3, [r3, #0]
 8021496:	3301      	adds	r3, #1
 8021498:	f507 52bf 	add.w	r2, r7, #6112	@ 0x17e0
 802149c:	f102 0210 	add.w	r2, r2, #16
 80214a0:	6013      	str	r3, [r2, #0]
 80214a2:	f507 53bf 	add.w	r3, r7, #6112	@ 0x17e0
 80214a6:	f103 0310 	add.w	r3, r3, #16
 80214aa:	681b      	ldr	r3, [r3, #0]
 80214ac:	2b64      	cmp	r3, #100	@ 0x64
 80214ae:	dd82      	ble.n	80213b6 <main+0x68e>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 80214b0:	bf00      	nop
 80214b2:	e7fd      	b.n	80214b0 <main+0x788>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}
 80214b4:	4618      	mov	r0, r3
 80214b6:	f507 57c1 	add.w	r7, r7, #6176	@ 0x1820
 80214ba:	3710      	adds	r7, #16
 80214bc:	46bd      	mov	sp, r7
 80214be:	bdb0      	pop	{r4, r5, r7, pc}

080214c0 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80214c0:	b580      	push	{r7, lr}
 80214c2:	b096      	sub	sp, #88	@ 0x58
 80214c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80214c6:	f107 0314 	add.w	r3, r7, #20
 80214ca:	2244      	movs	r2, #68	@ 0x44
 80214cc:	2100      	movs	r1, #0
 80214ce:	4618      	mov	r0, r3
 80214d0:	f002 f8d0 	bl	8023674 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80214d4:	463b      	mov	r3, r7
 80214d6:	2200      	movs	r2, #0
 80214d8:	601a      	str	r2, [r3, #0]
 80214da:	605a      	str	r2, [r3, #4]
 80214dc:	609a      	str	r2, [r3, #8]
 80214de:	60da      	str	r2, [r3, #12]
 80214e0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
   */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 80214e2:	2000      	movs	r0, #0
 80214e4:	f000 fa72 	bl	80219cc <HAL_PWREx_ControlVoltageScaling>
 80214e8:	4603      	mov	r3, r0
 80214ea:	2b00      	cmp	r3, #0
 80214ec:	d001      	beq.n	80214f2 <SystemClock_Config+0x32>
  {
    Error_Handler();
 80214ee:	f000 f85d 	bl	80215ac <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80214f2:	2310      	movs	r3, #16
 80214f4:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80214f6:	2301      	movs	r3, #1
 80214f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80214fa:	2300      	movs	r3, #0
 80214fc:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80214fe:	2360      	movs	r3, #96	@ 0x60
 8021500:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8021502:	2302      	movs	r3, #2
 8021504:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8021506:	2301      	movs	r3, #1
 8021508:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 802150a:	2301      	movs	r3, #1
 802150c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 60;
 802150e:	233c      	movs	r3, #60	@ 0x3c
 8021510:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8021512:	2302      	movs	r3, #2
 8021514:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8021516:	2302      	movs	r3, #2
 8021518:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 802151a:	2302      	movs	r3, #2
 802151c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 802151e:	f107 0314 	add.w	r3, r7, #20
 8021522:	4618      	mov	r0, r3
 8021524:	f000 faf6 	bl	8021b14 <HAL_RCC_OscConfig>
 8021528:	4603      	mov	r3, r0
 802152a:	2b00      	cmp	r3, #0
 802152c:	d001      	beq.n	8021532 <SystemClock_Config+0x72>
  {
    Error_Handler();
 802152e:	f000 f83d 	bl	80215ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8021532:	230f      	movs	r3, #15
 8021534:	603b      	str	r3, [r7, #0]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8021536:	2303      	movs	r3, #3
 8021538:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 802153a:	2300      	movs	r3, #0
 802153c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 802153e:	2300      	movs	r3, #0
 8021540:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8021542:	2300      	movs	r3, #0
 8021544:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8021546:	463b      	mov	r3, r7
 8021548:	2105      	movs	r1, #5
 802154a:	4618      	mov	r0, r3
 802154c:	f000 fefc 	bl	8022348 <HAL_RCC_ClockConfig>
 8021550:	4603      	mov	r3, r0
 8021552:	2b00      	cmp	r3, #0
 8021554:	d001      	beq.n	802155a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8021556:	f000 f829 	bl	80215ac <Error_Handler>
  }
}
 802155a:	bf00      	nop
 802155c:	3758      	adds	r7, #88	@ 0x58
 802155e:	46bd      	mov	sp, r7
 8021560:	bd80      	pop	{r7, pc}
	...

08021564 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8021564:	b480      	push	{r7}
 8021566:	b083      	sub	sp, #12
 8021568:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 802156a:	4b0f      	ldr	r3, [pc, #60]	@ (80215a8 <MX_GPIO_Init+0x44>)
 802156c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 802156e:	4a0e      	ldr	r2, [pc, #56]	@ (80215a8 <MX_GPIO_Init+0x44>)
 8021570:	f043 0301 	orr.w	r3, r3, #1
 8021574:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8021576:	4b0c      	ldr	r3, [pc, #48]	@ (80215a8 <MX_GPIO_Init+0x44>)
 8021578:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 802157a:	f003 0301 	and.w	r3, r3, #1
 802157e:	607b      	str	r3, [r7, #4]
 8021580:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8021582:	4b09      	ldr	r3, [pc, #36]	@ (80215a8 <MX_GPIO_Init+0x44>)
 8021584:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8021586:	4a08      	ldr	r2, [pc, #32]	@ (80215a8 <MX_GPIO_Init+0x44>)
 8021588:	f043 0302 	orr.w	r3, r3, #2
 802158c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 802158e:	4b06      	ldr	r3, [pc, #24]	@ (80215a8 <MX_GPIO_Init+0x44>)
 8021590:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8021592:	f003 0302 	and.w	r3, r3, #2
 8021596:	603b      	str	r3, [r7, #0]
 8021598:	683b      	ldr	r3, [r7, #0]

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 802159a:	bf00      	nop
 802159c:	370c      	adds	r7, #12
 802159e:	46bd      	mov	sp, r7
 80215a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80215a4:	4770      	bx	lr
 80215a6:	bf00      	nop
 80215a8:	40021000 	.word	0x40021000

080215ac <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80215ac:	b480      	push	{r7}
 80215ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80215b0:	b672      	cpsid	i
}
 80215b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80215b4:	bf00      	nop
 80215b6:	e7fd      	b.n	80215b4 <Error_Handler+0x8>

080215b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80215b8:	b480      	push	{r7}
 80215ba:	b083      	sub	sp, #12
 80215bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80215be:	4b0f      	ldr	r3, [pc, #60]	@ (80215fc <HAL_MspInit+0x44>)
 80215c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80215c2:	4a0e      	ldr	r2, [pc, #56]	@ (80215fc <HAL_MspInit+0x44>)
 80215c4:	f043 0301 	orr.w	r3, r3, #1
 80215c8:	6613      	str	r3, [r2, #96]	@ 0x60
 80215ca:	4b0c      	ldr	r3, [pc, #48]	@ (80215fc <HAL_MspInit+0x44>)
 80215cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80215ce:	f003 0301 	and.w	r3, r3, #1
 80215d2:	607b      	str	r3, [r7, #4]
 80215d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80215d6:	4b09      	ldr	r3, [pc, #36]	@ (80215fc <HAL_MspInit+0x44>)
 80215d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80215da:	4a08      	ldr	r2, [pc, #32]	@ (80215fc <HAL_MspInit+0x44>)
 80215dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80215e0:	6593      	str	r3, [r2, #88]	@ 0x58
 80215e2:	4b06      	ldr	r3, [pc, #24]	@ (80215fc <HAL_MspInit+0x44>)
 80215e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80215e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80215ea:	603b      	str	r3, [r7, #0]
 80215ec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80215ee:	bf00      	nop
 80215f0:	370c      	adds	r7, #12
 80215f2:	46bd      	mov	sp, r7
 80215f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80215f8:	4770      	bx	lr
 80215fa:	bf00      	nop
 80215fc:	40021000 	.word	0x40021000

08021600 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8021600:	b480      	push	{r7}
 8021602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8021604:	bf00      	nop
 8021606:	e7fd      	b.n	8021604 <NMI_Handler+0x4>

08021608 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8021608:	b480      	push	{r7}
 802160a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 802160c:	bf00      	nop
 802160e:	e7fd      	b.n	802160c <HardFault_Handler+0x4>

08021610 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8021610:	b480      	push	{r7}
 8021612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8021614:	bf00      	nop
 8021616:	e7fd      	b.n	8021614 <MemManage_Handler+0x4>

08021618 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8021618:	b480      	push	{r7}
 802161a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 802161c:	bf00      	nop
 802161e:	e7fd      	b.n	802161c <BusFault_Handler+0x4>

08021620 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8021620:	b480      	push	{r7}
 8021622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8021624:	bf00      	nop
 8021626:	e7fd      	b.n	8021624 <UsageFault_Handler+0x4>

08021628 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8021628:	b480      	push	{r7}
 802162a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 802162c:	bf00      	nop
 802162e:	46bd      	mov	sp, r7
 8021630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021634:	4770      	bx	lr

08021636 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8021636:	b480      	push	{r7}
 8021638:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 802163a:	bf00      	nop
 802163c:	46bd      	mov	sp, r7
 802163e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021642:	4770      	bx	lr

08021644 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8021644:	b480      	push	{r7}
 8021646:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8021648:	bf00      	nop
 802164a:	46bd      	mov	sp, r7
 802164c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021650:	4770      	bx	lr

08021652 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8021652:	b580      	push	{r7, lr}
 8021654:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8021656:	f000 f893 	bl	8021780 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 802165a:	bf00      	nop
 802165c:	bd80      	pop	{r7, pc}
	...

08021660 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8021660:	b480      	push	{r7}
 8021662:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8021664:	4b06      	ldr	r3, [pc, #24]	@ (8021680 <SystemInit+0x20>)
 8021666:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 802166a:	4a05      	ldr	r2, [pc, #20]	@ (8021680 <SystemInit+0x20>)
 802166c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8021670:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8021674:	bf00      	nop
 8021676:	46bd      	mov	sp, r7
 8021678:	f85d 7b04 	ldr.w	r7, [sp], #4
 802167c:	4770      	bx	lr
 802167e:	bf00      	nop
 8021680:	e000ed00 	.word	0xe000ed00

08021684 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8021684:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80216bc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8021688:	f7ff ffea 	bl	8021660 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 802168c:	480c      	ldr	r0, [pc, #48]	@ (80216c0 <LoopForever+0x6>)
  ldr r1, =_edata
 802168e:	490d      	ldr	r1, [pc, #52]	@ (80216c4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8021690:	4a0d      	ldr	r2, [pc, #52]	@ (80216c8 <LoopForever+0xe>)
  movs r3, #0
 8021692:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8021694:	e002      	b.n	802169c <LoopCopyDataInit>

08021696 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8021696:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8021698:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 802169a:	3304      	adds	r3, #4

0802169c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 802169c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 802169e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80216a0:	d3f9      	bcc.n	8021696 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80216a2:	4a0a      	ldr	r2, [pc, #40]	@ (80216cc <LoopForever+0x12>)
  ldr r4, =_ebss
 80216a4:	4c0a      	ldr	r4, [pc, #40]	@ (80216d0 <LoopForever+0x16>)
  movs r3, #0
 80216a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80216a8:	e001      	b.n	80216ae <LoopFillZerobss>

080216aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80216aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80216ac:	3204      	adds	r2, #4

080216ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80216ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80216b0:	d3fb      	bcc.n	80216aa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80216b2:	f001 ffed 	bl	8023690 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80216b6:	f7ff fb37 	bl	8020d28 <main>

080216ba <LoopForever>:

LoopForever:
    b LoopForever
 80216ba:	e7fe      	b.n	80216ba <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80216bc:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 80216c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80216c4:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80216c8:	080248a0 	.word	0x080248a0
  ldr r2, =_sbss
 80216cc:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80216d0:	200001c8 	.word	0x200001c8

080216d4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80216d4:	e7fe      	b.n	80216d4 <ADC1_IRQHandler>

080216d6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80216d6:	b580      	push	{r7, lr}
 80216d8:	b082      	sub	sp, #8
 80216da:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80216dc:	2300      	movs	r3, #0
 80216de:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80216e0:	2003      	movs	r0, #3
 80216e2:	f000 f91f 	bl	8021924 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80216e6:	2000      	movs	r0, #0
 80216e8:	f000 f80e 	bl	8021708 <HAL_InitTick>
 80216ec:	4603      	mov	r3, r0
 80216ee:	2b00      	cmp	r3, #0
 80216f0:	d002      	beq.n	80216f8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80216f2:	2301      	movs	r3, #1
 80216f4:	71fb      	strb	r3, [r7, #7]
 80216f6:	e001      	b.n	80216fc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80216f8:	f7ff ff5e 	bl	80215b8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80216fc:	79fb      	ldrb	r3, [r7, #7]
}
 80216fe:	4618      	mov	r0, r3
 8021700:	3708      	adds	r7, #8
 8021702:	46bd      	mov	sp, r7
 8021704:	bd80      	pop	{r7, pc}
	...

08021708 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8021708:	b580      	push	{r7, lr}
 802170a:	b084      	sub	sp, #16
 802170c:	af00      	add	r7, sp, #0
 802170e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8021710:	2300      	movs	r3, #0
 8021712:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8021714:	4b17      	ldr	r3, [pc, #92]	@ (8021774 <HAL_InitTick+0x6c>)
 8021716:	781b      	ldrb	r3, [r3, #0]
 8021718:	2b00      	cmp	r3, #0
 802171a:	d023      	beq.n	8021764 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 802171c:	4b16      	ldr	r3, [pc, #88]	@ (8021778 <HAL_InitTick+0x70>)
 802171e:	681a      	ldr	r2, [r3, #0]
 8021720:	4b14      	ldr	r3, [pc, #80]	@ (8021774 <HAL_InitTick+0x6c>)
 8021722:	781b      	ldrb	r3, [r3, #0]
 8021724:	4619      	mov	r1, r3
 8021726:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 802172a:	fbb3 f3f1 	udiv	r3, r3, r1
 802172e:	fbb2 f3f3 	udiv	r3, r2, r3
 8021732:	4618      	mov	r0, r3
 8021734:	f000 f91d 	bl	8021972 <HAL_SYSTICK_Config>
 8021738:	4603      	mov	r3, r0
 802173a:	2b00      	cmp	r3, #0
 802173c:	d10f      	bne.n	802175e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 802173e:	687b      	ldr	r3, [r7, #4]
 8021740:	2b0f      	cmp	r3, #15
 8021742:	d809      	bhi.n	8021758 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8021744:	2200      	movs	r2, #0
 8021746:	6879      	ldr	r1, [r7, #4]
 8021748:	f04f 30ff 	mov.w	r0, #4294967295
 802174c:	f000 f8f5 	bl	802193a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8021750:	4a0a      	ldr	r2, [pc, #40]	@ (802177c <HAL_InitTick+0x74>)
 8021752:	687b      	ldr	r3, [r7, #4]
 8021754:	6013      	str	r3, [r2, #0]
 8021756:	e007      	b.n	8021768 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8021758:	2301      	movs	r3, #1
 802175a:	73fb      	strb	r3, [r7, #15]
 802175c:	e004      	b.n	8021768 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 802175e:	2301      	movs	r3, #1
 8021760:	73fb      	strb	r3, [r7, #15]
 8021762:	e001      	b.n	8021768 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8021764:	2301      	movs	r3, #1
 8021766:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8021768:	7bfb      	ldrb	r3, [r7, #15]
}
 802176a:	4618      	mov	r0, r3
 802176c:	3710      	adds	r7, #16
 802176e:	46bd      	mov	sp, r7
 8021770:	bd80      	pop	{r7, pc}
 8021772:	bf00      	nop
 8021774:	20000008 	.word	0x20000008
 8021778:	20000000 	.word	0x20000000
 802177c:	20000004 	.word	0x20000004

08021780 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8021780:	b480      	push	{r7}
 8021782:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8021784:	4b06      	ldr	r3, [pc, #24]	@ (80217a0 <HAL_IncTick+0x20>)
 8021786:	781b      	ldrb	r3, [r3, #0]
 8021788:	461a      	mov	r2, r3
 802178a:	4b06      	ldr	r3, [pc, #24]	@ (80217a4 <HAL_IncTick+0x24>)
 802178c:	681b      	ldr	r3, [r3, #0]
 802178e:	4413      	add	r3, r2
 8021790:	4a04      	ldr	r2, [pc, #16]	@ (80217a4 <HAL_IncTick+0x24>)
 8021792:	6013      	str	r3, [r2, #0]
}
 8021794:	bf00      	nop
 8021796:	46bd      	mov	sp, r7
 8021798:	f85d 7b04 	ldr.w	r7, [sp], #4
 802179c:	4770      	bx	lr
 802179e:	bf00      	nop
 80217a0:	20000008 	.word	0x20000008
 80217a4:	2000008c 	.word	0x2000008c

080217a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80217a8:	b480      	push	{r7}
 80217aa:	af00      	add	r7, sp, #0
  return uwTick;
 80217ac:	4b03      	ldr	r3, [pc, #12]	@ (80217bc <HAL_GetTick+0x14>)
 80217ae:	681b      	ldr	r3, [r3, #0]
}
 80217b0:	4618      	mov	r0, r3
 80217b2:	46bd      	mov	sp, r7
 80217b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80217b8:	4770      	bx	lr
 80217ba:	bf00      	nop
 80217bc:	2000008c 	.word	0x2000008c

080217c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80217c0:	b480      	push	{r7}
 80217c2:	b085      	sub	sp, #20
 80217c4:	af00      	add	r7, sp, #0
 80217c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80217c8:	687b      	ldr	r3, [r7, #4]
 80217ca:	f003 0307 	and.w	r3, r3, #7
 80217ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80217d0:	4b0c      	ldr	r3, [pc, #48]	@ (8021804 <__NVIC_SetPriorityGrouping+0x44>)
 80217d2:	68db      	ldr	r3, [r3, #12]
 80217d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80217d6:	68ba      	ldr	r2, [r7, #8]
 80217d8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80217dc:	4013      	ands	r3, r2
 80217de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80217e0:	68fb      	ldr	r3, [r7, #12]
 80217e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80217e4:	68bb      	ldr	r3, [r7, #8]
 80217e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80217e8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80217ec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80217f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80217f2:	4a04      	ldr	r2, [pc, #16]	@ (8021804 <__NVIC_SetPriorityGrouping+0x44>)
 80217f4:	68bb      	ldr	r3, [r7, #8]
 80217f6:	60d3      	str	r3, [r2, #12]
}
 80217f8:	bf00      	nop
 80217fa:	3714      	adds	r7, #20
 80217fc:	46bd      	mov	sp, r7
 80217fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021802:	4770      	bx	lr
 8021804:	e000ed00 	.word	0xe000ed00

08021808 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8021808:	b480      	push	{r7}
 802180a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 802180c:	4b04      	ldr	r3, [pc, #16]	@ (8021820 <__NVIC_GetPriorityGrouping+0x18>)
 802180e:	68db      	ldr	r3, [r3, #12]
 8021810:	0a1b      	lsrs	r3, r3, #8
 8021812:	f003 0307 	and.w	r3, r3, #7
}
 8021816:	4618      	mov	r0, r3
 8021818:	46bd      	mov	sp, r7
 802181a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802181e:	4770      	bx	lr
 8021820:	e000ed00 	.word	0xe000ed00

08021824 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8021824:	b480      	push	{r7}
 8021826:	b083      	sub	sp, #12
 8021828:	af00      	add	r7, sp, #0
 802182a:	4603      	mov	r3, r0
 802182c:	6039      	str	r1, [r7, #0]
 802182e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8021830:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8021834:	2b00      	cmp	r3, #0
 8021836:	db0a      	blt.n	802184e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8021838:	683b      	ldr	r3, [r7, #0]
 802183a:	b2da      	uxtb	r2, r3
 802183c:	490c      	ldr	r1, [pc, #48]	@ (8021870 <__NVIC_SetPriority+0x4c>)
 802183e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8021842:	0112      	lsls	r2, r2, #4
 8021844:	b2d2      	uxtb	r2, r2
 8021846:	440b      	add	r3, r1
 8021848:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 802184c:	e00a      	b.n	8021864 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 802184e:	683b      	ldr	r3, [r7, #0]
 8021850:	b2da      	uxtb	r2, r3
 8021852:	4908      	ldr	r1, [pc, #32]	@ (8021874 <__NVIC_SetPriority+0x50>)
 8021854:	79fb      	ldrb	r3, [r7, #7]
 8021856:	f003 030f 	and.w	r3, r3, #15
 802185a:	3b04      	subs	r3, #4
 802185c:	0112      	lsls	r2, r2, #4
 802185e:	b2d2      	uxtb	r2, r2
 8021860:	440b      	add	r3, r1
 8021862:	761a      	strb	r2, [r3, #24]
}
 8021864:	bf00      	nop
 8021866:	370c      	adds	r7, #12
 8021868:	46bd      	mov	sp, r7
 802186a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802186e:	4770      	bx	lr
 8021870:	e000e100 	.word	0xe000e100
 8021874:	e000ed00 	.word	0xe000ed00

08021878 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8021878:	b480      	push	{r7}
 802187a:	b089      	sub	sp, #36	@ 0x24
 802187c:	af00      	add	r7, sp, #0
 802187e:	60f8      	str	r0, [r7, #12]
 8021880:	60b9      	str	r1, [r7, #8]
 8021882:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8021884:	68fb      	ldr	r3, [r7, #12]
 8021886:	f003 0307 	and.w	r3, r3, #7
 802188a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 802188c:	69fb      	ldr	r3, [r7, #28]
 802188e:	f1c3 0307 	rsb	r3, r3, #7
 8021892:	2b04      	cmp	r3, #4
 8021894:	bf28      	it	cs
 8021896:	2304      	movcs	r3, #4
 8021898:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 802189a:	69fb      	ldr	r3, [r7, #28]
 802189c:	3304      	adds	r3, #4
 802189e:	2b06      	cmp	r3, #6
 80218a0:	d902      	bls.n	80218a8 <NVIC_EncodePriority+0x30>
 80218a2:	69fb      	ldr	r3, [r7, #28]
 80218a4:	3b03      	subs	r3, #3
 80218a6:	e000      	b.n	80218aa <NVIC_EncodePriority+0x32>
 80218a8:	2300      	movs	r3, #0
 80218aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80218ac:	f04f 32ff 	mov.w	r2, #4294967295
 80218b0:	69bb      	ldr	r3, [r7, #24]
 80218b2:	fa02 f303 	lsl.w	r3, r2, r3
 80218b6:	43da      	mvns	r2, r3
 80218b8:	68bb      	ldr	r3, [r7, #8]
 80218ba:	401a      	ands	r2, r3
 80218bc:	697b      	ldr	r3, [r7, #20]
 80218be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80218c0:	f04f 31ff 	mov.w	r1, #4294967295
 80218c4:	697b      	ldr	r3, [r7, #20]
 80218c6:	fa01 f303 	lsl.w	r3, r1, r3
 80218ca:	43d9      	mvns	r1, r3
 80218cc:	687b      	ldr	r3, [r7, #4]
 80218ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80218d0:	4313      	orrs	r3, r2
         );
}
 80218d2:	4618      	mov	r0, r3
 80218d4:	3724      	adds	r7, #36	@ 0x24
 80218d6:	46bd      	mov	sp, r7
 80218d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80218dc:	4770      	bx	lr
	...

080218e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80218e0:	b580      	push	{r7, lr}
 80218e2:	b082      	sub	sp, #8
 80218e4:	af00      	add	r7, sp, #0
 80218e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80218e8:	687b      	ldr	r3, [r7, #4]
 80218ea:	3b01      	subs	r3, #1
 80218ec:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80218f0:	d301      	bcc.n	80218f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80218f2:	2301      	movs	r3, #1
 80218f4:	e00f      	b.n	8021916 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80218f6:	4a0a      	ldr	r2, [pc, #40]	@ (8021920 <SysTick_Config+0x40>)
 80218f8:	687b      	ldr	r3, [r7, #4]
 80218fa:	3b01      	subs	r3, #1
 80218fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80218fe:	210f      	movs	r1, #15
 8021900:	f04f 30ff 	mov.w	r0, #4294967295
 8021904:	f7ff ff8e 	bl	8021824 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8021908:	4b05      	ldr	r3, [pc, #20]	@ (8021920 <SysTick_Config+0x40>)
 802190a:	2200      	movs	r2, #0
 802190c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 802190e:	4b04      	ldr	r3, [pc, #16]	@ (8021920 <SysTick_Config+0x40>)
 8021910:	2207      	movs	r2, #7
 8021912:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8021914:	2300      	movs	r3, #0
}
 8021916:	4618      	mov	r0, r3
 8021918:	3708      	adds	r7, #8
 802191a:	46bd      	mov	sp, r7
 802191c:	bd80      	pop	{r7, pc}
 802191e:	bf00      	nop
 8021920:	e000e010 	.word	0xe000e010

08021924 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8021924:	b580      	push	{r7, lr}
 8021926:	b082      	sub	sp, #8
 8021928:	af00      	add	r7, sp, #0
 802192a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 802192c:	6878      	ldr	r0, [r7, #4]
 802192e:	f7ff ff47 	bl	80217c0 <__NVIC_SetPriorityGrouping>
}
 8021932:	bf00      	nop
 8021934:	3708      	adds	r7, #8
 8021936:	46bd      	mov	sp, r7
 8021938:	bd80      	pop	{r7, pc}

0802193a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 802193a:	b580      	push	{r7, lr}
 802193c:	b086      	sub	sp, #24
 802193e:	af00      	add	r7, sp, #0
 8021940:	4603      	mov	r3, r0
 8021942:	60b9      	str	r1, [r7, #8]
 8021944:	607a      	str	r2, [r7, #4]
 8021946:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8021948:	2300      	movs	r3, #0
 802194a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 802194c:	f7ff ff5c 	bl	8021808 <__NVIC_GetPriorityGrouping>
 8021950:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8021952:	687a      	ldr	r2, [r7, #4]
 8021954:	68b9      	ldr	r1, [r7, #8]
 8021956:	6978      	ldr	r0, [r7, #20]
 8021958:	f7ff ff8e 	bl	8021878 <NVIC_EncodePriority>
 802195c:	4602      	mov	r2, r0
 802195e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8021962:	4611      	mov	r1, r2
 8021964:	4618      	mov	r0, r3
 8021966:	f7ff ff5d 	bl	8021824 <__NVIC_SetPriority>
}
 802196a:	bf00      	nop
 802196c:	3718      	adds	r7, #24
 802196e:	46bd      	mov	sp, r7
 8021970:	bd80      	pop	{r7, pc}

08021972 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8021972:	b580      	push	{r7, lr}
 8021974:	b082      	sub	sp, #8
 8021976:	af00      	add	r7, sp, #0
 8021978:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 802197a:	6878      	ldr	r0, [r7, #4]
 802197c:	f7ff ffb0 	bl	80218e0 <SysTick_Config>
 8021980:	4603      	mov	r3, r0
}
 8021982:	4618      	mov	r0, r3
 8021984:	3708      	adds	r7, #8
 8021986:	46bd      	mov	sp, r7
 8021988:	bd80      	pop	{r7, pc}
	...

0802198c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 802198c:	b480      	push	{r7}
 802198e:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8021990:	4b0d      	ldr	r3, [pc, #52]	@ (80219c8 <HAL_PWREx_GetVoltageRange+0x3c>)
 8021992:	681b      	ldr	r3, [r3, #0]
 8021994:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8021998:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 802199c:	d102      	bne.n	80219a4 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 802199e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80219a2:	e00b      	b.n	80219bc <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 80219a4:	4b08      	ldr	r3, [pc, #32]	@ (80219c8 <HAL_PWREx_GetVoltageRange+0x3c>)
 80219a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80219aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80219ae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80219b2:	d102      	bne.n	80219ba <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 80219b4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80219b8:	e000      	b.n	80219bc <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 80219ba:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 80219bc:	4618      	mov	r0, r3
 80219be:	46bd      	mov	sp, r7
 80219c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80219c4:	4770      	bx	lr
 80219c6:	bf00      	nop
 80219c8:	40007000 	.word	0x40007000

080219cc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80219cc:	b480      	push	{r7}
 80219ce:	b085      	sub	sp, #20
 80219d0:	af00      	add	r7, sp, #0
 80219d2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80219d4:	687b      	ldr	r3, [r7, #4]
 80219d6:	2b00      	cmp	r3, #0
 80219d8:	d141      	bne.n	8021a5e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80219da:	4b4b      	ldr	r3, [pc, #300]	@ (8021b08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80219dc:	681b      	ldr	r3, [r3, #0]
 80219de:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80219e2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80219e6:	d131      	bne.n	8021a4c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80219e8:	4b47      	ldr	r3, [pc, #284]	@ (8021b08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80219ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80219ee:	4a46      	ldr	r2, [pc, #280]	@ (8021b08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80219f0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80219f4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80219f8:	4b43      	ldr	r3, [pc, #268]	@ (8021b08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80219fa:	681b      	ldr	r3, [r3, #0]
 80219fc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8021a00:	4a41      	ldr	r2, [pc, #260]	@ (8021b08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8021a02:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8021a06:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8021a08:	4b40      	ldr	r3, [pc, #256]	@ (8021b0c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8021a0a:	681b      	ldr	r3, [r3, #0]
 8021a0c:	2232      	movs	r2, #50	@ 0x32
 8021a0e:	fb02 f303 	mul.w	r3, r2, r3
 8021a12:	4a3f      	ldr	r2, [pc, #252]	@ (8021b10 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8021a14:	fba2 2303 	umull	r2, r3, r2, r3
 8021a18:	0c9b      	lsrs	r3, r3, #18
 8021a1a:	3301      	adds	r3, #1
 8021a1c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8021a1e:	e002      	b.n	8021a26 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8021a20:	68fb      	ldr	r3, [r7, #12]
 8021a22:	3b01      	subs	r3, #1
 8021a24:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8021a26:	4b38      	ldr	r3, [pc, #224]	@ (8021b08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8021a28:	695b      	ldr	r3, [r3, #20]
 8021a2a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8021a2e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8021a32:	d102      	bne.n	8021a3a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8021a34:	68fb      	ldr	r3, [r7, #12]
 8021a36:	2b00      	cmp	r3, #0
 8021a38:	d1f2      	bne.n	8021a20 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8021a3a:	4b33      	ldr	r3, [pc, #204]	@ (8021b08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8021a3c:	695b      	ldr	r3, [r3, #20]
 8021a3e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8021a42:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8021a46:	d158      	bne.n	8021afa <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8021a48:	2303      	movs	r3, #3
 8021a4a:	e057      	b.n	8021afc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8021a4c:	4b2e      	ldr	r3, [pc, #184]	@ (8021b08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8021a4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8021a52:	4a2d      	ldr	r2, [pc, #180]	@ (8021b08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8021a54:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8021a58:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8021a5c:	e04d      	b.n	8021afa <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8021a5e:	687b      	ldr	r3, [r7, #4]
 8021a60:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8021a64:	d141      	bne.n	8021aea <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8021a66:	4b28      	ldr	r3, [pc, #160]	@ (8021b08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8021a68:	681b      	ldr	r3, [r3, #0]
 8021a6a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8021a6e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8021a72:	d131      	bne.n	8021ad8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8021a74:	4b24      	ldr	r3, [pc, #144]	@ (8021b08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8021a76:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8021a7a:	4a23      	ldr	r2, [pc, #140]	@ (8021b08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8021a7c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8021a80:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8021a84:	4b20      	ldr	r3, [pc, #128]	@ (8021b08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8021a86:	681b      	ldr	r3, [r3, #0]
 8021a88:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8021a8c:	4a1e      	ldr	r2, [pc, #120]	@ (8021b08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8021a8e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8021a92:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8021a94:	4b1d      	ldr	r3, [pc, #116]	@ (8021b0c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8021a96:	681b      	ldr	r3, [r3, #0]
 8021a98:	2232      	movs	r2, #50	@ 0x32
 8021a9a:	fb02 f303 	mul.w	r3, r2, r3
 8021a9e:	4a1c      	ldr	r2, [pc, #112]	@ (8021b10 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8021aa0:	fba2 2303 	umull	r2, r3, r2, r3
 8021aa4:	0c9b      	lsrs	r3, r3, #18
 8021aa6:	3301      	adds	r3, #1
 8021aa8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8021aaa:	e002      	b.n	8021ab2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8021aac:	68fb      	ldr	r3, [r7, #12]
 8021aae:	3b01      	subs	r3, #1
 8021ab0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8021ab2:	4b15      	ldr	r3, [pc, #84]	@ (8021b08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8021ab4:	695b      	ldr	r3, [r3, #20]
 8021ab6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8021aba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8021abe:	d102      	bne.n	8021ac6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8021ac0:	68fb      	ldr	r3, [r7, #12]
 8021ac2:	2b00      	cmp	r3, #0
 8021ac4:	d1f2      	bne.n	8021aac <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8021ac6:	4b10      	ldr	r3, [pc, #64]	@ (8021b08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8021ac8:	695b      	ldr	r3, [r3, #20]
 8021aca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8021ace:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8021ad2:	d112      	bne.n	8021afa <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8021ad4:	2303      	movs	r3, #3
 8021ad6:	e011      	b.n	8021afc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8021ad8:	4b0b      	ldr	r3, [pc, #44]	@ (8021b08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8021ada:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8021ade:	4a0a      	ldr	r2, [pc, #40]	@ (8021b08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8021ae0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8021ae4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8021ae8:	e007      	b.n	8021afa <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8021aea:	4b07      	ldr	r3, [pc, #28]	@ (8021b08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8021aec:	681b      	ldr	r3, [r3, #0]
 8021aee:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8021af2:	4a05      	ldr	r2, [pc, #20]	@ (8021b08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8021af4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8021af8:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8021afa:	2300      	movs	r3, #0
}
 8021afc:	4618      	mov	r0, r3
 8021afe:	3714      	adds	r7, #20
 8021b00:	46bd      	mov	sp, r7
 8021b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021b06:	4770      	bx	lr
 8021b08:	40007000 	.word	0x40007000
 8021b0c:	20000000 	.word	0x20000000
 8021b10:	431bde83 	.word	0x431bde83

08021b14 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8021b14:	b580      	push	{r7, lr}
 8021b16:	b088      	sub	sp, #32
 8021b18:	af00      	add	r7, sp, #0
 8021b1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8021b1c:	687b      	ldr	r3, [r7, #4]
 8021b1e:	2b00      	cmp	r3, #0
 8021b20:	d102      	bne.n	8021b28 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8021b22:	2301      	movs	r3, #1
 8021b24:	f000 bc08 	b.w	8022338 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8021b28:	4b96      	ldr	r3, [pc, #600]	@ (8021d84 <HAL_RCC_OscConfig+0x270>)
 8021b2a:	689b      	ldr	r3, [r3, #8]
 8021b2c:	f003 030c 	and.w	r3, r3, #12
 8021b30:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8021b32:	4b94      	ldr	r3, [pc, #592]	@ (8021d84 <HAL_RCC_OscConfig+0x270>)
 8021b34:	68db      	ldr	r3, [r3, #12]
 8021b36:	f003 0303 	and.w	r3, r3, #3
 8021b3a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8021b3c:	687b      	ldr	r3, [r7, #4]
 8021b3e:	681b      	ldr	r3, [r3, #0]
 8021b40:	f003 0310 	and.w	r3, r3, #16
 8021b44:	2b00      	cmp	r3, #0
 8021b46:	f000 80e4 	beq.w	8021d12 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8021b4a:	69bb      	ldr	r3, [r7, #24]
 8021b4c:	2b00      	cmp	r3, #0
 8021b4e:	d007      	beq.n	8021b60 <HAL_RCC_OscConfig+0x4c>
 8021b50:	69bb      	ldr	r3, [r7, #24]
 8021b52:	2b0c      	cmp	r3, #12
 8021b54:	f040 808b 	bne.w	8021c6e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8021b58:	697b      	ldr	r3, [r7, #20]
 8021b5a:	2b01      	cmp	r3, #1
 8021b5c:	f040 8087 	bne.w	8021c6e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8021b60:	4b88      	ldr	r3, [pc, #544]	@ (8021d84 <HAL_RCC_OscConfig+0x270>)
 8021b62:	681b      	ldr	r3, [r3, #0]
 8021b64:	f003 0302 	and.w	r3, r3, #2
 8021b68:	2b00      	cmp	r3, #0
 8021b6a:	d005      	beq.n	8021b78 <HAL_RCC_OscConfig+0x64>
 8021b6c:	687b      	ldr	r3, [r7, #4]
 8021b6e:	699b      	ldr	r3, [r3, #24]
 8021b70:	2b00      	cmp	r3, #0
 8021b72:	d101      	bne.n	8021b78 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8021b74:	2301      	movs	r3, #1
 8021b76:	e3df      	b.n	8022338 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8021b78:	687b      	ldr	r3, [r7, #4]
 8021b7a:	6a1a      	ldr	r2, [r3, #32]
 8021b7c:	4b81      	ldr	r3, [pc, #516]	@ (8021d84 <HAL_RCC_OscConfig+0x270>)
 8021b7e:	681b      	ldr	r3, [r3, #0]
 8021b80:	f003 0308 	and.w	r3, r3, #8
 8021b84:	2b00      	cmp	r3, #0
 8021b86:	d004      	beq.n	8021b92 <HAL_RCC_OscConfig+0x7e>
 8021b88:	4b7e      	ldr	r3, [pc, #504]	@ (8021d84 <HAL_RCC_OscConfig+0x270>)
 8021b8a:	681b      	ldr	r3, [r3, #0]
 8021b8c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8021b90:	e005      	b.n	8021b9e <HAL_RCC_OscConfig+0x8a>
 8021b92:	4b7c      	ldr	r3, [pc, #496]	@ (8021d84 <HAL_RCC_OscConfig+0x270>)
 8021b94:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8021b98:	091b      	lsrs	r3, r3, #4
 8021b9a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8021b9e:	4293      	cmp	r3, r2
 8021ba0:	d223      	bcs.n	8021bea <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8021ba2:	687b      	ldr	r3, [r7, #4]
 8021ba4:	6a1b      	ldr	r3, [r3, #32]
 8021ba6:	4618      	mov	r0, r3
 8021ba8:	f000 fd94 	bl	80226d4 <RCC_SetFlashLatencyFromMSIRange>
 8021bac:	4603      	mov	r3, r0
 8021bae:	2b00      	cmp	r3, #0
 8021bb0:	d001      	beq.n	8021bb6 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8021bb2:	2301      	movs	r3, #1
 8021bb4:	e3c0      	b.n	8022338 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8021bb6:	4b73      	ldr	r3, [pc, #460]	@ (8021d84 <HAL_RCC_OscConfig+0x270>)
 8021bb8:	681b      	ldr	r3, [r3, #0]
 8021bba:	4a72      	ldr	r2, [pc, #456]	@ (8021d84 <HAL_RCC_OscConfig+0x270>)
 8021bbc:	f043 0308 	orr.w	r3, r3, #8
 8021bc0:	6013      	str	r3, [r2, #0]
 8021bc2:	4b70      	ldr	r3, [pc, #448]	@ (8021d84 <HAL_RCC_OscConfig+0x270>)
 8021bc4:	681b      	ldr	r3, [r3, #0]
 8021bc6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8021bca:	687b      	ldr	r3, [r7, #4]
 8021bcc:	6a1b      	ldr	r3, [r3, #32]
 8021bce:	496d      	ldr	r1, [pc, #436]	@ (8021d84 <HAL_RCC_OscConfig+0x270>)
 8021bd0:	4313      	orrs	r3, r2
 8021bd2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8021bd4:	4b6b      	ldr	r3, [pc, #428]	@ (8021d84 <HAL_RCC_OscConfig+0x270>)
 8021bd6:	685b      	ldr	r3, [r3, #4]
 8021bd8:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8021bdc:	687b      	ldr	r3, [r7, #4]
 8021bde:	69db      	ldr	r3, [r3, #28]
 8021be0:	021b      	lsls	r3, r3, #8
 8021be2:	4968      	ldr	r1, [pc, #416]	@ (8021d84 <HAL_RCC_OscConfig+0x270>)
 8021be4:	4313      	orrs	r3, r2
 8021be6:	604b      	str	r3, [r1, #4]
 8021be8:	e025      	b.n	8021c36 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8021bea:	4b66      	ldr	r3, [pc, #408]	@ (8021d84 <HAL_RCC_OscConfig+0x270>)
 8021bec:	681b      	ldr	r3, [r3, #0]
 8021bee:	4a65      	ldr	r2, [pc, #404]	@ (8021d84 <HAL_RCC_OscConfig+0x270>)
 8021bf0:	f043 0308 	orr.w	r3, r3, #8
 8021bf4:	6013      	str	r3, [r2, #0]
 8021bf6:	4b63      	ldr	r3, [pc, #396]	@ (8021d84 <HAL_RCC_OscConfig+0x270>)
 8021bf8:	681b      	ldr	r3, [r3, #0]
 8021bfa:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8021bfe:	687b      	ldr	r3, [r7, #4]
 8021c00:	6a1b      	ldr	r3, [r3, #32]
 8021c02:	4960      	ldr	r1, [pc, #384]	@ (8021d84 <HAL_RCC_OscConfig+0x270>)
 8021c04:	4313      	orrs	r3, r2
 8021c06:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8021c08:	4b5e      	ldr	r3, [pc, #376]	@ (8021d84 <HAL_RCC_OscConfig+0x270>)
 8021c0a:	685b      	ldr	r3, [r3, #4]
 8021c0c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8021c10:	687b      	ldr	r3, [r7, #4]
 8021c12:	69db      	ldr	r3, [r3, #28]
 8021c14:	021b      	lsls	r3, r3, #8
 8021c16:	495b      	ldr	r1, [pc, #364]	@ (8021d84 <HAL_RCC_OscConfig+0x270>)
 8021c18:	4313      	orrs	r3, r2
 8021c1a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8021c1c:	69bb      	ldr	r3, [r7, #24]
 8021c1e:	2b00      	cmp	r3, #0
 8021c20:	d109      	bne.n	8021c36 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8021c22:	687b      	ldr	r3, [r7, #4]
 8021c24:	6a1b      	ldr	r3, [r3, #32]
 8021c26:	4618      	mov	r0, r3
 8021c28:	f000 fd54 	bl	80226d4 <RCC_SetFlashLatencyFromMSIRange>
 8021c2c:	4603      	mov	r3, r0
 8021c2e:	2b00      	cmp	r3, #0
 8021c30:	d001      	beq.n	8021c36 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8021c32:	2301      	movs	r3, #1
 8021c34:	e380      	b.n	8022338 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8021c36:	f000 fcc1 	bl	80225bc <HAL_RCC_GetSysClockFreq>
 8021c3a:	4602      	mov	r2, r0
 8021c3c:	4b51      	ldr	r3, [pc, #324]	@ (8021d84 <HAL_RCC_OscConfig+0x270>)
 8021c3e:	689b      	ldr	r3, [r3, #8]
 8021c40:	091b      	lsrs	r3, r3, #4
 8021c42:	f003 030f 	and.w	r3, r3, #15
 8021c46:	4950      	ldr	r1, [pc, #320]	@ (8021d88 <HAL_RCC_OscConfig+0x274>)
 8021c48:	5ccb      	ldrb	r3, [r1, r3]
 8021c4a:	f003 031f 	and.w	r3, r3, #31
 8021c4e:	fa22 f303 	lsr.w	r3, r2, r3
 8021c52:	4a4e      	ldr	r2, [pc, #312]	@ (8021d8c <HAL_RCC_OscConfig+0x278>)
 8021c54:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8021c56:	4b4e      	ldr	r3, [pc, #312]	@ (8021d90 <HAL_RCC_OscConfig+0x27c>)
 8021c58:	681b      	ldr	r3, [r3, #0]
 8021c5a:	4618      	mov	r0, r3
 8021c5c:	f7ff fd54 	bl	8021708 <HAL_InitTick>
 8021c60:	4603      	mov	r3, r0
 8021c62:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8021c64:	7bfb      	ldrb	r3, [r7, #15]
 8021c66:	2b00      	cmp	r3, #0
 8021c68:	d052      	beq.n	8021d10 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8021c6a:	7bfb      	ldrb	r3, [r7, #15]
 8021c6c:	e364      	b.n	8022338 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8021c6e:	687b      	ldr	r3, [r7, #4]
 8021c70:	699b      	ldr	r3, [r3, #24]
 8021c72:	2b00      	cmp	r3, #0
 8021c74:	d032      	beq.n	8021cdc <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8021c76:	4b43      	ldr	r3, [pc, #268]	@ (8021d84 <HAL_RCC_OscConfig+0x270>)
 8021c78:	681b      	ldr	r3, [r3, #0]
 8021c7a:	4a42      	ldr	r2, [pc, #264]	@ (8021d84 <HAL_RCC_OscConfig+0x270>)
 8021c7c:	f043 0301 	orr.w	r3, r3, #1
 8021c80:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8021c82:	f7ff fd91 	bl	80217a8 <HAL_GetTick>
 8021c86:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8021c88:	e008      	b.n	8021c9c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8021c8a:	f7ff fd8d 	bl	80217a8 <HAL_GetTick>
 8021c8e:	4602      	mov	r2, r0
 8021c90:	693b      	ldr	r3, [r7, #16]
 8021c92:	1ad3      	subs	r3, r2, r3
 8021c94:	2b02      	cmp	r3, #2
 8021c96:	d901      	bls.n	8021c9c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8021c98:	2303      	movs	r3, #3
 8021c9a:	e34d      	b.n	8022338 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8021c9c:	4b39      	ldr	r3, [pc, #228]	@ (8021d84 <HAL_RCC_OscConfig+0x270>)
 8021c9e:	681b      	ldr	r3, [r3, #0]
 8021ca0:	f003 0302 	and.w	r3, r3, #2
 8021ca4:	2b00      	cmp	r3, #0
 8021ca6:	d0f0      	beq.n	8021c8a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8021ca8:	4b36      	ldr	r3, [pc, #216]	@ (8021d84 <HAL_RCC_OscConfig+0x270>)
 8021caa:	681b      	ldr	r3, [r3, #0]
 8021cac:	4a35      	ldr	r2, [pc, #212]	@ (8021d84 <HAL_RCC_OscConfig+0x270>)
 8021cae:	f043 0308 	orr.w	r3, r3, #8
 8021cb2:	6013      	str	r3, [r2, #0]
 8021cb4:	4b33      	ldr	r3, [pc, #204]	@ (8021d84 <HAL_RCC_OscConfig+0x270>)
 8021cb6:	681b      	ldr	r3, [r3, #0]
 8021cb8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8021cbc:	687b      	ldr	r3, [r7, #4]
 8021cbe:	6a1b      	ldr	r3, [r3, #32]
 8021cc0:	4930      	ldr	r1, [pc, #192]	@ (8021d84 <HAL_RCC_OscConfig+0x270>)
 8021cc2:	4313      	orrs	r3, r2
 8021cc4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8021cc6:	4b2f      	ldr	r3, [pc, #188]	@ (8021d84 <HAL_RCC_OscConfig+0x270>)
 8021cc8:	685b      	ldr	r3, [r3, #4]
 8021cca:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8021cce:	687b      	ldr	r3, [r7, #4]
 8021cd0:	69db      	ldr	r3, [r3, #28]
 8021cd2:	021b      	lsls	r3, r3, #8
 8021cd4:	492b      	ldr	r1, [pc, #172]	@ (8021d84 <HAL_RCC_OscConfig+0x270>)
 8021cd6:	4313      	orrs	r3, r2
 8021cd8:	604b      	str	r3, [r1, #4]
 8021cda:	e01a      	b.n	8021d12 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8021cdc:	4b29      	ldr	r3, [pc, #164]	@ (8021d84 <HAL_RCC_OscConfig+0x270>)
 8021cde:	681b      	ldr	r3, [r3, #0]
 8021ce0:	4a28      	ldr	r2, [pc, #160]	@ (8021d84 <HAL_RCC_OscConfig+0x270>)
 8021ce2:	f023 0301 	bic.w	r3, r3, #1
 8021ce6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8021ce8:	f7ff fd5e 	bl	80217a8 <HAL_GetTick>
 8021cec:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8021cee:	e008      	b.n	8021d02 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8021cf0:	f7ff fd5a 	bl	80217a8 <HAL_GetTick>
 8021cf4:	4602      	mov	r2, r0
 8021cf6:	693b      	ldr	r3, [r7, #16]
 8021cf8:	1ad3      	subs	r3, r2, r3
 8021cfa:	2b02      	cmp	r3, #2
 8021cfc:	d901      	bls.n	8021d02 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8021cfe:	2303      	movs	r3, #3
 8021d00:	e31a      	b.n	8022338 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8021d02:	4b20      	ldr	r3, [pc, #128]	@ (8021d84 <HAL_RCC_OscConfig+0x270>)
 8021d04:	681b      	ldr	r3, [r3, #0]
 8021d06:	f003 0302 	and.w	r3, r3, #2
 8021d0a:	2b00      	cmp	r3, #0
 8021d0c:	d1f0      	bne.n	8021cf0 <HAL_RCC_OscConfig+0x1dc>
 8021d0e:	e000      	b.n	8021d12 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8021d10:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8021d12:	687b      	ldr	r3, [r7, #4]
 8021d14:	681b      	ldr	r3, [r3, #0]
 8021d16:	f003 0301 	and.w	r3, r3, #1
 8021d1a:	2b00      	cmp	r3, #0
 8021d1c:	d073      	beq.n	8021e06 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8021d1e:	69bb      	ldr	r3, [r7, #24]
 8021d20:	2b08      	cmp	r3, #8
 8021d22:	d005      	beq.n	8021d30 <HAL_RCC_OscConfig+0x21c>
 8021d24:	69bb      	ldr	r3, [r7, #24]
 8021d26:	2b0c      	cmp	r3, #12
 8021d28:	d10e      	bne.n	8021d48 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8021d2a:	697b      	ldr	r3, [r7, #20]
 8021d2c:	2b03      	cmp	r3, #3
 8021d2e:	d10b      	bne.n	8021d48 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8021d30:	4b14      	ldr	r3, [pc, #80]	@ (8021d84 <HAL_RCC_OscConfig+0x270>)
 8021d32:	681b      	ldr	r3, [r3, #0]
 8021d34:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8021d38:	2b00      	cmp	r3, #0
 8021d3a:	d063      	beq.n	8021e04 <HAL_RCC_OscConfig+0x2f0>
 8021d3c:	687b      	ldr	r3, [r7, #4]
 8021d3e:	685b      	ldr	r3, [r3, #4]
 8021d40:	2b00      	cmp	r3, #0
 8021d42:	d15f      	bne.n	8021e04 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8021d44:	2301      	movs	r3, #1
 8021d46:	e2f7      	b.n	8022338 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8021d48:	687b      	ldr	r3, [r7, #4]
 8021d4a:	685b      	ldr	r3, [r3, #4]
 8021d4c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8021d50:	d106      	bne.n	8021d60 <HAL_RCC_OscConfig+0x24c>
 8021d52:	4b0c      	ldr	r3, [pc, #48]	@ (8021d84 <HAL_RCC_OscConfig+0x270>)
 8021d54:	681b      	ldr	r3, [r3, #0]
 8021d56:	4a0b      	ldr	r2, [pc, #44]	@ (8021d84 <HAL_RCC_OscConfig+0x270>)
 8021d58:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8021d5c:	6013      	str	r3, [r2, #0]
 8021d5e:	e025      	b.n	8021dac <HAL_RCC_OscConfig+0x298>
 8021d60:	687b      	ldr	r3, [r7, #4]
 8021d62:	685b      	ldr	r3, [r3, #4]
 8021d64:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8021d68:	d114      	bne.n	8021d94 <HAL_RCC_OscConfig+0x280>
 8021d6a:	4b06      	ldr	r3, [pc, #24]	@ (8021d84 <HAL_RCC_OscConfig+0x270>)
 8021d6c:	681b      	ldr	r3, [r3, #0]
 8021d6e:	4a05      	ldr	r2, [pc, #20]	@ (8021d84 <HAL_RCC_OscConfig+0x270>)
 8021d70:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8021d74:	6013      	str	r3, [r2, #0]
 8021d76:	4b03      	ldr	r3, [pc, #12]	@ (8021d84 <HAL_RCC_OscConfig+0x270>)
 8021d78:	681b      	ldr	r3, [r3, #0]
 8021d7a:	4a02      	ldr	r2, [pc, #8]	@ (8021d84 <HAL_RCC_OscConfig+0x270>)
 8021d7c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8021d80:	6013      	str	r3, [r2, #0]
 8021d82:	e013      	b.n	8021dac <HAL_RCC_OscConfig+0x298>
 8021d84:	40021000 	.word	0x40021000
 8021d88:	08024824 	.word	0x08024824
 8021d8c:	20000000 	.word	0x20000000
 8021d90:	20000004 	.word	0x20000004
 8021d94:	4ba0      	ldr	r3, [pc, #640]	@ (8022018 <HAL_RCC_OscConfig+0x504>)
 8021d96:	681b      	ldr	r3, [r3, #0]
 8021d98:	4a9f      	ldr	r2, [pc, #636]	@ (8022018 <HAL_RCC_OscConfig+0x504>)
 8021d9a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8021d9e:	6013      	str	r3, [r2, #0]
 8021da0:	4b9d      	ldr	r3, [pc, #628]	@ (8022018 <HAL_RCC_OscConfig+0x504>)
 8021da2:	681b      	ldr	r3, [r3, #0]
 8021da4:	4a9c      	ldr	r2, [pc, #624]	@ (8022018 <HAL_RCC_OscConfig+0x504>)
 8021da6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8021daa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8021dac:	687b      	ldr	r3, [r7, #4]
 8021dae:	685b      	ldr	r3, [r3, #4]
 8021db0:	2b00      	cmp	r3, #0
 8021db2:	d013      	beq.n	8021ddc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8021db4:	f7ff fcf8 	bl	80217a8 <HAL_GetTick>
 8021db8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8021dba:	e008      	b.n	8021dce <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8021dbc:	f7ff fcf4 	bl	80217a8 <HAL_GetTick>
 8021dc0:	4602      	mov	r2, r0
 8021dc2:	693b      	ldr	r3, [r7, #16]
 8021dc4:	1ad3      	subs	r3, r2, r3
 8021dc6:	2b64      	cmp	r3, #100	@ 0x64
 8021dc8:	d901      	bls.n	8021dce <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8021dca:	2303      	movs	r3, #3
 8021dcc:	e2b4      	b.n	8022338 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8021dce:	4b92      	ldr	r3, [pc, #584]	@ (8022018 <HAL_RCC_OscConfig+0x504>)
 8021dd0:	681b      	ldr	r3, [r3, #0]
 8021dd2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8021dd6:	2b00      	cmp	r3, #0
 8021dd8:	d0f0      	beq.n	8021dbc <HAL_RCC_OscConfig+0x2a8>
 8021dda:	e014      	b.n	8021e06 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8021ddc:	f7ff fce4 	bl	80217a8 <HAL_GetTick>
 8021de0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8021de2:	e008      	b.n	8021df6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8021de4:	f7ff fce0 	bl	80217a8 <HAL_GetTick>
 8021de8:	4602      	mov	r2, r0
 8021dea:	693b      	ldr	r3, [r7, #16]
 8021dec:	1ad3      	subs	r3, r2, r3
 8021dee:	2b64      	cmp	r3, #100	@ 0x64
 8021df0:	d901      	bls.n	8021df6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8021df2:	2303      	movs	r3, #3
 8021df4:	e2a0      	b.n	8022338 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8021df6:	4b88      	ldr	r3, [pc, #544]	@ (8022018 <HAL_RCC_OscConfig+0x504>)
 8021df8:	681b      	ldr	r3, [r3, #0]
 8021dfa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8021dfe:	2b00      	cmp	r3, #0
 8021e00:	d1f0      	bne.n	8021de4 <HAL_RCC_OscConfig+0x2d0>
 8021e02:	e000      	b.n	8021e06 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8021e04:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8021e06:	687b      	ldr	r3, [r7, #4]
 8021e08:	681b      	ldr	r3, [r3, #0]
 8021e0a:	f003 0302 	and.w	r3, r3, #2
 8021e0e:	2b00      	cmp	r3, #0
 8021e10:	d060      	beq.n	8021ed4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8021e12:	69bb      	ldr	r3, [r7, #24]
 8021e14:	2b04      	cmp	r3, #4
 8021e16:	d005      	beq.n	8021e24 <HAL_RCC_OscConfig+0x310>
 8021e18:	69bb      	ldr	r3, [r7, #24]
 8021e1a:	2b0c      	cmp	r3, #12
 8021e1c:	d119      	bne.n	8021e52 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8021e1e:	697b      	ldr	r3, [r7, #20]
 8021e20:	2b02      	cmp	r3, #2
 8021e22:	d116      	bne.n	8021e52 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8021e24:	4b7c      	ldr	r3, [pc, #496]	@ (8022018 <HAL_RCC_OscConfig+0x504>)
 8021e26:	681b      	ldr	r3, [r3, #0]
 8021e28:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8021e2c:	2b00      	cmp	r3, #0
 8021e2e:	d005      	beq.n	8021e3c <HAL_RCC_OscConfig+0x328>
 8021e30:	687b      	ldr	r3, [r7, #4]
 8021e32:	68db      	ldr	r3, [r3, #12]
 8021e34:	2b00      	cmp	r3, #0
 8021e36:	d101      	bne.n	8021e3c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8021e38:	2301      	movs	r3, #1
 8021e3a:	e27d      	b.n	8022338 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8021e3c:	4b76      	ldr	r3, [pc, #472]	@ (8022018 <HAL_RCC_OscConfig+0x504>)
 8021e3e:	685b      	ldr	r3, [r3, #4]
 8021e40:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8021e44:	687b      	ldr	r3, [r7, #4]
 8021e46:	691b      	ldr	r3, [r3, #16]
 8021e48:	061b      	lsls	r3, r3, #24
 8021e4a:	4973      	ldr	r1, [pc, #460]	@ (8022018 <HAL_RCC_OscConfig+0x504>)
 8021e4c:	4313      	orrs	r3, r2
 8021e4e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8021e50:	e040      	b.n	8021ed4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8021e52:	687b      	ldr	r3, [r7, #4]
 8021e54:	68db      	ldr	r3, [r3, #12]
 8021e56:	2b00      	cmp	r3, #0
 8021e58:	d023      	beq.n	8021ea2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8021e5a:	4b6f      	ldr	r3, [pc, #444]	@ (8022018 <HAL_RCC_OscConfig+0x504>)
 8021e5c:	681b      	ldr	r3, [r3, #0]
 8021e5e:	4a6e      	ldr	r2, [pc, #440]	@ (8022018 <HAL_RCC_OscConfig+0x504>)
 8021e60:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8021e64:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8021e66:	f7ff fc9f 	bl	80217a8 <HAL_GetTick>
 8021e6a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8021e6c:	e008      	b.n	8021e80 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8021e6e:	f7ff fc9b 	bl	80217a8 <HAL_GetTick>
 8021e72:	4602      	mov	r2, r0
 8021e74:	693b      	ldr	r3, [r7, #16]
 8021e76:	1ad3      	subs	r3, r2, r3
 8021e78:	2b02      	cmp	r3, #2
 8021e7a:	d901      	bls.n	8021e80 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8021e7c:	2303      	movs	r3, #3
 8021e7e:	e25b      	b.n	8022338 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8021e80:	4b65      	ldr	r3, [pc, #404]	@ (8022018 <HAL_RCC_OscConfig+0x504>)
 8021e82:	681b      	ldr	r3, [r3, #0]
 8021e84:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8021e88:	2b00      	cmp	r3, #0
 8021e8a:	d0f0      	beq.n	8021e6e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8021e8c:	4b62      	ldr	r3, [pc, #392]	@ (8022018 <HAL_RCC_OscConfig+0x504>)
 8021e8e:	685b      	ldr	r3, [r3, #4]
 8021e90:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8021e94:	687b      	ldr	r3, [r7, #4]
 8021e96:	691b      	ldr	r3, [r3, #16]
 8021e98:	061b      	lsls	r3, r3, #24
 8021e9a:	495f      	ldr	r1, [pc, #380]	@ (8022018 <HAL_RCC_OscConfig+0x504>)
 8021e9c:	4313      	orrs	r3, r2
 8021e9e:	604b      	str	r3, [r1, #4]
 8021ea0:	e018      	b.n	8021ed4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8021ea2:	4b5d      	ldr	r3, [pc, #372]	@ (8022018 <HAL_RCC_OscConfig+0x504>)
 8021ea4:	681b      	ldr	r3, [r3, #0]
 8021ea6:	4a5c      	ldr	r2, [pc, #368]	@ (8022018 <HAL_RCC_OscConfig+0x504>)
 8021ea8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8021eac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8021eae:	f7ff fc7b 	bl	80217a8 <HAL_GetTick>
 8021eb2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8021eb4:	e008      	b.n	8021ec8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8021eb6:	f7ff fc77 	bl	80217a8 <HAL_GetTick>
 8021eba:	4602      	mov	r2, r0
 8021ebc:	693b      	ldr	r3, [r7, #16]
 8021ebe:	1ad3      	subs	r3, r2, r3
 8021ec0:	2b02      	cmp	r3, #2
 8021ec2:	d901      	bls.n	8021ec8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8021ec4:	2303      	movs	r3, #3
 8021ec6:	e237      	b.n	8022338 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8021ec8:	4b53      	ldr	r3, [pc, #332]	@ (8022018 <HAL_RCC_OscConfig+0x504>)
 8021eca:	681b      	ldr	r3, [r3, #0]
 8021ecc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8021ed0:	2b00      	cmp	r3, #0
 8021ed2:	d1f0      	bne.n	8021eb6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8021ed4:	687b      	ldr	r3, [r7, #4]
 8021ed6:	681b      	ldr	r3, [r3, #0]
 8021ed8:	f003 0308 	and.w	r3, r3, #8
 8021edc:	2b00      	cmp	r3, #0
 8021ede:	d03c      	beq.n	8021f5a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8021ee0:	687b      	ldr	r3, [r7, #4]
 8021ee2:	695b      	ldr	r3, [r3, #20]
 8021ee4:	2b00      	cmp	r3, #0
 8021ee6:	d01c      	beq.n	8021f22 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8021ee8:	4b4b      	ldr	r3, [pc, #300]	@ (8022018 <HAL_RCC_OscConfig+0x504>)
 8021eea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8021eee:	4a4a      	ldr	r2, [pc, #296]	@ (8022018 <HAL_RCC_OscConfig+0x504>)
 8021ef0:	f043 0301 	orr.w	r3, r3, #1
 8021ef4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8021ef8:	f7ff fc56 	bl	80217a8 <HAL_GetTick>
 8021efc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8021efe:	e008      	b.n	8021f12 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8021f00:	f7ff fc52 	bl	80217a8 <HAL_GetTick>
 8021f04:	4602      	mov	r2, r0
 8021f06:	693b      	ldr	r3, [r7, #16]
 8021f08:	1ad3      	subs	r3, r2, r3
 8021f0a:	2b02      	cmp	r3, #2
 8021f0c:	d901      	bls.n	8021f12 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8021f0e:	2303      	movs	r3, #3
 8021f10:	e212      	b.n	8022338 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8021f12:	4b41      	ldr	r3, [pc, #260]	@ (8022018 <HAL_RCC_OscConfig+0x504>)
 8021f14:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8021f18:	f003 0302 	and.w	r3, r3, #2
 8021f1c:	2b00      	cmp	r3, #0
 8021f1e:	d0ef      	beq.n	8021f00 <HAL_RCC_OscConfig+0x3ec>
 8021f20:	e01b      	b.n	8021f5a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8021f22:	4b3d      	ldr	r3, [pc, #244]	@ (8022018 <HAL_RCC_OscConfig+0x504>)
 8021f24:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8021f28:	4a3b      	ldr	r2, [pc, #236]	@ (8022018 <HAL_RCC_OscConfig+0x504>)
 8021f2a:	f023 0301 	bic.w	r3, r3, #1
 8021f2e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8021f32:	f7ff fc39 	bl	80217a8 <HAL_GetTick>
 8021f36:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8021f38:	e008      	b.n	8021f4c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8021f3a:	f7ff fc35 	bl	80217a8 <HAL_GetTick>
 8021f3e:	4602      	mov	r2, r0
 8021f40:	693b      	ldr	r3, [r7, #16]
 8021f42:	1ad3      	subs	r3, r2, r3
 8021f44:	2b02      	cmp	r3, #2
 8021f46:	d901      	bls.n	8021f4c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8021f48:	2303      	movs	r3, #3
 8021f4a:	e1f5      	b.n	8022338 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8021f4c:	4b32      	ldr	r3, [pc, #200]	@ (8022018 <HAL_RCC_OscConfig+0x504>)
 8021f4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8021f52:	f003 0302 	and.w	r3, r3, #2
 8021f56:	2b00      	cmp	r3, #0
 8021f58:	d1ef      	bne.n	8021f3a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8021f5a:	687b      	ldr	r3, [r7, #4]
 8021f5c:	681b      	ldr	r3, [r3, #0]
 8021f5e:	f003 0304 	and.w	r3, r3, #4
 8021f62:	2b00      	cmp	r3, #0
 8021f64:	f000 80a6 	beq.w	80220b4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8021f68:	2300      	movs	r3, #0
 8021f6a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8021f6c:	4b2a      	ldr	r3, [pc, #168]	@ (8022018 <HAL_RCC_OscConfig+0x504>)
 8021f6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8021f70:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8021f74:	2b00      	cmp	r3, #0
 8021f76:	d10d      	bne.n	8021f94 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8021f78:	4b27      	ldr	r3, [pc, #156]	@ (8022018 <HAL_RCC_OscConfig+0x504>)
 8021f7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8021f7c:	4a26      	ldr	r2, [pc, #152]	@ (8022018 <HAL_RCC_OscConfig+0x504>)
 8021f7e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8021f82:	6593      	str	r3, [r2, #88]	@ 0x58
 8021f84:	4b24      	ldr	r3, [pc, #144]	@ (8022018 <HAL_RCC_OscConfig+0x504>)
 8021f86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8021f88:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8021f8c:	60bb      	str	r3, [r7, #8]
 8021f8e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8021f90:	2301      	movs	r3, #1
 8021f92:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8021f94:	4b21      	ldr	r3, [pc, #132]	@ (802201c <HAL_RCC_OscConfig+0x508>)
 8021f96:	681b      	ldr	r3, [r3, #0]
 8021f98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8021f9c:	2b00      	cmp	r3, #0
 8021f9e:	d118      	bne.n	8021fd2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8021fa0:	4b1e      	ldr	r3, [pc, #120]	@ (802201c <HAL_RCC_OscConfig+0x508>)
 8021fa2:	681b      	ldr	r3, [r3, #0]
 8021fa4:	4a1d      	ldr	r2, [pc, #116]	@ (802201c <HAL_RCC_OscConfig+0x508>)
 8021fa6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8021faa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8021fac:	f7ff fbfc 	bl	80217a8 <HAL_GetTick>
 8021fb0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8021fb2:	e008      	b.n	8021fc6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8021fb4:	f7ff fbf8 	bl	80217a8 <HAL_GetTick>
 8021fb8:	4602      	mov	r2, r0
 8021fba:	693b      	ldr	r3, [r7, #16]
 8021fbc:	1ad3      	subs	r3, r2, r3
 8021fbe:	2b02      	cmp	r3, #2
 8021fc0:	d901      	bls.n	8021fc6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8021fc2:	2303      	movs	r3, #3
 8021fc4:	e1b8      	b.n	8022338 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8021fc6:	4b15      	ldr	r3, [pc, #84]	@ (802201c <HAL_RCC_OscConfig+0x508>)
 8021fc8:	681b      	ldr	r3, [r3, #0]
 8021fca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8021fce:	2b00      	cmp	r3, #0
 8021fd0:	d0f0      	beq.n	8021fb4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8021fd2:	687b      	ldr	r3, [r7, #4]
 8021fd4:	689b      	ldr	r3, [r3, #8]
 8021fd6:	2b01      	cmp	r3, #1
 8021fd8:	d108      	bne.n	8021fec <HAL_RCC_OscConfig+0x4d8>
 8021fda:	4b0f      	ldr	r3, [pc, #60]	@ (8022018 <HAL_RCC_OscConfig+0x504>)
 8021fdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8021fe0:	4a0d      	ldr	r2, [pc, #52]	@ (8022018 <HAL_RCC_OscConfig+0x504>)
 8021fe2:	f043 0301 	orr.w	r3, r3, #1
 8021fe6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8021fea:	e029      	b.n	8022040 <HAL_RCC_OscConfig+0x52c>
 8021fec:	687b      	ldr	r3, [r7, #4]
 8021fee:	689b      	ldr	r3, [r3, #8]
 8021ff0:	2b05      	cmp	r3, #5
 8021ff2:	d115      	bne.n	8022020 <HAL_RCC_OscConfig+0x50c>
 8021ff4:	4b08      	ldr	r3, [pc, #32]	@ (8022018 <HAL_RCC_OscConfig+0x504>)
 8021ff6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8021ffa:	4a07      	ldr	r2, [pc, #28]	@ (8022018 <HAL_RCC_OscConfig+0x504>)
 8021ffc:	f043 0304 	orr.w	r3, r3, #4
 8022000:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8022004:	4b04      	ldr	r3, [pc, #16]	@ (8022018 <HAL_RCC_OscConfig+0x504>)
 8022006:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 802200a:	4a03      	ldr	r2, [pc, #12]	@ (8022018 <HAL_RCC_OscConfig+0x504>)
 802200c:	f043 0301 	orr.w	r3, r3, #1
 8022010:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8022014:	e014      	b.n	8022040 <HAL_RCC_OscConfig+0x52c>
 8022016:	bf00      	nop
 8022018:	40021000 	.word	0x40021000
 802201c:	40007000 	.word	0x40007000
 8022020:	4b9d      	ldr	r3, [pc, #628]	@ (8022298 <HAL_RCC_OscConfig+0x784>)
 8022022:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8022026:	4a9c      	ldr	r2, [pc, #624]	@ (8022298 <HAL_RCC_OscConfig+0x784>)
 8022028:	f023 0301 	bic.w	r3, r3, #1
 802202c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8022030:	4b99      	ldr	r3, [pc, #612]	@ (8022298 <HAL_RCC_OscConfig+0x784>)
 8022032:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8022036:	4a98      	ldr	r2, [pc, #608]	@ (8022298 <HAL_RCC_OscConfig+0x784>)
 8022038:	f023 0304 	bic.w	r3, r3, #4
 802203c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8022040:	687b      	ldr	r3, [r7, #4]
 8022042:	689b      	ldr	r3, [r3, #8]
 8022044:	2b00      	cmp	r3, #0
 8022046:	d016      	beq.n	8022076 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8022048:	f7ff fbae 	bl	80217a8 <HAL_GetTick>
 802204c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 802204e:	e00a      	b.n	8022066 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8022050:	f7ff fbaa 	bl	80217a8 <HAL_GetTick>
 8022054:	4602      	mov	r2, r0
 8022056:	693b      	ldr	r3, [r7, #16]
 8022058:	1ad3      	subs	r3, r2, r3
 802205a:	f241 3288 	movw	r2, #5000	@ 0x1388
 802205e:	4293      	cmp	r3, r2
 8022060:	d901      	bls.n	8022066 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8022062:	2303      	movs	r3, #3
 8022064:	e168      	b.n	8022338 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8022066:	4b8c      	ldr	r3, [pc, #560]	@ (8022298 <HAL_RCC_OscConfig+0x784>)
 8022068:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 802206c:	f003 0302 	and.w	r3, r3, #2
 8022070:	2b00      	cmp	r3, #0
 8022072:	d0ed      	beq.n	8022050 <HAL_RCC_OscConfig+0x53c>
 8022074:	e015      	b.n	80220a2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8022076:	f7ff fb97 	bl	80217a8 <HAL_GetTick>
 802207a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 802207c:	e00a      	b.n	8022094 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 802207e:	f7ff fb93 	bl	80217a8 <HAL_GetTick>
 8022082:	4602      	mov	r2, r0
 8022084:	693b      	ldr	r3, [r7, #16]
 8022086:	1ad3      	subs	r3, r2, r3
 8022088:	f241 3288 	movw	r2, #5000	@ 0x1388
 802208c:	4293      	cmp	r3, r2
 802208e:	d901      	bls.n	8022094 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8022090:	2303      	movs	r3, #3
 8022092:	e151      	b.n	8022338 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8022094:	4b80      	ldr	r3, [pc, #512]	@ (8022298 <HAL_RCC_OscConfig+0x784>)
 8022096:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 802209a:	f003 0302 	and.w	r3, r3, #2
 802209e:	2b00      	cmp	r3, #0
 80220a0:	d1ed      	bne.n	802207e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80220a2:	7ffb      	ldrb	r3, [r7, #31]
 80220a4:	2b01      	cmp	r3, #1
 80220a6:	d105      	bne.n	80220b4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80220a8:	4b7b      	ldr	r3, [pc, #492]	@ (8022298 <HAL_RCC_OscConfig+0x784>)
 80220aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80220ac:	4a7a      	ldr	r2, [pc, #488]	@ (8022298 <HAL_RCC_OscConfig+0x784>)
 80220ae:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80220b2:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80220b4:	687b      	ldr	r3, [r7, #4]
 80220b6:	681b      	ldr	r3, [r3, #0]
 80220b8:	f003 0320 	and.w	r3, r3, #32
 80220bc:	2b00      	cmp	r3, #0
 80220be:	d03c      	beq.n	802213a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80220c0:	687b      	ldr	r3, [r7, #4]
 80220c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80220c4:	2b00      	cmp	r3, #0
 80220c6:	d01c      	beq.n	8022102 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80220c8:	4b73      	ldr	r3, [pc, #460]	@ (8022298 <HAL_RCC_OscConfig+0x784>)
 80220ca:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80220ce:	4a72      	ldr	r2, [pc, #456]	@ (8022298 <HAL_RCC_OscConfig+0x784>)
 80220d0:	f043 0301 	orr.w	r3, r3, #1
 80220d4:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80220d8:	f7ff fb66 	bl	80217a8 <HAL_GetTick>
 80220dc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80220de:	e008      	b.n	80220f2 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80220e0:	f7ff fb62 	bl	80217a8 <HAL_GetTick>
 80220e4:	4602      	mov	r2, r0
 80220e6:	693b      	ldr	r3, [r7, #16]
 80220e8:	1ad3      	subs	r3, r2, r3
 80220ea:	2b02      	cmp	r3, #2
 80220ec:	d901      	bls.n	80220f2 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80220ee:	2303      	movs	r3, #3
 80220f0:	e122      	b.n	8022338 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80220f2:	4b69      	ldr	r3, [pc, #420]	@ (8022298 <HAL_RCC_OscConfig+0x784>)
 80220f4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80220f8:	f003 0302 	and.w	r3, r3, #2
 80220fc:	2b00      	cmp	r3, #0
 80220fe:	d0ef      	beq.n	80220e0 <HAL_RCC_OscConfig+0x5cc>
 8022100:	e01b      	b.n	802213a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8022102:	4b65      	ldr	r3, [pc, #404]	@ (8022298 <HAL_RCC_OscConfig+0x784>)
 8022104:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8022108:	4a63      	ldr	r2, [pc, #396]	@ (8022298 <HAL_RCC_OscConfig+0x784>)
 802210a:	f023 0301 	bic.w	r3, r3, #1
 802210e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8022112:	f7ff fb49 	bl	80217a8 <HAL_GetTick>
 8022116:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8022118:	e008      	b.n	802212c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 802211a:	f7ff fb45 	bl	80217a8 <HAL_GetTick>
 802211e:	4602      	mov	r2, r0
 8022120:	693b      	ldr	r3, [r7, #16]
 8022122:	1ad3      	subs	r3, r2, r3
 8022124:	2b02      	cmp	r3, #2
 8022126:	d901      	bls.n	802212c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8022128:	2303      	movs	r3, #3
 802212a:	e105      	b.n	8022338 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 802212c:	4b5a      	ldr	r3, [pc, #360]	@ (8022298 <HAL_RCC_OscConfig+0x784>)
 802212e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8022132:	f003 0302 	and.w	r3, r3, #2
 8022136:	2b00      	cmp	r3, #0
 8022138:	d1ef      	bne.n	802211a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 802213a:	687b      	ldr	r3, [r7, #4]
 802213c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 802213e:	2b00      	cmp	r3, #0
 8022140:	f000 80f9 	beq.w	8022336 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8022144:	687b      	ldr	r3, [r7, #4]
 8022146:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8022148:	2b02      	cmp	r3, #2
 802214a:	f040 80cf 	bne.w	80222ec <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 802214e:	4b52      	ldr	r3, [pc, #328]	@ (8022298 <HAL_RCC_OscConfig+0x784>)
 8022150:	68db      	ldr	r3, [r3, #12]
 8022152:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8022154:	697b      	ldr	r3, [r7, #20]
 8022156:	f003 0203 	and.w	r2, r3, #3
 802215a:	687b      	ldr	r3, [r7, #4]
 802215c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 802215e:	429a      	cmp	r2, r3
 8022160:	d12c      	bne.n	80221bc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8022162:	697b      	ldr	r3, [r7, #20]
 8022164:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8022168:	687b      	ldr	r3, [r7, #4]
 802216a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 802216c:	3b01      	subs	r3, #1
 802216e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8022170:	429a      	cmp	r2, r3
 8022172:	d123      	bne.n	80221bc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8022174:	697b      	ldr	r3, [r7, #20]
 8022176:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 802217a:	687b      	ldr	r3, [r7, #4]
 802217c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 802217e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8022180:	429a      	cmp	r2, r3
 8022182:	d11b      	bne.n	80221bc <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8022184:	697b      	ldr	r3, [r7, #20]
 8022186:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 802218a:	687b      	ldr	r3, [r7, #4]
 802218c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 802218e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8022190:	429a      	cmp	r2, r3
 8022192:	d113      	bne.n	80221bc <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8022194:	697b      	ldr	r3, [r7, #20]
 8022196:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 802219a:	687b      	ldr	r3, [r7, #4]
 802219c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 802219e:	085b      	lsrs	r3, r3, #1
 80221a0:	3b01      	subs	r3, #1
 80221a2:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80221a4:	429a      	cmp	r2, r3
 80221a6:	d109      	bne.n	80221bc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80221a8:	697b      	ldr	r3, [r7, #20]
 80221aa:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80221ae:	687b      	ldr	r3, [r7, #4]
 80221b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80221b2:	085b      	lsrs	r3, r3, #1
 80221b4:	3b01      	subs	r3, #1
 80221b6:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80221b8:	429a      	cmp	r2, r3
 80221ba:	d071      	beq.n	80222a0 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80221bc:	69bb      	ldr	r3, [r7, #24]
 80221be:	2b0c      	cmp	r3, #12
 80221c0:	d068      	beq.n	8022294 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80221c2:	4b35      	ldr	r3, [pc, #212]	@ (8022298 <HAL_RCC_OscConfig+0x784>)
 80221c4:	681b      	ldr	r3, [r3, #0]
 80221c6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80221ca:	2b00      	cmp	r3, #0
 80221cc:	d105      	bne.n	80221da <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80221ce:	4b32      	ldr	r3, [pc, #200]	@ (8022298 <HAL_RCC_OscConfig+0x784>)
 80221d0:	681b      	ldr	r3, [r3, #0]
 80221d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80221d6:	2b00      	cmp	r3, #0
 80221d8:	d001      	beq.n	80221de <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 80221da:	2301      	movs	r3, #1
 80221dc:	e0ac      	b.n	8022338 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80221de:	4b2e      	ldr	r3, [pc, #184]	@ (8022298 <HAL_RCC_OscConfig+0x784>)
 80221e0:	681b      	ldr	r3, [r3, #0]
 80221e2:	4a2d      	ldr	r2, [pc, #180]	@ (8022298 <HAL_RCC_OscConfig+0x784>)
 80221e4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80221e8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80221ea:	f7ff fadd 	bl	80217a8 <HAL_GetTick>
 80221ee:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80221f0:	e008      	b.n	8022204 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80221f2:	f7ff fad9 	bl	80217a8 <HAL_GetTick>
 80221f6:	4602      	mov	r2, r0
 80221f8:	693b      	ldr	r3, [r7, #16]
 80221fa:	1ad3      	subs	r3, r2, r3
 80221fc:	2b02      	cmp	r3, #2
 80221fe:	d901      	bls.n	8022204 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8022200:	2303      	movs	r3, #3
 8022202:	e099      	b.n	8022338 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8022204:	4b24      	ldr	r3, [pc, #144]	@ (8022298 <HAL_RCC_OscConfig+0x784>)
 8022206:	681b      	ldr	r3, [r3, #0]
 8022208:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 802220c:	2b00      	cmp	r3, #0
 802220e:	d1f0      	bne.n	80221f2 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8022210:	4b21      	ldr	r3, [pc, #132]	@ (8022298 <HAL_RCC_OscConfig+0x784>)
 8022212:	68da      	ldr	r2, [r3, #12]
 8022214:	4b21      	ldr	r3, [pc, #132]	@ (802229c <HAL_RCC_OscConfig+0x788>)
 8022216:	4013      	ands	r3, r2
 8022218:	687a      	ldr	r2, [r7, #4]
 802221a:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 802221c:	687a      	ldr	r2, [r7, #4]
 802221e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8022220:	3a01      	subs	r2, #1
 8022222:	0112      	lsls	r2, r2, #4
 8022224:	4311      	orrs	r1, r2
 8022226:	687a      	ldr	r2, [r7, #4]
 8022228:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 802222a:	0212      	lsls	r2, r2, #8
 802222c:	4311      	orrs	r1, r2
 802222e:	687a      	ldr	r2, [r7, #4]
 8022230:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8022232:	0852      	lsrs	r2, r2, #1
 8022234:	3a01      	subs	r2, #1
 8022236:	0552      	lsls	r2, r2, #21
 8022238:	4311      	orrs	r1, r2
 802223a:	687a      	ldr	r2, [r7, #4]
 802223c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 802223e:	0852      	lsrs	r2, r2, #1
 8022240:	3a01      	subs	r2, #1
 8022242:	0652      	lsls	r2, r2, #25
 8022244:	4311      	orrs	r1, r2
 8022246:	687a      	ldr	r2, [r7, #4]
 8022248:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 802224a:	06d2      	lsls	r2, r2, #27
 802224c:	430a      	orrs	r2, r1
 802224e:	4912      	ldr	r1, [pc, #72]	@ (8022298 <HAL_RCC_OscConfig+0x784>)
 8022250:	4313      	orrs	r3, r2
 8022252:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8022254:	4b10      	ldr	r3, [pc, #64]	@ (8022298 <HAL_RCC_OscConfig+0x784>)
 8022256:	681b      	ldr	r3, [r3, #0]
 8022258:	4a0f      	ldr	r2, [pc, #60]	@ (8022298 <HAL_RCC_OscConfig+0x784>)
 802225a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 802225e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8022260:	4b0d      	ldr	r3, [pc, #52]	@ (8022298 <HAL_RCC_OscConfig+0x784>)
 8022262:	68db      	ldr	r3, [r3, #12]
 8022264:	4a0c      	ldr	r2, [pc, #48]	@ (8022298 <HAL_RCC_OscConfig+0x784>)
 8022266:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 802226a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 802226c:	f7ff fa9c 	bl	80217a8 <HAL_GetTick>
 8022270:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8022272:	e008      	b.n	8022286 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8022274:	f7ff fa98 	bl	80217a8 <HAL_GetTick>
 8022278:	4602      	mov	r2, r0
 802227a:	693b      	ldr	r3, [r7, #16]
 802227c:	1ad3      	subs	r3, r2, r3
 802227e:	2b02      	cmp	r3, #2
 8022280:	d901      	bls.n	8022286 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8022282:	2303      	movs	r3, #3
 8022284:	e058      	b.n	8022338 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8022286:	4b04      	ldr	r3, [pc, #16]	@ (8022298 <HAL_RCC_OscConfig+0x784>)
 8022288:	681b      	ldr	r3, [r3, #0]
 802228a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 802228e:	2b00      	cmp	r3, #0
 8022290:	d0f0      	beq.n	8022274 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8022292:	e050      	b.n	8022336 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8022294:	2301      	movs	r3, #1
 8022296:	e04f      	b.n	8022338 <HAL_RCC_OscConfig+0x824>
 8022298:	40021000 	.word	0x40021000
 802229c:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80222a0:	4b27      	ldr	r3, [pc, #156]	@ (8022340 <HAL_RCC_OscConfig+0x82c>)
 80222a2:	681b      	ldr	r3, [r3, #0]
 80222a4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80222a8:	2b00      	cmp	r3, #0
 80222aa:	d144      	bne.n	8022336 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80222ac:	4b24      	ldr	r3, [pc, #144]	@ (8022340 <HAL_RCC_OscConfig+0x82c>)
 80222ae:	681b      	ldr	r3, [r3, #0]
 80222b0:	4a23      	ldr	r2, [pc, #140]	@ (8022340 <HAL_RCC_OscConfig+0x82c>)
 80222b2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80222b6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80222b8:	4b21      	ldr	r3, [pc, #132]	@ (8022340 <HAL_RCC_OscConfig+0x82c>)
 80222ba:	68db      	ldr	r3, [r3, #12]
 80222bc:	4a20      	ldr	r2, [pc, #128]	@ (8022340 <HAL_RCC_OscConfig+0x82c>)
 80222be:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80222c2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80222c4:	f7ff fa70 	bl	80217a8 <HAL_GetTick>
 80222c8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80222ca:	e008      	b.n	80222de <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80222cc:	f7ff fa6c 	bl	80217a8 <HAL_GetTick>
 80222d0:	4602      	mov	r2, r0
 80222d2:	693b      	ldr	r3, [r7, #16]
 80222d4:	1ad3      	subs	r3, r2, r3
 80222d6:	2b02      	cmp	r3, #2
 80222d8:	d901      	bls.n	80222de <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 80222da:	2303      	movs	r3, #3
 80222dc:	e02c      	b.n	8022338 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80222de:	4b18      	ldr	r3, [pc, #96]	@ (8022340 <HAL_RCC_OscConfig+0x82c>)
 80222e0:	681b      	ldr	r3, [r3, #0]
 80222e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80222e6:	2b00      	cmp	r3, #0
 80222e8:	d0f0      	beq.n	80222cc <HAL_RCC_OscConfig+0x7b8>
 80222ea:	e024      	b.n	8022336 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80222ec:	69bb      	ldr	r3, [r7, #24]
 80222ee:	2b0c      	cmp	r3, #12
 80222f0:	d01f      	beq.n	8022332 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80222f2:	4b13      	ldr	r3, [pc, #76]	@ (8022340 <HAL_RCC_OscConfig+0x82c>)
 80222f4:	681b      	ldr	r3, [r3, #0]
 80222f6:	4a12      	ldr	r2, [pc, #72]	@ (8022340 <HAL_RCC_OscConfig+0x82c>)
 80222f8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80222fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80222fe:	f7ff fa53 	bl	80217a8 <HAL_GetTick>
 8022302:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8022304:	e008      	b.n	8022318 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8022306:	f7ff fa4f 	bl	80217a8 <HAL_GetTick>
 802230a:	4602      	mov	r2, r0
 802230c:	693b      	ldr	r3, [r7, #16]
 802230e:	1ad3      	subs	r3, r2, r3
 8022310:	2b02      	cmp	r3, #2
 8022312:	d901      	bls.n	8022318 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8022314:	2303      	movs	r3, #3
 8022316:	e00f      	b.n	8022338 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8022318:	4b09      	ldr	r3, [pc, #36]	@ (8022340 <HAL_RCC_OscConfig+0x82c>)
 802231a:	681b      	ldr	r3, [r3, #0]
 802231c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8022320:	2b00      	cmp	r3, #0
 8022322:	d1f0      	bne.n	8022306 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8022324:	4b06      	ldr	r3, [pc, #24]	@ (8022340 <HAL_RCC_OscConfig+0x82c>)
 8022326:	68da      	ldr	r2, [r3, #12]
 8022328:	4905      	ldr	r1, [pc, #20]	@ (8022340 <HAL_RCC_OscConfig+0x82c>)
 802232a:	4b06      	ldr	r3, [pc, #24]	@ (8022344 <HAL_RCC_OscConfig+0x830>)
 802232c:	4013      	ands	r3, r2
 802232e:	60cb      	str	r3, [r1, #12]
 8022330:	e001      	b.n	8022336 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8022332:	2301      	movs	r3, #1
 8022334:	e000      	b.n	8022338 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8022336:	2300      	movs	r3, #0
}
 8022338:	4618      	mov	r0, r3
 802233a:	3720      	adds	r7, #32
 802233c:	46bd      	mov	sp, r7
 802233e:	bd80      	pop	{r7, pc}
 8022340:	40021000 	.word	0x40021000
 8022344:	feeefffc 	.word	0xfeeefffc

08022348 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8022348:	b580      	push	{r7, lr}
 802234a:	b086      	sub	sp, #24
 802234c:	af00      	add	r7, sp, #0
 802234e:	6078      	str	r0, [r7, #4]
 8022350:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8022352:	2300      	movs	r3, #0
 8022354:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8022356:	687b      	ldr	r3, [r7, #4]
 8022358:	2b00      	cmp	r3, #0
 802235a:	d101      	bne.n	8022360 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 802235c:	2301      	movs	r3, #1
 802235e:	e11d      	b.n	802259c <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8022360:	4b90      	ldr	r3, [pc, #576]	@ (80225a4 <HAL_RCC_ClockConfig+0x25c>)
 8022362:	681b      	ldr	r3, [r3, #0]
 8022364:	f003 030f 	and.w	r3, r3, #15
 8022368:	683a      	ldr	r2, [r7, #0]
 802236a:	429a      	cmp	r2, r3
 802236c:	d910      	bls.n	8022390 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 802236e:	4b8d      	ldr	r3, [pc, #564]	@ (80225a4 <HAL_RCC_ClockConfig+0x25c>)
 8022370:	681b      	ldr	r3, [r3, #0]
 8022372:	f023 020f 	bic.w	r2, r3, #15
 8022376:	498b      	ldr	r1, [pc, #556]	@ (80225a4 <HAL_RCC_ClockConfig+0x25c>)
 8022378:	683b      	ldr	r3, [r7, #0]
 802237a:	4313      	orrs	r3, r2
 802237c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 802237e:	4b89      	ldr	r3, [pc, #548]	@ (80225a4 <HAL_RCC_ClockConfig+0x25c>)
 8022380:	681b      	ldr	r3, [r3, #0]
 8022382:	f003 030f 	and.w	r3, r3, #15
 8022386:	683a      	ldr	r2, [r7, #0]
 8022388:	429a      	cmp	r2, r3
 802238a:	d001      	beq.n	8022390 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 802238c:	2301      	movs	r3, #1
 802238e:	e105      	b.n	802259c <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8022390:	687b      	ldr	r3, [r7, #4]
 8022392:	681b      	ldr	r3, [r3, #0]
 8022394:	f003 0302 	and.w	r3, r3, #2
 8022398:	2b00      	cmp	r3, #0
 802239a:	d010      	beq.n	80223be <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 802239c:	687b      	ldr	r3, [r7, #4]
 802239e:	689a      	ldr	r2, [r3, #8]
 80223a0:	4b81      	ldr	r3, [pc, #516]	@ (80225a8 <HAL_RCC_ClockConfig+0x260>)
 80223a2:	689b      	ldr	r3, [r3, #8]
 80223a4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80223a8:	429a      	cmp	r2, r3
 80223aa:	d908      	bls.n	80223be <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80223ac:	4b7e      	ldr	r3, [pc, #504]	@ (80225a8 <HAL_RCC_ClockConfig+0x260>)
 80223ae:	689b      	ldr	r3, [r3, #8]
 80223b0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80223b4:	687b      	ldr	r3, [r7, #4]
 80223b6:	689b      	ldr	r3, [r3, #8]
 80223b8:	497b      	ldr	r1, [pc, #492]	@ (80225a8 <HAL_RCC_ClockConfig+0x260>)
 80223ba:	4313      	orrs	r3, r2
 80223bc:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80223be:	687b      	ldr	r3, [r7, #4]
 80223c0:	681b      	ldr	r3, [r3, #0]
 80223c2:	f003 0301 	and.w	r3, r3, #1
 80223c6:	2b00      	cmp	r3, #0
 80223c8:	d079      	beq.n	80224be <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80223ca:	687b      	ldr	r3, [r7, #4]
 80223cc:	685b      	ldr	r3, [r3, #4]
 80223ce:	2b03      	cmp	r3, #3
 80223d0:	d11e      	bne.n	8022410 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80223d2:	4b75      	ldr	r3, [pc, #468]	@ (80225a8 <HAL_RCC_ClockConfig+0x260>)
 80223d4:	681b      	ldr	r3, [r3, #0]
 80223d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80223da:	2b00      	cmp	r3, #0
 80223dc:	d101      	bne.n	80223e2 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 80223de:	2301      	movs	r3, #1
 80223e0:	e0dc      	b.n	802259c <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 80223e2:	f000 f9d1 	bl	8022788 <RCC_GetSysClockFreqFromPLLSource>
 80223e6:	4603      	mov	r3, r0
 80223e8:	4a70      	ldr	r2, [pc, #448]	@ (80225ac <HAL_RCC_ClockConfig+0x264>)
 80223ea:	4293      	cmp	r3, r2
 80223ec:	d946      	bls.n	802247c <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80223ee:	4b6e      	ldr	r3, [pc, #440]	@ (80225a8 <HAL_RCC_ClockConfig+0x260>)
 80223f0:	689b      	ldr	r3, [r3, #8]
 80223f2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80223f6:	2b00      	cmp	r3, #0
 80223f8:	d140      	bne.n	802247c <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80223fa:	4b6b      	ldr	r3, [pc, #428]	@ (80225a8 <HAL_RCC_ClockConfig+0x260>)
 80223fc:	689b      	ldr	r3, [r3, #8]
 80223fe:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8022402:	4a69      	ldr	r2, [pc, #420]	@ (80225a8 <HAL_RCC_ClockConfig+0x260>)
 8022404:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8022408:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 802240a:	2380      	movs	r3, #128	@ 0x80
 802240c:	617b      	str	r3, [r7, #20]
 802240e:	e035      	b.n	802247c <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8022410:	687b      	ldr	r3, [r7, #4]
 8022412:	685b      	ldr	r3, [r3, #4]
 8022414:	2b02      	cmp	r3, #2
 8022416:	d107      	bne.n	8022428 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8022418:	4b63      	ldr	r3, [pc, #396]	@ (80225a8 <HAL_RCC_ClockConfig+0x260>)
 802241a:	681b      	ldr	r3, [r3, #0]
 802241c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8022420:	2b00      	cmp	r3, #0
 8022422:	d115      	bne.n	8022450 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8022424:	2301      	movs	r3, #1
 8022426:	e0b9      	b.n	802259c <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8022428:	687b      	ldr	r3, [r7, #4]
 802242a:	685b      	ldr	r3, [r3, #4]
 802242c:	2b00      	cmp	r3, #0
 802242e:	d107      	bne.n	8022440 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8022430:	4b5d      	ldr	r3, [pc, #372]	@ (80225a8 <HAL_RCC_ClockConfig+0x260>)
 8022432:	681b      	ldr	r3, [r3, #0]
 8022434:	f003 0302 	and.w	r3, r3, #2
 8022438:	2b00      	cmp	r3, #0
 802243a:	d109      	bne.n	8022450 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 802243c:	2301      	movs	r3, #1
 802243e:	e0ad      	b.n	802259c <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8022440:	4b59      	ldr	r3, [pc, #356]	@ (80225a8 <HAL_RCC_ClockConfig+0x260>)
 8022442:	681b      	ldr	r3, [r3, #0]
 8022444:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8022448:	2b00      	cmp	r3, #0
 802244a:	d101      	bne.n	8022450 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 802244c:	2301      	movs	r3, #1
 802244e:	e0a5      	b.n	802259c <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8022450:	f000 f8b4 	bl	80225bc <HAL_RCC_GetSysClockFreq>
 8022454:	4603      	mov	r3, r0
 8022456:	4a55      	ldr	r2, [pc, #340]	@ (80225ac <HAL_RCC_ClockConfig+0x264>)
 8022458:	4293      	cmp	r3, r2
 802245a:	d90f      	bls.n	802247c <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 802245c:	4b52      	ldr	r3, [pc, #328]	@ (80225a8 <HAL_RCC_ClockConfig+0x260>)
 802245e:	689b      	ldr	r3, [r3, #8]
 8022460:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8022464:	2b00      	cmp	r3, #0
 8022466:	d109      	bne.n	802247c <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8022468:	4b4f      	ldr	r3, [pc, #316]	@ (80225a8 <HAL_RCC_ClockConfig+0x260>)
 802246a:	689b      	ldr	r3, [r3, #8]
 802246c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8022470:	4a4d      	ldr	r2, [pc, #308]	@ (80225a8 <HAL_RCC_ClockConfig+0x260>)
 8022472:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8022476:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8022478:	2380      	movs	r3, #128	@ 0x80
 802247a:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 802247c:	4b4a      	ldr	r3, [pc, #296]	@ (80225a8 <HAL_RCC_ClockConfig+0x260>)
 802247e:	689b      	ldr	r3, [r3, #8]
 8022480:	f023 0203 	bic.w	r2, r3, #3
 8022484:	687b      	ldr	r3, [r7, #4]
 8022486:	685b      	ldr	r3, [r3, #4]
 8022488:	4947      	ldr	r1, [pc, #284]	@ (80225a8 <HAL_RCC_ClockConfig+0x260>)
 802248a:	4313      	orrs	r3, r2
 802248c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 802248e:	f7ff f98b 	bl	80217a8 <HAL_GetTick>
 8022492:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8022494:	e00a      	b.n	80224ac <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8022496:	f7ff f987 	bl	80217a8 <HAL_GetTick>
 802249a:	4602      	mov	r2, r0
 802249c:	693b      	ldr	r3, [r7, #16]
 802249e:	1ad3      	subs	r3, r2, r3
 80224a0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80224a4:	4293      	cmp	r3, r2
 80224a6:	d901      	bls.n	80224ac <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 80224a8:	2303      	movs	r3, #3
 80224aa:	e077      	b.n	802259c <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80224ac:	4b3e      	ldr	r3, [pc, #248]	@ (80225a8 <HAL_RCC_ClockConfig+0x260>)
 80224ae:	689b      	ldr	r3, [r3, #8]
 80224b0:	f003 020c 	and.w	r2, r3, #12
 80224b4:	687b      	ldr	r3, [r7, #4]
 80224b6:	685b      	ldr	r3, [r3, #4]
 80224b8:	009b      	lsls	r3, r3, #2
 80224ba:	429a      	cmp	r2, r3
 80224bc:	d1eb      	bne.n	8022496 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 80224be:	697b      	ldr	r3, [r7, #20]
 80224c0:	2b80      	cmp	r3, #128	@ 0x80
 80224c2:	d105      	bne.n	80224d0 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80224c4:	4b38      	ldr	r3, [pc, #224]	@ (80225a8 <HAL_RCC_ClockConfig+0x260>)
 80224c6:	689b      	ldr	r3, [r3, #8]
 80224c8:	4a37      	ldr	r2, [pc, #220]	@ (80225a8 <HAL_RCC_ClockConfig+0x260>)
 80224ca:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80224ce:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80224d0:	687b      	ldr	r3, [r7, #4]
 80224d2:	681b      	ldr	r3, [r3, #0]
 80224d4:	f003 0302 	and.w	r3, r3, #2
 80224d8:	2b00      	cmp	r3, #0
 80224da:	d010      	beq.n	80224fe <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80224dc:	687b      	ldr	r3, [r7, #4]
 80224de:	689a      	ldr	r2, [r3, #8]
 80224e0:	4b31      	ldr	r3, [pc, #196]	@ (80225a8 <HAL_RCC_ClockConfig+0x260>)
 80224e2:	689b      	ldr	r3, [r3, #8]
 80224e4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80224e8:	429a      	cmp	r2, r3
 80224ea:	d208      	bcs.n	80224fe <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80224ec:	4b2e      	ldr	r3, [pc, #184]	@ (80225a8 <HAL_RCC_ClockConfig+0x260>)
 80224ee:	689b      	ldr	r3, [r3, #8]
 80224f0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80224f4:	687b      	ldr	r3, [r7, #4]
 80224f6:	689b      	ldr	r3, [r3, #8]
 80224f8:	492b      	ldr	r1, [pc, #172]	@ (80225a8 <HAL_RCC_ClockConfig+0x260>)
 80224fa:	4313      	orrs	r3, r2
 80224fc:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80224fe:	4b29      	ldr	r3, [pc, #164]	@ (80225a4 <HAL_RCC_ClockConfig+0x25c>)
 8022500:	681b      	ldr	r3, [r3, #0]
 8022502:	f003 030f 	and.w	r3, r3, #15
 8022506:	683a      	ldr	r2, [r7, #0]
 8022508:	429a      	cmp	r2, r3
 802250a:	d210      	bcs.n	802252e <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 802250c:	4b25      	ldr	r3, [pc, #148]	@ (80225a4 <HAL_RCC_ClockConfig+0x25c>)
 802250e:	681b      	ldr	r3, [r3, #0]
 8022510:	f023 020f 	bic.w	r2, r3, #15
 8022514:	4923      	ldr	r1, [pc, #140]	@ (80225a4 <HAL_RCC_ClockConfig+0x25c>)
 8022516:	683b      	ldr	r3, [r7, #0]
 8022518:	4313      	orrs	r3, r2
 802251a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 802251c:	4b21      	ldr	r3, [pc, #132]	@ (80225a4 <HAL_RCC_ClockConfig+0x25c>)
 802251e:	681b      	ldr	r3, [r3, #0]
 8022520:	f003 030f 	and.w	r3, r3, #15
 8022524:	683a      	ldr	r2, [r7, #0]
 8022526:	429a      	cmp	r2, r3
 8022528:	d001      	beq.n	802252e <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 802252a:	2301      	movs	r3, #1
 802252c:	e036      	b.n	802259c <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 802252e:	687b      	ldr	r3, [r7, #4]
 8022530:	681b      	ldr	r3, [r3, #0]
 8022532:	f003 0304 	and.w	r3, r3, #4
 8022536:	2b00      	cmp	r3, #0
 8022538:	d008      	beq.n	802254c <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 802253a:	4b1b      	ldr	r3, [pc, #108]	@ (80225a8 <HAL_RCC_ClockConfig+0x260>)
 802253c:	689b      	ldr	r3, [r3, #8]
 802253e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8022542:	687b      	ldr	r3, [r7, #4]
 8022544:	68db      	ldr	r3, [r3, #12]
 8022546:	4918      	ldr	r1, [pc, #96]	@ (80225a8 <HAL_RCC_ClockConfig+0x260>)
 8022548:	4313      	orrs	r3, r2
 802254a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 802254c:	687b      	ldr	r3, [r7, #4]
 802254e:	681b      	ldr	r3, [r3, #0]
 8022550:	f003 0308 	and.w	r3, r3, #8
 8022554:	2b00      	cmp	r3, #0
 8022556:	d009      	beq.n	802256c <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8022558:	4b13      	ldr	r3, [pc, #76]	@ (80225a8 <HAL_RCC_ClockConfig+0x260>)
 802255a:	689b      	ldr	r3, [r3, #8]
 802255c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8022560:	687b      	ldr	r3, [r7, #4]
 8022562:	691b      	ldr	r3, [r3, #16]
 8022564:	00db      	lsls	r3, r3, #3
 8022566:	4910      	ldr	r1, [pc, #64]	@ (80225a8 <HAL_RCC_ClockConfig+0x260>)
 8022568:	4313      	orrs	r3, r2
 802256a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 802256c:	f000 f826 	bl	80225bc <HAL_RCC_GetSysClockFreq>
 8022570:	4602      	mov	r2, r0
 8022572:	4b0d      	ldr	r3, [pc, #52]	@ (80225a8 <HAL_RCC_ClockConfig+0x260>)
 8022574:	689b      	ldr	r3, [r3, #8]
 8022576:	091b      	lsrs	r3, r3, #4
 8022578:	f003 030f 	and.w	r3, r3, #15
 802257c:	490c      	ldr	r1, [pc, #48]	@ (80225b0 <HAL_RCC_ClockConfig+0x268>)
 802257e:	5ccb      	ldrb	r3, [r1, r3]
 8022580:	f003 031f 	and.w	r3, r3, #31
 8022584:	fa22 f303 	lsr.w	r3, r2, r3
 8022588:	4a0a      	ldr	r2, [pc, #40]	@ (80225b4 <HAL_RCC_ClockConfig+0x26c>)
 802258a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 802258c:	4b0a      	ldr	r3, [pc, #40]	@ (80225b8 <HAL_RCC_ClockConfig+0x270>)
 802258e:	681b      	ldr	r3, [r3, #0]
 8022590:	4618      	mov	r0, r3
 8022592:	f7ff f8b9 	bl	8021708 <HAL_InitTick>
 8022596:	4603      	mov	r3, r0
 8022598:	73fb      	strb	r3, [r7, #15]

  return status;
 802259a:	7bfb      	ldrb	r3, [r7, #15]
}
 802259c:	4618      	mov	r0, r3
 802259e:	3718      	adds	r7, #24
 80225a0:	46bd      	mov	sp, r7
 80225a2:	bd80      	pop	{r7, pc}
 80225a4:	40022000 	.word	0x40022000
 80225a8:	40021000 	.word	0x40021000
 80225ac:	04c4b400 	.word	0x04c4b400
 80225b0:	08024824 	.word	0x08024824
 80225b4:	20000000 	.word	0x20000000
 80225b8:	20000004 	.word	0x20000004

080225bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80225bc:	b480      	push	{r7}
 80225be:	b089      	sub	sp, #36	@ 0x24
 80225c0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80225c2:	2300      	movs	r3, #0
 80225c4:	61fb      	str	r3, [r7, #28]
 80225c6:	2300      	movs	r3, #0
 80225c8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80225ca:	4b3e      	ldr	r3, [pc, #248]	@ (80226c4 <HAL_RCC_GetSysClockFreq+0x108>)
 80225cc:	689b      	ldr	r3, [r3, #8]
 80225ce:	f003 030c 	and.w	r3, r3, #12
 80225d2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80225d4:	4b3b      	ldr	r3, [pc, #236]	@ (80226c4 <HAL_RCC_GetSysClockFreq+0x108>)
 80225d6:	68db      	ldr	r3, [r3, #12]
 80225d8:	f003 0303 	and.w	r3, r3, #3
 80225dc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80225de:	693b      	ldr	r3, [r7, #16]
 80225e0:	2b00      	cmp	r3, #0
 80225e2:	d005      	beq.n	80225f0 <HAL_RCC_GetSysClockFreq+0x34>
 80225e4:	693b      	ldr	r3, [r7, #16]
 80225e6:	2b0c      	cmp	r3, #12
 80225e8:	d121      	bne.n	802262e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80225ea:	68fb      	ldr	r3, [r7, #12]
 80225ec:	2b01      	cmp	r3, #1
 80225ee:	d11e      	bne.n	802262e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80225f0:	4b34      	ldr	r3, [pc, #208]	@ (80226c4 <HAL_RCC_GetSysClockFreq+0x108>)
 80225f2:	681b      	ldr	r3, [r3, #0]
 80225f4:	f003 0308 	and.w	r3, r3, #8
 80225f8:	2b00      	cmp	r3, #0
 80225fa:	d107      	bne.n	802260c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80225fc:	4b31      	ldr	r3, [pc, #196]	@ (80226c4 <HAL_RCC_GetSysClockFreq+0x108>)
 80225fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8022602:	0a1b      	lsrs	r3, r3, #8
 8022604:	f003 030f 	and.w	r3, r3, #15
 8022608:	61fb      	str	r3, [r7, #28]
 802260a:	e005      	b.n	8022618 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 802260c:	4b2d      	ldr	r3, [pc, #180]	@ (80226c4 <HAL_RCC_GetSysClockFreq+0x108>)
 802260e:	681b      	ldr	r3, [r3, #0]
 8022610:	091b      	lsrs	r3, r3, #4
 8022612:	f003 030f 	and.w	r3, r3, #15
 8022616:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8022618:	4a2b      	ldr	r2, [pc, #172]	@ (80226c8 <HAL_RCC_GetSysClockFreq+0x10c>)
 802261a:	69fb      	ldr	r3, [r7, #28]
 802261c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8022620:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8022622:	693b      	ldr	r3, [r7, #16]
 8022624:	2b00      	cmp	r3, #0
 8022626:	d10d      	bne.n	8022644 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8022628:	69fb      	ldr	r3, [r7, #28]
 802262a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 802262c:	e00a      	b.n	8022644 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 802262e:	693b      	ldr	r3, [r7, #16]
 8022630:	2b04      	cmp	r3, #4
 8022632:	d102      	bne.n	802263a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8022634:	4b25      	ldr	r3, [pc, #148]	@ (80226cc <HAL_RCC_GetSysClockFreq+0x110>)
 8022636:	61bb      	str	r3, [r7, #24]
 8022638:	e004      	b.n	8022644 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 802263a:	693b      	ldr	r3, [r7, #16]
 802263c:	2b08      	cmp	r3, #8
 802263e:	d101      	bne.n	8022644 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8022640:	4b23      	ldr	r3, [pc, #140]	@ (80226d0 <HAL_RCC_GetSysClockFreq+0x114>)
 8022642:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8022644:	693b      	ldr	r3, [r7, #16]
 8022646:	2b0c      	cmp	r3, #12
 8022648:	d134      	bne.n	80226b4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 802264a:	4b1e      	ldr	r3, [pc, #120]	@ (80226c4 <HAL_RCC_GetSysClockFreq+0x108>)
 802264c:	68db      	ldr	r3, [r3, #12]
 802264e:	f003 0303 	and.w	r3, r3, #3
 8022652:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8022654:	68bb      	ldr	r3, [r7, #8]
 8022656:	2b02      	cmp	r3, #2
 8022658:	d003      	beq.n	8022662 <HAL_RCC_GetSysClockFreq+0xa6>
 802265a:	68bb      	ldr	r3, [r7, #8]
 802265c:	2b03      	cmp	r3, #3
 802265e:	d003      	beq.n	8022668 <HAL_RCC_GetSysClockFreq+0xac>
 8022660:	e005      	b.n	802266e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8022662:	4b1a      	ldr	r3, [pc, #104]	@ (80226cc <HAL_RCC_GetSysClockFreq+0x110>)
 8022664:	617b      	str	r3, [r7, #20]
      break;
 8022666:	e005      	b.n	8022674 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8022668:	4b19      	ldr	r3, [pc, #100]	@ (80226d0 <HAL_RCC_GetSysClockFreq+0x114>)
 802266a:	617b      	str	r3, [r7, #20]
      break;
 802266c:	e002      	b.n	8022674 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 802266e:	69fb      	ldr	r3, [r7, #28]
 8022670:	617b      	str	r3, [r7, #20]
      break;
 8022672:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8022674:	4b13      	ldr	r3, [pc, #76]	@ (80226c4 <HAL_RCC_GetSysClockFreq+0x108>)
 8022676:	68db      	ldr	r3, [r3, #12]
 8022678:	091b      	lsrs	r3, r3, #4
 802267a:	f003 030f 	and.w	r3, r3, #15
 802267e:	3301      	adds	r3, #1
 8022680:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8022682:	4b10      	ldr	r3, [pc, #64]	@ (80226c4 <HAL_RCC_GetSysClockFreq+0x108>)
 8022684:	68db      	ldr	r3, [r3, #12]
 8022686:	0a1b      	lsrs	r3, r3, #8
 8022688:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 802268c:	697a      	ldr	r2, [r7, #20]
 802268e:	fb03 f202 	mul.w	r2, r3, r2
 8022692:	687b      	ldr	r3, [r7, #4]
 8022694:	fbb2 f3f3 	udiv	r3, r2, r3
 8022698:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 802269a:	4b0a      	ldr	r3, [pc, #40]	@ (80226c4 <HAL_RCC_GetSysClockFreq+0x108>)
 802269c:	68db      	ldr	r3, [r3, #12]
 802269e:	0e5b      	lsrs	r3, r3, #25
 80226a0:	f003 0303 	and.w	r3, r3, #3
 80226a4:	3301      	adds	r3, #1
 80226a6:	005b      	lsls	r3, r3, #1
 80226a8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80226aa:	697a      	ldr	r2, [r7, #20]
 80226ac:	683b      	ldr	r3, [r7, #0]
 80226ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80226b2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80226b4:	69bb      	ldr	r3, [r7, #24]
}
 80226b6:	4618      	mov	r0, r3
 80226b8:	3724      	adds	r7, #36	@ 0x24
 80226ba:	46bd      	mov	sp, r7
 80226bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80226c0:	4770      	bx	lr
 80226c2:	bf00      	nop
 80226c4:	40021000 	.word	0x40021000
 80226c8:	08024834 	.word	0x08024834
 80226cc:	00f42400 	.word	0x00f42400
 80226d0:	007a1200 	.word	0x007a1200

080226d4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80226d4:	b580      	push	{r7, lr}
 80226d6:	b086      	sub	sp, #24
 80226d8:	af00      	add	r7, sp, #0
 80226da:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80226dc:	2300      	movs	r3, #0
 80226de:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80226e0:	4b27      	ldr	r3, [pc, #156]	@ (8022780 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80226e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80226e4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80226e8:	2b00      	cmp	r3, #0
 80226ea:	d003      	beq.n	80226f4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80226ec:	f7ff f94e 	bl	802198c <HAL_PWREx_GetVoltageRange>
 80226f0:	6178      	str	r0, [r7, #20]
 80226f2:	e014      	b.n	802271e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80226f4:	4b22      	ldr	r3, [pc, #136]	@ (8022780 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80226f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80226f8:	4a21      	ldr	r2, [pc, #132]	@ (8022780 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80226fa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80226fe:	6593      	str	r3, [r2, #88]	@ 0x58
 8022700:	4b1f      	ldr	r3, [pc, #124]	@ (8022780 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8022702:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8022704:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8022708:	60fb      	str	r3, [r7, #12]
 802270a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 802270c:	f7ff f93e 	bl	802198c <HAL_PWREx_GetVoltageRange>
 8022710:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8022712:	4b1b      	ldr	r3, [pc, #108]	@ (8022780 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8022714:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8022716:	4a1a      	ldr	r2, [pc, #104]	@ (8022780 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8022718:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 802271c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 802271e:	697b      	ldr	r3, [r7, #20]
 8022720:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8022724:	d10b      	bne.n	802273e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8022726:	687b      	ldr	r3, [r7, #4]
 8022728:	2b80      	cmp	r3, #128	@ 0x80
 802272a:	d913      	bls.n	8022754 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 802272c:	687b      	ldr	r3, [r7, #4]
 802272e:	2ba0      	cmp	r3, #160	@ 0xa0
 8022730:	d902      	bls.n	8022738 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8022732:	2302      	movs	r3, #2
 8022734:	613b      	str	r3, [r7, #16]
 8022736:	e00d      	b.n	8022754 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8022738:	2301      	movs	r3, #1
 802273a:	613b      	str	r3, [r7, #16]
 802273c:	e00a      	b.n	8022754 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 802273e:	687b      	ldr	r3, [r7, #4]
 8022740:	2b7f      	cmp	r3, #127	@ 0x7f
 8022742:	d902      	bls.n	802274a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8022744:	2302      	movs	r3, #2
 8022746:	613b      	str	r3, [r7, #16]
 8022748:	e004      	b.n	8022754 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 802274a:	687b      	ldr	r3, [r7, #4]
 802274c:	2b70      	cmp	r3, #112	@ 0x70
 802274e:	d101      	bne.n	8022754 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8022750:	2301      	movs	r3, #1
 8022752:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8022754:	4b0b      	ldr	r3, [pc, #44]	@ (8022784 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8022756:	681b      	ldr	r3, [r3, #0]
 8022758:	f023 020f 	bic.w	r2, r3, #15
 802275c:	4909      	ldr	r1, [pc, #36]	@ (8022784 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 802275e:	693b      	ldr	r3, [r7, #16]
 8022760:	4313      	orrs	r3, r2
 8022762:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8022764:	4b07      	ldr	r3, [pc, #28]	@ (8022784 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8022766:	681b      	ldr	r3, [r3, #0]
 8022768:	f003 030f 	and.w	r3, r3, #15
 802276c:	693a      	ldr	r2, [r7, #16]
 802276e:	429a      	cmp	r2, r3
 8022770:	d001      	beq.n	8022776 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8022772:	2301      	movs	r3, #1
 8022774:	e000      	b.n	8022778 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8022776:	2300      	movs	r3, #0
}
 8022778:	4618      	mov	r0, r3
 802277a:	3718      	adds	r7, #24
 802277c:	46bd      	mov	sp, r7
 802277e:	bd80      	pop	{r7, pc}
 8022780:	40021000 	.word	0x40021000
 8022784:	40022000 	.word	0x40022000

08022788 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8022788:	b480      	push	{r7}
 802278a:	b087      	sub	sp, #28
 802278c:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 802278e:	4b2d      	ldr	r3, [pc, #180]	@ (8022844 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8022790:	68db      	ldr	r3, [r3, #12]
 8022792:	f003 0303 	and.w	r3, r3, #3
 8022796:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8022798:	68fb      	ldr	r3, [r7, #12]
 802279a:	2b03      	cmp	r3, #3
 802279c:	d00b      	beq.n	80227b6 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 802279e:	68fb      	ldr	r3, [r7, #12]
 80227a0:	2b03      	cmp	r3, #3
 80227a2:	d825      	bhi.n	80227f0 <RCC_GetSysClockFreqFromPLLSource+0x68>
 80227a4:	68fb      	ldr	r3, [r7, #12]
 80227a6:	2b01      	cmp	r3, #1
 80227a8:	d008      	beq.n	80227bc <RCC_GetSysClockFreqFromPLLSource+0x34>
 80227aa:	68fb      	ldr	r3, [r7, #12]
 80227ac:	2b02      	cmp	r3, #2
 80227ae:	d11f      	bne.n	80227f0 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 80227b0:	4b25      	ldr	r3, [pc, #148]	@ (8022848 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80227b2:	613b      	str	r3, [r7, #16]
    break;
 80227b4:	e01f      	b.n	80227f6 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 80227b6:	4b25      	ldr	r3, [pc, #148]	@ (802284c <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 80227b8:	613b      	str	r3, [r7, #16]
    break;
 80227ba:	e01c      	b.n	80227f6 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80227bc:	4b21      	ldr	r3, [pc, #132]	@ (8022844 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80227be:	681b      	ldr	r3, [r3, #0]
 80227c0:	f003 0308 	and.w	r3, r3, #8
 80227c4:	2b00      	cmp	r3, #0
 80227c6:	d107      	bne.n	80227d8 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80227c8:	4b1e      	ldr	r3, [pc, #120]	@ (8022844 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80227ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80227ce:	0a1b      	lsrs	r3, r3, #8
 80227d0:	f003 030f 	and.w	r3, r3, #15
 80227d4:	617b      	str	r3, [r7, #20]
 80227d6:	e005      	b.n	80227e4 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80227d8:	4b1a      	ldr	r3, [pc, #104]	@ (8022844 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80227da:	681b      	ldr	r3, [r3, #0]
 80227dc:	091b      	lsrs	r3, r3, #4
 80227de:	f003 030f 	and.w	r3, r3, #15
 80227e2:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 80227e4:	4a1a      	ldr	r2, [pc, #104]	@ (8022850 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 80227e6:	697b      	ldr	r3, [r7, #20]
 80227e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80227ec:	613b      	str	r3, [r7, #16]
    break;
 80227ee:	e002      	b.n	80227f6 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 80227f0:	2300      	movs	r3, #0
 80227f2:	613b      	str	r3, [r7, #16]
    break;
 80227f4:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80227f6:	4b13      	ldr	r3, [pc, #76]	@ (8022844 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80227f8:	68db      	ldr	r3, [r3, #12]
 80227fa:	091b      	lsrs	r3, r3, #4
 80227fc:	f003 030f 	and.w	r3, r3, #15
 8022800:	3301      	adds	r3, #1
 8022802:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8022804:	4b0f      	ldr	r3, [pc, #60]	@ (8022844 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8022806:	68db      	ldr	r3, [r3, #12]
 8022808:	0a1b      	lsrs	r3, r3, #8
 802280a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 802280e:	693a      	ldr	r2, [r7, #16]
 8022810:	fb03 f202 	mul.w	r2, r3, r2
 8022814:	68bb      	ldr	r3, [r7, #8]
 8022816:	fbb2 f3f3 	udiv	r3, r2, r3
 802281a:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 802281c:	4b09      	ldr	r3, [pc, #36]	@ (8022844 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 802281e:	68db      	ldr	r3, [r3, #12]
 8022820:	0e5b      	lsrs	r3, r3, #25
 8022822:	f003 0303 	and.w	r3, r3, #3
 8022826:	3301      	adds	r3, #1
 8022828:	005b      	lsls	r3, r3, #1
 802282a:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 802282c:	693a      	ldr	r2, [r7, #16]
 802282e:	687b      	ldr	r3, [r7, #4]
 8022830:	fbb2 f3f3 	udiv	r3, r2, r3
 8022834:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8022836:	683b      	ldr	r3, [r7, #0]
}
 8022838:	4618      	mov	r0, r3
 802283a:	371c      	adds	r7, #28
 802283c:	46bd      	mov	sp, r7
 802283e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022842:	4770      	bx	lr
 8022844:	40021000 	.word	0x40021000
 8022848:	00f42400 	.word	0x00f42400
 802284c:	007a1200 	.word	0x007a1200
 8022850:	08024834 	.word	0x08024834

08022854 <arm_std_f32>:
 8022854:	2901      	cmp	r1, #1
 8022856:	d97d      	bls.n	8022954 <arm_std_f32+0x100>
 8022858:	b530      	push	{r4, r5, lr}
 802285a:	ed2d 8b02 	vpush	{d8}
 802285e:	ed9f 7a41 	vldr	s14, [pc, #260]	@ 8022964 <arm_std_f32+0x110>
 8022862:	088d      	lsrs	r5, r1, #2
 8022864:	b083      	sub	sp, #12
 8022866:	eef0 4a47 	vmov.f32	s9, s14
 802286a:	d028      	beq.n	80228be <arm_std_f32+0x6a>
 802286c:	f100 0310 	add.w	r3, r0, #16
 8022870:	462c      	mov	r4, r5
 8022872:	ed53 7a04 	vldr	s15, [r3, #-16]
 8022876:	ed13 5a03 	vldr	s10, [r3, #-12]
 802287a:	ed53 5a02 	vldr	s11, [r3, #-8]
 802287e:	ed13 6a01 	vldr	s12, [r3, #-4]
 8022882:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8022886:	ee77 7aa4 	vadd.f32	s15, s15, s9
 802288a:	ee36 7a87 	vadd.f32	s14, s13, s14
 802288e:	ee65 6a05 	vmul.f32	s13, s10, s10
 8022892:	ee77 7a85 	vadd.f32	s15, s15, s10
 8022896:	ee76 6a87 	vadd.f32	s13, s13, s14
 802289a:	ee25 7aa5 	vmul.f32	s14, s11, s11
 802289e:	ee77 7aa5 	vadd.f32	s15, s15, s11
 80228a2:	ee77 6a26 	vadd.f32	s13, s14, s13
 80228a6:	ee26 7a06 	vmul.f32	s14, s12, s12
 80228aa:	3c01      	subs	r4, #1
 80228ac:	ee77 4a86 	vadd.f32	s9, s15, s12
 80228b0:	ee37 7a26 	vadd.f32	s14, s14, s13
 80228b4:	f103 0310 	add.w	r3, r3, #16
 80228b8:	d1db      	bne.n	8022872 <arm_std_f32+0x1e>
 80228ba:	eb00 1005 	add.w	r0, r0, r5, lsl #4
 80228be:	f011 0303 	ands.w	r3, r1, #3
 80228c2:	d01b      	beq.n	80228fc <arm_std_f32+0xa8>
 80228c4:	edd0 7a00 	vldr	s15, [r0]
 80228c8:	ee67 6aa7 	vmul.f32	s13, s15, s15
 80228cc:	3b01      	subs	r3, #1
 80228ce:	ee74 4aa7 	vadd.f32	s9, s9, s15
 80228d2:	ee37 7a26 	vadd.f32	s14, s14, s13
 80228d6:	d011      	beq.n	80228fc <arm_std_f32+0xa8>
 80228d8:	edd0 7a01 	vldr	s15, [r0, #4]
 80228dc:	ee67 6aa7 	vmul.f32	s13, s15, s15
 80228e0:	2b01      	cmp	r3, #1
 80228e2:	ee74 4aa7 	vadd.f32	s9, s9, s15
 80228e6:	ee37 7a26 	vadd.f32	s14, s14, s13
 80228ea:	d007      	beq.n	80228fc <arm_std_f32+0xa8>
 80228ec:	edd0 7a02 	vldr	s15, [r0, #8]
 80228f0:	ee67 6aa7 	vmul.f32	s13, s15, s15
 80228f4:	ee74 4aa7 	vadd.f32	s9, s9, s15
 80228f8:	ee37 7a26 	vadd.f32	s14, s14, s13
 80228fc:	ee07 1a90 	vmov	s15, r1
 8022900:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8022904:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 8022908:	ee37 6ac6 	vsub.f32	s12, s15, s12
 802290c:	eec4 6aa7 	vdiv.f32	s13, s9, s15
 8022910:	eec7 5a86 	vdiv.f32	s11, s15, s12
 8022914:	ee87 0a06 	vdiv.f32	s0, s14, s12
 8022918:	ee66 6aa6 	vmul.f32	s13, s13, s13
 802291c:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8022920:	ee30 0a66 	vsub.f32	s0, s0, s13
 8022924:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8022928:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802292c:	db0c      	blt.n	8022948 <arm_std_f32+0xf4>
 802292e:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8022932:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022936:	eeb1 8ac0 	vsqrt.f32	s16, s0
 802293a:	d40e      	bmi.n	802295a <arm_std_f32+0x106>
 802293c:	ed82 8a00 	vstr	s16, [r2]
 8022940:	b003      	add	sp, #12
 8022942:	ecbd 8b02 	vpop	{d8}
 8022946:	bd30      	pop	{r4, r5, pc}
 8022948:	2300      	movs	r3, #0
 802294a:	6013      	str	r3, [r2, #0]
 802294c:	b003      	add	sp, #12
 802294e:	ecbd 8b02 	vpop	{d8}
 8022952:	bd30      	pop	{r4, r5, pc}
 8022954:	2300      	movs	r3, #0
 8022956:	6013      	str	r3, [r2, #0]
 8022958:	4770      	bx	lr
 802295a:	9201      	str	r2, [sp, #4]
 802295c:	f000 ff66 	bl	802382c <sqrtf>
 8022960:	9a01      	ldr	r2, [sp, #4]
 8022962:	e7eb      	b.n	802293c <arm_std_f32+0xe8>
 8022964:	00000000 	.word	0x00000000

08022968 <arm_mean_f32>:
 8022968:	b430      	push	{r4, r5}
 802296a:	088d      	lsrs	r5, r1, #2
 802296c:	eddf 7a1c 	vldr	s15, [pc, #112]	@ 80229e0 <arm_mean_f32+0x78>
 8022970:	d018      	beq.n	80229a4 <arm_mean_f32+0x3c>
 8022972:	f100 0310 	add.w	r3, r0, #16
 8022976:	462c      	mov	r4, r5
 8022978:	ed53 5a04 	vldr	s11, [r3, #-16]
 802297c:	ed13 6a03 	vldr	s12, [r3, #-12]
 8022980:	ed53 6a02 	vldr	s13, [r3, #-8]
 8022984:	ed13 7a01 	vldr	s14, [r3, #-4]
 8022988:	ee77 7aa5 	vadd.f32	s15, s15, s11
 802298c:	3c01      	subs	r4, #1
 802298e:	ee77 7a86 	vadd.f32	s15, s15, s12
 8022992:	f103 0310 	add.w	r3, r3, #16
 8022996:	ee77 7aa6 	vadd.f32	s15, s15, s13
 802299a:	ee77 7a87 	vadd.f32	s15, s15, s14
 802299e:	d1eb      	bne.n	8022978 <arm_mean_f32+0x10>
 80229a0:	eb00 1005 	add.w	r0, r0, r5, lsl #4
 80229a4:	f011 0303 	ands.w	r3, r1, #3
 80229a8:	d00f      	beq.n	80229ca <arm_mean_f32+0x62>
 80229aa:	ed90 7a00 	vldr	s14, [r0]
 80229ae:	3b01      	subs	r3, #1
 80229b0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80229b4:	d009      	beq.n	80229ca <arm_mean_f32+0x62>
 80229b6:	ed90 7a01 	vldr	s14, [r0, #4]
 80229ba:	2b01      	cmp	r3, #1
 80229bc:	ee77 7a87 	vadd.f32	s15, s15, s14
 80229c0:	bf1c      	itt	ne
 80229c2:	ed90 7a02 	vldrne	s14, [r0, #8]
 80229c6:	ee77 7a87 	vaddne.f32	s15, s15, s14
 80229ca:	ee07 1a10 	vmov	s14, r1
 80229ce:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80229d2:	bc30      	pop	{r4, r5}
 80229d4:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80229d8:	edc2 6a00 	vstr	s13, [r2]
 80229dc:	4770      	bx	lr
 80229de:	bf00      	nop
 80229e0:	00000000 	.word	0x00000000

080229e4 <arm_correlate_f32>:
 80229e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80229e8:	4299      	cmp	r1, r3
 80229ea:	b08d      	sub	sp, #52	@ 0x34
 80229ec:	f0c0 824c 	bcc.w	8022e88 <arm_correlate_f32+0x4a4>
 80229f0:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 80229f2:	eba1 0c03 	sub.w	ip, r1, r3
 80229f6:	eb04 0c8c 	add.w	ip, r4, ip, lsl #2
 80229fa:	f04f 0e04 	mov.w	lr, #4
 80229fe:	f103 4480 	add.w	r4, r3, #1073741824	@ 0x40000000
 8022a02:	3101      	adds	r1, #1
 8022a04:	1ac9      	subs	r1, r1, r3
 8022a06:	3c01      	subs	r4, #1
 8022a08:	1e5e      	subs	r6, r3, #1
 8022a0a:	9102      	str	r1, [sp, #8]
 8022a0c:	eb02 0184 	add.w	r1, r2, r4, lsl #2
 8022a10:	f000 8294 	beq.w	8022f3c <arm_correlate_f32+0x558>
 8022a14:	eddf 7a53 	vldr	s15, [pc, #332]	@ 8022b64 <arm_correlate_f32+0x180>
 8022a18:	f1a1 0804 	sub.w	r8, r1, #4
 8022a1c:	46e1      	mov	r9, ip
 8022a1e:	4605      	mov	r5, r0
 8022a20:	2401      	movs	r4, #1
 8022a22:	f014 0703 	ands.w	r7, r4, #3
 8022a26:	d01b      	beq.n	8022a60 <arm_correlate_f32+0x7c>
 8022a28:	ed91 7a00 	vldr	s14, [r1]
 8022a2c:	edd5 6a00 	vldr	s13, [r5]
 8022a30:	ee27 7a26 	vmul.f32	s14, s14, s13
 8022a34:	3f01      	subs	r7, #1
 8022a36:	ee77 7a87 	vadd.f32	s15, s15, s14
 8022a3a:	d011      	beq.n	8022a60 <arm_correlate_f32+0x7c>
 8022a3c:	ed91 7a01 	vldr	s14, [r1, #4]
 8022a40:	edd5 6a01 	vldr	s13, [r5, #4]
 8022a44:	ee27 7a26 	vmul.f32	s14, s14, s13
 8022a48:	2f01      	cmp	r7, #1
 8022a4a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8022a4e:	d007      	beq.n	8022a60 <arm_correlate_f32+0x7c>
 8022a50:	ed95 7a02 	vldr	s14, [r5, #8]
 8022a54:	edd1 6a02 	vldr	s13, [r1, #8]
 8022a58:	ee27 7a26 	vmul.f32	s14, s14, s13
 8022a5c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8022a60:	1c67      	adds	r7, r4, #1
 8022a62:	42bb      	cmp	r3, r7
 8022a64:	edc9 7a00 	vstr	s15, [r9]
 8022a68:	4641      	mov	r1, r8
 8022a6a:	44f1      	add	r9, lr
 8022a6c:	d03a      	beq.n	8022ae4 <arm_correlate_f32+0x100>
 8022a6e:	ea5f 0a97 	movs.w	sl, r7, lsr #2
 8022a72:	f000 8267 	beq.w	8022f44 <arm_correlate_f32+0x560>
 8022a76:	ea4f 1a0a 	mov.w	sl, sl, lsl #4
 8022a7a:	f100 0110 	add.w	r1, r0, #16
 8022a7e:	eddf 7a39 	vldr	s15, [pc, #228]	@ 8022b64 <arm_correlate_f32+0x180>
 8022a82:	eb01 050a 	add.w	r5, r1, sl
 8022a86:	f108 0410 	add.w	r4, r8, #16
 8022a8a:	ed11 7a04 	vldr	s14, [r1, #-16]
 8022a8e:	ed54 3a04 	vldr	s7, [r4, #-16]
 8022a92:	ed11 6a03 	vldr	s12, [r1, #-12]
 8022a96:	ed14 4a03 	vldr	s8, [r4, #-12]
 8022a9a:	ed51 6a02 	vldr	s13, [r1, #-8]
 8022a9e:	ed54 4a02 	vldr	s9, [r4, #-8]
 8022aa2:	ed51 5a01 	vldr	s11, [r1, #-4]
 8022aa6:	ed14 5a01 	vldr	s10, [r4, #-4]
 8022aaa:	ee27 7a23 	vmul.f32	s14, s14, s7
 8022aae:	ee26 6a04 	vmul.f32	s12, s12, s8
 8022ab2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8022ab6:	ee26 7aa4 	vmul.f32	s14, s13, s9
 8022aba:	ee76 7a27 	vadd.f32	s15, s12, s15
 8022abe:	ee65 6a85 	vmul.f32	s13, s11, s10
 8022ac2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8022ac6:	3110      	adds	r1, #16
 8022ac8:	428d      	cmp	r5, r1
 8022aca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8022ace:	f104 0410 	add.w	r4, r4, #16
 8022ad2:	d1da      	bne.n	8022a8a <arm_correlate_f32+0xa6>
 8022ad4:	eb00 050a 	add.w	r5, r0, sl
 8022ad8:	eb08 010a 	add.w	r1, r8, sl
 8022adc:	f1a8 0804 	sub.w	r8, r8, #4
 8022ae0:	463c      	mov	r4, r7
 8022ae2:	e79e      	b.n	8022a22 <arm_correlate_f32+0x3e>
 8022ae4:	2b03      	cmp	r3, #3
 8022ae6:	fb0e cc04 	mla	ip, lr, r4, ip
 8022aea:	f240 81dd 	bls.w	8022ea8 <arm_correlate_f32+0x4c4>
 8022aee:	9b02      	ldr	r3, [sp, #8]
 8022af0:	0899      	lsrs	r1, r3, #2
 8022af2:	9103      	str	r1, [sp, #12]
 8022af4:	f000 8220 	beq.w	8022f38 <arm_correlate_f32+0x554>
 8022af8:	08bb      	lsrs	r3, r7, #2
 8022afa:	f007 0403 	and.w	r4, r7, #3
 8022afe:	9300      	str	r3, [sp, #0]
 8022b00:	011b      	lsls	r3, r3, #4
 8022b02:	f103 0b0c 	add.w	fp, r3, #12
 8022b06:	18d5      	adds	r5, r2, r3
 8022b08:	1e63      	subs	r3, r4, #1
 8022b0a:	0109      	lsls	r1, r1, #4
 8022b0c:	9306      	str	r3, [sp, #24]
 8022b0e:	f100 080c 	add.w	r8, r0, #12
 8022b12:	9401      	str	r4, [sp, #4]
 8022b14:	9104      	str	r1, [sp, #16]
 8022b16:	ea4f 048e 	mov.w	r4, lr, lsl #2
 8022b1a:	4441      	add	r1, r8
 8022b1c:	f102 0310 	add.w	r3, r2, #16
 8022b20:	e9cd 6009 	strd	r6, r0, [sp, #36]	@ 0x24
 8022b24:	9e06      	ldr	r6, [sp, #24]
 8022b26:	9405      	str	r4, [sp, #20]
 8022b28:	e9cd 7c07 	strd	r7, ip, [sp, #28]
 8022b2c:	eb0c 0a4e 	add.w	sl, ip, lr, lsl #1
 8022b30:	46e1      	mov	r9, ip
 8022b32:	4483      	add	fp, r0
 8022b34:	460f      	mov	r7, r1
 8022b36:	920b      	str	r2, [sp, #44]	@ 0x2c
 8022b38:	469c      	mov	ip, r3
 8022b3a:	ed9f 6a0a 	vldr	s12, [pc, #40]	@ 8022b64 <arm_correlate_f32+0x180>
 8022b3e:	ed58 1a03 	vldr	s3, [r8, #-12]
 8022b42:	ed18 2a02 	vldr	s4, [r8, #-8]
 8022b46:	ed58 2a01 	vldr	s5, [r8, #-4]
 8022b4a:	ed98 0a00 	vldr	s0, [r8]
 8022b4e:	9900      	ldr	r1, [sp, #0]
 8022b50:	eef0 5a46 	vmov.f32	s11, s12
 8022b54:	eeb0 5a46 	vmov.f32	s10, s12
 8022b58:	eef0 4a46 	vmov.f32	s9, s12
 8022b5c:	4663      	mov	r3, ip
 8022b5e:	4642      	mov	r2, r8
 8022b60:	e005      	b.n	8022b6e <arm_correlate_f32+0x18a>
 8022b62:	bf00      	nop
 8022b64:	00000000 	.word	0x00000000
 8022b68:	ed90 0a04 	vldr	s0, [r0, #16]
 8022b6c:	3210      	adds	r2, #16
 8022b6e:	ed53 6a04 	vldr	s13, [r3, #-16]
 8022b72:	ed13 7a03 	vldr	s14, [r3, #-12]
 8022b76:	ed53 7a02 	vldr	s15, [r3, #-8]
 8022b7a:	ed13 1a01 	vldr	s2, [r3, #-4]
 8022b7e:	ee62 3a26 	vmul.f32	s7, s4, s13
 8022b82:	ee22 4aa6 	vmul.f32	s8, s5, s13
 8022b86:	ee61 0aa6 	vmul.f32	s1, s3, s13
 8022b8a:	edd2 1a01 	vldr	s3, [r2, #4]
 8022b8e:	ee66 6a80 	vmul.f32	s13, s13, s0
 8022b92:	ee22 3a07 	vmul.f32	s6, s4, s14
 8022b96:	ee33 5a85 	vadd.f32	s10, s7, s10
 8022b9a:	ee74 5a25 	vadd.f32	s11, s8, s11
 8022b9e:	ee62 3a87 	vmul.f32	s7, s5, s14
 8022ba2:	ee20 4a07 	vmul.f32	s8, s0, s14
 8022ba6:	ee70 4aa4 	vadd.f32	s9, s1, s9
 8022baa:	ee36 6a86 	vadd.f32	s12, s13, s12
 8022bae:	ed92 2a02 	vldr	s4, [r2, #8]
 8022bb2:	ee27 7a21 	vmul.f32	s14, s14, s3
 8022bb6:	ee73 3a85 	vadd.f32	s7, s7, s10
 8022bba:	ee37 7a06 	vadd.f32	s14, s14, s12
 8022bbe:	ee20 5a27 	vmul.f32	s10, s0, s15
 8022bc2:	ee33 3a24 	vadd.f32	s6, s6, s9
 8022bc6:	ee34 4a25 	vadd.f32	s8, s8, s11
 8022bca:	ee62 4aa7 	vmul.f32	s9, s5, s15
 8022bce:	ee61 5aa7 	vmul.f32	s11, s3, s15
 8022bd2:	edd2 2a03 	vldr	s5, [r2, #12]
 8022bd6:	ee67 7a82 	vmul.f32	s15, s15, s4
 8022bda:	ee35 5a23 	vadd.f32	s10, s10, s7
 8022bde:	ee77 7a87 	vadd.f32	s15, s15, s14
 8022be2:	ee74 4a83 	vadd.f32	s9, s9, s6
 8022be6:	ee20 0a01 	vmul.f32	s0, s0, s2
 8022bea:	ee61 3a81 	vmul.f32	s7, s3, s2
 8022bee:	ee75 5a84 	vadd.f32	s11, s11, s8
 8022bf2:	ee22 7a01 	vmul.f32	s14, s4, s2
 8022bf6:	ee21 6a22 	vmul.f32	s12, s2, s5
 8022bfa:	3901      	subs	r1, #1
 8022bfc:	f103 0310 	add.w	r3, r3, #16
 8022c00:	ee70 4a24 	vadd.f32	s9, s0, s9
 8022c04:	ee33 5a85 	vadd.f32	s10, s7, s10
 8022c08:	ee77 5a25 	vadd.f32	s11, s14, s11
 8022c0c:	ee36 6a27 	vadd.f32	s12, s12, s15
 8022c10:	4610      	mov	r0, r2
 8022c12:	d1a9      	bne.n	8022b68 <arm_correlate_f32+0x184>
 8022c14:	9b01      	ldr	r3, [sp, #4]
 8022c16:	b3f3      	cbz	r3, 8022c96 <arm_correlate_f32+0x2b2>
 8022c18:	edd5 7a00 	vldr	s15, [r5]
 8022c1c:	ed9b 4a00 	vldr	s8, [fp]
 8022c20:	ee61 6aa7 	vmul.f32	s13, s3, s15
 8022c24:	ee62 3a27 	vmul.f32	s7, s4, s15
 8022c28:	ee22 7aa7 	vmul.f32	s14, s5, s15
 8022c2c:	ee64 7a27 	vmul.f32	s15, s8, s15
 8022c30:	ee74 4aa6 	vadd.f32	s9, s9, s13
 8022c34:	ee35 5a23 	vadd.f32	s10, s10, s7
 8022c38:	ee75 5a87 	vadd.f32	s11, s11, s14
 8022c3c:	ee36 6a27 	vadd.f32	s12, s12, s15
 8022c40:	b34e      	cbz	r6, 8022c96 <arm_correlate_f32+0x2b2>
 8022c42:	edd5 7a01 	vldr	s15, [r5, #4]
 8022c46:	eddb 6a01 	vldr	s13, [fp, #4]
 8022c4a:	ee22 7a27 	vmul.f32	s14, s4, s15
 8022c4e:	ee22 3aa7 	vmul.f32	s6, s5, s15
 8022c52:	ee67 3a84 	vmul.f32	s7, s15, s8
 8022c56:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8022c5a:	2e01      	cmp	r6, #1
 8022c5c:	ee74 4a87 	vadd.f32	s9, s9, s14
 8022c60:	ee35 5a03 	vadd.f32	s10, s10, s6
 8022c64:	ee75 5aa3 	vadd.f32	s11, s11, s7
 8022c68:	ee36 6a27 	vadd.f32	s12, s12, s15
 8022c6c:	d013      	beq.n	8022c96 <arm_correlate_f32+0x2b2>
 8022c6e:	ed95 7a02 	vldr	s14, [r5, #8]
 8022c72:	eddb 3a02 	vldr	s7, [fp, #8]
 8022c76:	ee62 7a87 	vmul.f32	s15, s5, s14
 8022c7a:	ee27 4a04 	vmul.f32	s8, s14, s8
 8022c7e:	ee67 6a26 	vmul.f32	s13, s14, s13
 8022c82:	ee27 7a23 	vmul.f32	s14, s14, s7
 8022c86:	ee74 4aa7 	vadd.f32	s9, s9, s15
 8022c8a:	ee35 5a04 	vadd.f32	s10, s10, s8
 8022c8e:	ee75 5aa6 	vadd.f32	s11, s11, s13
 8022c92:	ee36 6a07 	vadd.f32	s12, s12, s14
 8022c96:	f108 0810 	add.w	r8, r8, #16
 8022c9a:	eb09 020e 	add.w	r2, r9, lr
 8022c9e:	eb0a 030e 	add.w	r3, sl, lr
 8022ca2:	4547      	cmp	r7, r8
 8022ca4:	edc9 4a00 	vstr	s9, [r9]
 8022ca8:	f10b 0b10 	add.w	fp, fp, #16
 8022cac:	ed82 5a00 	vstr	s10, [r2]
 8022cb0:	44a1      	add	r9, r4
 8022cb2:	edca 5a00 	vstr	s11, [sl]
 8022cb6:	ed83 6a00 	vstr	s12, [r3]
 8022cba:	44a2      	add	sl, r4
 8022cbc:	f47f af3d 	bne.w	8022b3a <arm_correlate_f32+0x156>
 8022cc0:	e9dd 7c07 	ldrd	r7, ip, [sp, #28]
 8022cc4:	e9dd 6009 	ldrd	r6, r0, [sp, #36]	@ 0x24
 8022cc8:	9b03      	ldr	r3, [sp, #12]
 8022cca:	9c05      	ldr	r4, [sp, #20]
 8022ccc:	9904      	ldr	r1, [sp, #16]
 8022cce:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8022cd0:	fb04 cc03 	mla	ip, r4, r3, ip
 8022cd4:	4401      	add	r1, r0
 8022cd6:	009b      	lsls	r3, r3, #2
 8022cd8:	460d      	mov	r5, r1
 8022cda:	9303      	str	r3, [sp, #12]
 8022cdc:	9b02      	ldr	r3, [sp, #8]
 8022cde:	f013 0303 	ands.w	r3, r3, #3
 8022ce2:	9301      	str	r3, [sp, #4]
 8022ce4:	d071      	beq.n	8022dca <arm_correlate_f32+0x3e6>
 8022ce6:	9903      	ldr	r1, [sp, #12]
 8022ce8:	9205      	str	r2, [sp, #20]
 8022cea:	f007 0403 	and.w	r4, r7, #3
 8022cee:	ea4f 0b97 	mov.w	fp, r7, lsr #2
 8022cf2:	1c4f      	adds	r7, r1, #1
 8022cf4:	1859      	adds	r1, r3, r1
 8022cf6:	1d03      	adds	r3, r0, #4
 8022cf8:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8022cfc:	9400      	str	r4, [sp, #0]
 8022cfe:	f102 0110 	add.w	r1, r2, #16
 8022d02:	ea4f 1a0b 	mov.w	sl, fp, lsl #4
 8022d06:	3c01      	subs	r4, #1
 8022d08:	e9cd 6003 	strd	r6, r0, [sp, #12]
 8022d0c:	eb02 090a 	add.w	r9, r2, sl
 8022d10:	eb00 0787 	add.w	r7, r0, r7, lsl #2
 8022d14:	46e0      	mov	r8, ip
 8022d16:	4618      	mov	r0, r3
 8022d18:	460e      	mov	r6, r1
 8022d1a:	4622      	mov	r2, r4
 8022d1c:	ed5f 7a6f 	vldr	s15, [pc, #-444]	@ 8022b64 <arm_correlate_f32+0x180>
 8022d20:	f105 0110 	add.w	r1, r5, #16
 8022d24:	4633      	mov	r3, r6
 8022d26:	465c      	mov	r4, fp
 8022d28:	ed11 7a04 	vldr	s14, [r1, #-16]
 8022d2c:	ed53 3a04 	vldr	s7, [r3, #-16]
 8022d30:	ed11 6a03 	vldr	s12, [r1, #-12]
 8022d34:	ed13 4a03 	vldr	s8, [r3, #-12]
 8022d38:	ed51 6a02 	vldr	s13, [r1, #-8]
 8022d3c:	ed53 4a02 	vldr	s9, [r3, #-8]
 8022d40:	ed51 5a01 	vldr	s11, [r1, #-4]
 8022d44:	ed13 5a01 	vldr	s10, [r3, #-4]
 8022d48:	ee27 7a23 	vmul.f32	s14, s14, s7
 8022d4c:	ee26 6a04 	vmul.f32	s12, s12, s8
 8022d50:	ee77 7a27 	vadd.f32	s15, s14, s15
 8022d54:	ee26 7aa4 	vmul.f32	s14, s13, s9
 8022d58:	ee76 7a27 	vadd.f32	s15, s12, s15
 8022d5c:	ee65 6a85 	vmul.f32	s13, s11, s10
 8022d60:	ee77 7a27 	vadd.f32	s15, s14, s15
 8022d64:	3c01      	subs	r4, #1
 8022d66:	f101 0110 	add.w	r1, r1, #16
 8022d6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8022d6e:	f103 0310 	add.w	r3, r3, #16
 8022d72:	d1d9      	bne.n	8022d28 <arm_correlate_f32+0x344>
 8022d74:	9b00      	ldr	r3, [sp, #0]
 8022d76:	4455      	add	r5, sl
 8022d78:	b1d3      	cbz	r3, 8022db0 <arm_correlate_f32+0x3cc>
 8022d7a:	ed99 7a00 	vldr	s14, [r9]
 8022d7e:	edd5 6a00 	vldr	s13, [r5]
 8022d82:	ee27 7a26 	vmul.f32	s14, s14, s13
 8022d86:	ee77 7a87 	vadd.f32	s15, s15, s14
 8022d8a:	b18a      	cbz	r2, 8022db0 <arm_correlate_f32+0x3cc>
 8022d8c:	ed99 7a01 	vldr	s14, [r9, #4]
 8022d90:	edd5 6a01 	vldr	s13, [r5, #4]
 8022d94:	ee27 7a26 	vmul.f32	s14, s14, s13
 8022d98:	2a01      	cmp	r2, #1
 8022d9a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8022d9e:	d007      	beq.n	8022db0 <arm_correlate_f32+0x3cc>
 8022da0:	ed95 7a02 	vldr	s14, [r5, #8]
 8022da4:	edd9 6a02 	vldr	s13, [r9, #8]
 8022da8:	ee27 7a26 	vmul.f32	s14, s14, s13
 8022dac:	ee77 7a87 	vadd.f32	s15, s15, s14
 8022db0:	463d      	mov	r5, r7
 8022db2:	3704      	adds	r7, #4
 8022db4:	42b8      	cmp	r0, r7
 8022db6:	edc8 7a00 	vstr	s15, [r8]
 8022dba:	44f0      	add	r8, lr
 8022dbc:	d1ae      	bne.n	8022d1c <arm_correlate_f32+0x338>
 8022dbe:	9b01      	ldr	r3, [sp, #4]
 8022dc0:	9a05      	ldr	r2, [sp, #20]
 8022dc2:	e9dd 6003 	ldrd	r6, r0, [sp, #12]
 8022dc6:	fb0e cc03 	mla	ip, lr, r3, ip
 8022dca:	9b02      	ldr	r3, [sp, #8]
 8022dcc:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8022dd0:	08b5      	lsrs	r5, r6, #2
 8022dd2:	ed5f 5a9c 	vldr	s11, [pc, #-624]	@ 8022b64 <arm_correlate_f32+0x180>
 8022dd6:	f000 80ac 	beq.w	8022f32 <arm_correlate_f32+0x54e>
 8022dda:	f100 0110 	add.w	r1, r0, #16
 8022dde:	f102 0310 	add.w	r3, r2, #16
 8022de2:	462c      	mov	r4, r5
 8022de4:	ed51 6a04 	vldr	s13, [r1, #-16]
 8022de8:	ed53 3a04 	vldr	s7, [r3, #-16]
 8022dec:	ed11 7a03 	vldr	s14, [r1, #-12]
 8022df0:	ed13 4a03 	vldr	s8, [r3, #-12]
 8022df4:	ed51 7a02 	vldr	s15, [r1, #-8]
 8022df8:	ed53 4a02 	vldr	s9, [r3, #-8]
 8022dfc:	ed11 6a01 	vldr	s12, [r1, #-4]
 8022e00:	ed13 5a01 	vldr	s10, [r3, #-4]
 8022e04:	ee66 6aa3 	vmul.f32	s13, s13, s7
 8022e08:	ee27 7a04 	vmul.f32	s14, s14, s8
 8022e0c:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8022e10:	ee67 7aa4 	vmul.f32	s15, s15, s9
 8022e14:	ee37 7a26 	vadd.f32	s14, s14, s13
 8022e18:	ee66 6a05 	vmul.f32	s13, s12, s10
 8022e1c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8022e20:	3c01      	subs	r4, #1
 8022e22:	f101 0110 	add.w	r1, r1, #16
 8022e26:	ee76 5aa7 	vadd.f32	s11, s13, s15
 8022e2a:	f103 0310 	add.w	r3, r3, #16
 8022e2e:	d1d9      	bne.n	8022de4 <arm_correlate_f32+0x400>
 8022e30:	012d      	lsls	r5, r5, #4
 8022e32:	1941      	adds	r1, r0, r5
 8022e34:	4415      	add	r5, r2
 8022e36:	f016 0303 	ands.w	r3, r6, #3
 8022e3a:	d01b      	beq.n	8022e74 <arm_correlate_f32+0x490>
 8022e3c:	edd5 7a00 	vldr	s15, [r5]
 8022e40:	ed91 7a00 	vldr	s14, [r1]
 8022e44:	ee67 7a87 	vmul.f32	s15, s15, s14
 8022e48:	3b01      	subs	r3, #1
 8022e4a:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8022e4e:	d011      	beq.n	8022e74 <arm_correlate_f32+0x490>
 8022e50:	edd5 7a01 	vldr	s15, [r5, #4]
 8022e54:	ed91 7a01 	vldr	s14, [r1, #4]
 8022e58:	ee67 7a87 	vmul.f32	s15, s15, s14
 8022e5c:	2b01      	cmp	r3, #1
 8022e5e:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8022e62:	d007      	beq.n	8022e74 <arm_correlate_f32+0x490>
 8022e64:	edd1 7a02 	vldr	s15, [r1, #8]
 8022e68:	ed95 7a02 	vldr	s14, [r5, #8]
 8022e6c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8022e70:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8022e74:	3e01      	subs	r6, #1
 8022e76:	edcc 5a00 	vstr	s11, [ip]
 8022e7a:	f100 0004 	add.w	r0, r0, #4
 8022e7e:	44f4      	add	ip, lr
 8022e80:	d1a6      	bne.n	8022dd0 <arm_correlate_f32+0x3ec>
 8022e82:	b00d      	add	sp, #52	@ 0x34
 8022e84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022e88:	f103 4480 	add.w	r4, r3, #1073741824	@ 0x40000000
 8022e8c:	4606      	mov	r6, r0
 8022e8e:	3c02      	subs	r4, #2
 8022e90:	4610      	mov	r0, r2
 8022e92:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8022e94:	440c      	add	r4, r1
 8022e96:	460d      	mov	r5, r1
 8022e98:	eb02 0c84 	add.w	ip, r2, r4, lsl #2
 8022e9c:	4619      	mov	r1, r3
 8022e9e:	4632      	mov	r2, r6
 8022ea0:	f06f 0e03 	mvn.w	lr, #3
 8022ea4:	462b      	mov	r3, r5
 8022ea6:	e5aa      	b.n	80229fe <arm_correlate_f32+0x1a>
 8022ea8:	9902      	ldr	r1, [sp, #8]
 8022eaa:	2900      	cmp	r1, #0
 8022eac:	d090      	beq.n	8022dd0 <arm_correlate_f32+0x3ec>
 8022eae:	9902      	ldr	r1, [sp, #8]
 8022eb0:	ed1f 6ad4 	vldr	s12, [pc, #-848]	@ 8022b64 <arm_correlate_f32+0x180>
 8022eb4:	ea4f 0881 	mov.w	r8, r1, lsl #2
 8022eb8:	eb00 0708 	add.w	r7, r0, r8
 8022ebc:	4601      	mov	r1, r0
 8022ebe:	4665      	mov	r5, ip
 8022ec0:	e020      	b.n	8022f04 <arm_correlate_f32+0x520>
 8022ec2:	edd2 7a00 	vldr	s15, [r2]
 8022ec6:	ecb4 7a01 	vldmia	r4!, {s14}
 8022eca:	ee67 7a87 	vmul.f32	s15, s15, s14
 8022ece:	ee77 7a86 	vadd.f32	s15, s15, s12
 8022ed2:	b18e      	cbz	r6, 8022ef8 <arm_correlate_f32+0x514>
 8022ed4:	ed92 7a01 	vldr	s14, [r2, #4]
 8022ed8:	edd1 6a01 	vldr	s13, [r1, #4]
 8022edc:	ee27 7a26 	vmul.f32	s14, s14, s13
 8022ee0:	2b02      	cmp	r3, #2
 8022ee2:	ee77 7a87 	vadd.f32	s15, s15, s14
 8022ee6:	d007      	beq.n	8022ef8 <arm_correlate_f32+0x514>
 8022ee8:	ed91 7a02 	vldr	s14, [r1, #8]
 8022eec:	edd2 6a02 	vldr	s13, [r2, #8]
 8022ef0:	ee27 7a26 	vmul.f32	s14, s14, s13
 8022ef4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8022ef8:	42bc      	cmp	r4, r7
 8022efa:	edc5 7a00 	vstr	s15, [r5]
 8022efe:	4621      	mov	r1, r4
 8022f00:	4475      	add	r5, lr
 8022f02:	d00b      	beq.n	8022f1c <arm_correlate_f32+0x538>
 8022f04:	460c      	mov	r4, r1
 8022f06:	2b00      	cmp	r3, #0
 8022f08:	d1db      	bne.n	8022ec2 <arm_correlate_f32+0x4de>
 8022f0a:	1d0c      	adds	r4, r1, #4
 8022f0c:	eddf 7a0f 	vldr	s15, [pc, #60]	@ 8022f4c <arm_correlate_f32+0x568>
 8022f10:	42bc      	cmp	r4, r7
 8022f12:	edc5 7a00 	vstr	s15, [r5]
 8022f16:	4621      	mov	r1, r4
 8022f18:	4475      	add	r5, lr
 8022f1a:	d1f3      	bne.n	8022f04 <arm_correlate_f32+0x520>
 8022f1c:	9b02      	ldr	r3, [sp, #8]
 8022f1e:	4440      	add	r0, r8
 8022f20:	fb0e cc03 	mla	ip, lr, r3, ip
 8022f24:	2e00      	cmp	r6, #0
 8022f26:	d0ac      	beq.n	8022e82 <arm_correlate_f32+0x49e>
 8022f28:	08b5      	lsrs	r5, r6, #2
 8022f2a:	eddf 5a08 	vldr	s11, [pc, #32]	@ 8022f4c <arm_correlate_f32+0x568>
 8022f2e:	f47f af54 	bne.w	8022dda <arm_correlate_f32+0x3f6>
 8022f32:	4615      	mov	r5, r2
 8022f34:	4601      	mov	r1, r0
 8022f36:	e77e      	b.n	8022e36 <arm_correlate_f32+0x452>
 8022f38:	4605      	mov	r5, r0
 8022f3a:	e6cf      	b.n	8022cdc <arm_correlate_f32+0x2f8>
 8022f3c:	9902      	ldr	r1, [sp, #8]
 8022f3e:	2900      	cmp	r1, #0
 8022f40:	d1b5      	bne.n	8022eae <arm_correlate_f32+0x4ca>
 8022f42:	e79e      	b.n	8022e82 <arm_correlate_f32+0x49e>
 8022f44:	eddf 7a01 	vldr	s15, [pc, #4]	@ 8022f4c <arm_correlate_f32+0x568>
 8022f48:	4605      	mov	r5, r0
 8022f4a:	e5c7      	b.n	8022adc <arm_correlate_f32+0xf8>
 8022f4c:	00000000 	.word	0x00000000

08022f50 <arm_conv_f32>:
 8022f50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022f54:	b08b      	sub	sp, #44	@ 0x2c
 8022f56:	4299      	cmp	r1, r3
 8022f58:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8022f5a:	d205      	bcs.n	8022f68 <arm_conv_f32+0x18>
 8022f5c:	4606      	mov	r6, r0
 8022f5e:	460c      	mov	r4, r1
 8022f60:	4610      	mov	r0, r2
 8022f62:	4619      	mov	r1, r3
 8022f64:	4632      	mov	r2, r6
 8022f66:	4623      	mov	r3, r4
 8022f68:	f103 4b80 	add.w	fp, r3, #1073741824	@ 0x40000000
 8022f6c:	3101      	adds	r1, #1
 8022f6e:	1ac9      	subs	r1, r1, r3
 8022f70:	f10b 3bff 	add.w	fp, fp, #4294967295
 8022f74:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8022f78:	9101      	str	r1, [sp, #4]
 8022f7a:	1e59      	subs	r1, r3, #1
 8022f7c:	eb02 070b 	add.w	r7, r2, fp
 8022f80:	f000 8277 	beq.w	8023472 <arm_conv_f32+0x522>
 8022f84:	eddf 7aaf 	vldr	s15, [pc, #700]	@ 8023244 <arm_conv_f32+0x2f4>
 8022f88:	f102 0904 	add.w	r9, r2, #4
 8022f8c:	46aa      	mov	sl, r5
 8022f8e:	4680      	mov	r8, r0
 8022f90:	2401      	movs	r4, #1
 8022f92:	f014 0603 	ands.w	r6, r4, #3
 8022f96:	d01b      	beq.n	8022fd0 <arm_conv_f32+0x80>
 8022f98:	ed92 7a00 	vldr	s14, [r2]
 8022f9c:	edd8 6a00 	vldr	s13, [r8]
 8022fa0:	ee27 7a26 	vmul.f32	s14, s14, s13
 8022fa4:	3e01      	subs	r6, #1
 8022fa6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8022faa:	d011      	beq.n	8022fd0 <arm_conv_f32+0x80>
 8022fac:	ed12 7a01 	vldr	s14, [r2, #-4]
 8022fb0:	edd8 6a01 	vldr	s13, [r8, #4]
 8022fb4:	ee27 7a26 	vmul.f32	s14, s14, s13
 8022fb8:	2e01      	cmp	r6, #1
 8022fba:	ee77 7a87 	vadd.f32	s15, s15, s14
 8022fbe:	d007      	beq.n	8022fd0 <arm_conv_f32+0x80>
 8022fc0:	ed98 7a02 	vldr	s14, [r8, #8]
 8022fc4:	ed52 6a02 	vldr	s13, [r2, #-8]
 8022fc8:	ee27 7a26 	vmul.f32	s14, s14, s13
 8022fcc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8022fd0:	3401      	adds	r4, #1
 8022fd2:	42a3      	cmp	r3, r4
 8022fd4:	ecea 7a01 	vstmia	sl!, {s15}
 8022fd8:	464a      	mov	r2, r9
 8022fda:	d03a      	beq.n	8023052 <arm_conv_f32+0x102>
 8022fdc:	ea5f 0e94 	movs.w	lr, r4, lsr #2
 8022fe0:	f000 824c 	beq.w	802347c <arm_conv_f32+0x52c>
 8022fe4:	f100 0210 	add.w	r2, r0, #16
 8022fe8:	ea4f 180e 	mov.w	r8, lr, lsl #4
 8022fec:	eddf 7a95 	vldr	s15, [pc, #596]	@ 8023244 <arm_conv_f32+0x2f4>
 8022ff0:	eb02 0c08 	add.w	ip, r2, r8
 8022ff4:	f1a9 0610 	sub.w	r6, r9, #16
 8022ff8:	ed12 7a04 	vldr	s14, [r2, #-16]
 8022ffc:	edd6 3a04 	vldr	s7, [r6, #16]
 8023000:	ed12 6a03 	vldr	s12, [r2, #-12]
 8023004:	ed96 4a03 	vldr	s8, [r6, #12]
 8023008:	ed52 6a02 	vldr	s13, [r2, #-8]
 802300c:	edd6 4a02 	vldr	s9, [r6, #8]
 8023010:	ed52 5a01 	vldr	s11, [r2, #-4]
 8023014:	ed96 5a01 	vldr	s10, [r6, #4]
 8023018:	ee27 7a23 	vmul.f32	s14, s14, s7
 802301c:	ee26 6a04 	vmul.f32	s12, s12, s8
 8023020:	ee77 7a27 	vadd.f32	s15, s14, s15
 8023024:	ee26 7aa4 	vmul.f32	s14, s13, s9
 8023028:	ee76 7a27 	vadd.f32	s15, s12, s15
 802302c:	ee65 6a85 	vmul.f32	s13, s11, s10
 8023030:	ee77 7a27 	vadd.f32	s15, s14, s15
 8023034:	3210      	adds	r2, #16
 8023036:	4594      	cmp	ip, r2
 8023038:	ee76 7aa7 	vadd.f32	s15, s13, s15
 802303c:	f1a6 0610 	sub.w	r6, r6, #16
 8023040:	d1da      	bne.n	8022ff8 <arm_conv_f32+0xa8>
 8023042:	ebce 7e0e 	rsb	lr, lr, lr, lsl #28
 8023046:	eb09 120e 	add.w	r2, r9, lr, lsl #4
 802304a:	4480      	add	r8, r0
 802304c:	f109 0904 	add.w	r9, r9, #4
 8023050:	e79f      	b.n	8022f92 <arm_conv_f32+0x42>
 8023052:	2b03      	cmp	r3, #3
 8023054:	445d      	add	r5, fp
 8023056:	f240 80e9 	bls.w	802322c <arm_conv_f32+0x2dc>
 802305a:	9b01      	ldr	r3, [sp, #4]
 802305c:	089a      	lsrs	r2, r3, #2
 802305e:	9202      	str	r2, [sp, #8]
 8023060:	f000 8203 	beq.w	802346a <arm_conv_f32+0x51a>
 8023064:	ea4f 0894 	mov.w	r8, r4, lsr #2
 8023068:	ea4f 1308 	mov.w	r3, r8, lsl #4
 802306c:	0112      	lsls	r2, r2, #4
 802306e:	f004 0603 	and.w	r6, r4, #3
 8023072:	9203      	str	r2, [sp, #12]
 8023074:	f1a3 0a10 	sub.w	sl, r3, #16
 8023078:	f1a3 020c 	sub.w	r2, r3, #12
 802307c:	3b08      	subs	r3, #8
 802307e:	9204      	str	r2, [sp, #16]
 8023080:	9305      	str	r3, [sp, #20]
 8023082:	f106 39ff 	add.w	r9, r6, #4294967295
 8023086:	e9cd 7008 	strd	r7, r0, [sp, #32]
 802308a:	9a03      	ldr	r2, [sp, #12]
 802308c:	f100 0c1c 	add.w	ip, r0, #28
 8023090:	e9cd 4106 	strd	r4, r1, [sp, #24]
 8023094:	464c      	mov	r4, r9
 8023096:	e9dd 9004 	ldrd	r9, r0, [sp, #16]
 802309a:	ebc8 7e08 	rsb	lr, r8, r8, lsl #28
 802309e:	f1a7 0310 	sub.w	r3, r7, #16
 80230a2:	eb07 1e0e 	add.w	lr, r7, lr, lsl #4
 80230a6:	eb05 0b02 	add.w	fp, r5, r2
 80230aa:	461f      	mov	r7, r3
 80230ac:	3510      	adds	r5, #16
 80230ae:	ed9f 6a65 	vldr	s12, [pc, #404]	@ 8023244 <arm_conv_f32+0x2f4>
 80230b2:	ed1c 1a07 	vldr	s2, [ip, #-28]	@ 0xffffffe4
 80230b6:	ed5c 1a06 	vldr	s3, [ip, #-24]	@ 0xffffffe8
 80230ba:	ed1c 2a05 	vldr	s4, [ip, #-20]	@ 0xffffffec
 80230be:	eeb0 5a46 	vmov.f32	s10, s12
 80230c2:	eef0 4a46 	vmov.f32	s9, s12
 80230c6:	eef0 5a46 	vmov.f32	s11, s12
 80230ca:	463a      	mov	r2, r7
 80230cc:	4663      	mov	r3, ip
 80230ce:	4641      	mov	r1, r8
 80230d0:	edd2 6a04 	vldr	s13, [r2, #16]
 80230d4:	ed13 0a04 	vldr	s0, [r3, #-16]
 80230d8:	ed92 7a03 	vldr	s14, [r2, #12]
 80230dc:	edd2 7a02 	vldr	s15, [r2, #8]
 80230e0:	edd2 0a01 	vldr	s1, [r2, #4]
 80230e4:	ee21 3aa6 	vmul.f32	s6, s3, s13
 80230e8:	ee62 3a26 	vmul.f32	s7, s4, s13
 80230ec:	ee61 2a26 	vmul.f32	s5, s2, s13
 80230f0:	ed13 1a03 	vldr	s2, [r3, #-12]
 80230f4:	ee66 6a80 	vmul.f32	s13, s13, s0
 80230f8:	ee21 4a87 	vmul.f32	s8, s3, s14
 80230fc:	ee73 4a24 	vadd.f32	s9, s6, s9
 8023100:	ee33 5a85 	vadd.f32	s10, s7, s10
 8023104:	ee22 3a07 	vmul.f32	s6, s4, s14
 8023108:	ed53 1a02 	vldr	s3, [r3, #-8]
 802310c:	ee72 2aa5 	vadd.f32	s5, s5, s11
 8023110:	ee36 6a86 	vadd.f32	s12, s13, s12
 8023114:	ee60 3a07 	vmul.f32	s7, s0, s14
 8023118:	ee27 7a01 	vmul.f32	s14, s14, s2
 802311c:	ee33 3a24 	vadd.f32	s6, s6, s9
 8023120:	ee37 7a06 	vadd.f32	s14, s14, s12
 8023124:	ee74 2a22 	vadd.f32	s5, s8, s5
 8023128:	ee60 4a27 	vmul.f32	s9, s0, s15
 802312c:	ee22 4a27 	vmul.f32	s8, s4, s15
 8023130:	ee73 3a85 	vadd.f32	s7, s7, s10
 8023134:	ed13 2a01 	vldr	s4, [r3, #-4]
 8023138:	ee21 5a27 	vmul.f32	s10, s2, s15
 802313c:	ee67 7aa1 	vmul.f32	s15, s15, s3
 8023140:	ee74 4a83 	vadd.f32	s9, s9, s6
 8023144:	ee77 7a87 	vadd.f32	s15, s15, s14
 8023148:	ee34 4a22 	vadd.f32	s8, s8, s5
 802314c:	ee60 5a20 	vmul.f32	s11, s0, s1
 8023150:	ee21 3a20 	vmul.f32	s6, s2, s1
 8023154:	ee35 5a23 	vadd.f32	s10, s10, s7
 8023158:	ee21 7aa0 	vmul.f32	s14, s3, s1
 802315c:	ee20 6a82 	vmul.f32	s12, s1, s4
 8023160:	3901      	subs	r1, #1
 8023162:	f1a2 0210 	sub.w	r2, r2, #16
 8023166:	ee75 5a84 	vadd.f32	s11, s11, s8
 802316a:	ee73 4a24 	vadd.f32	s9, s6, s9
 802316e:	ee37 5a05 	vadd.f32	s10, s14, s10
 8023172:	ee36 6a27 	vadd.f32	s12, s12, s15
 8023176:	f103 0310 	add.w	r3, r3, #16
 802317a:	d1a9      	bne.n	80230d0 <arm_conv_f32+0x180>
 802317c:	eb0a 030c 	add.w	r3, sl, ip
 8023180:	2e00      	cmp	r6, #0
 8023182:	d042      	beq.n	802320a <arm_conv_f32+0x2ba>
 8023184:	edde 7a00 	vldr	s15, [lr]
 8023188:	ed93 4a00 	vldr	s8, [r3]
 802318c:	ee61 6a27 	vmul.f32	s13, s2, s15
 8023190:	ee61 3aa7 	vmul.f32	s7, s3, s15
 8023194:	ee22 7a27 	vmul.f32	s14, s4, s15
 8023198:	ee64 7a27 	vmul.f32	s15, s8, s15
 802319c:	ee75 5aa6 	vadd.f32	s11, s11, s13
 80231a0:	ee74 4aa3 	vadd.f32	s9, s9, s7
 80231a4:	ee35 5a07 	vadd.f32	s10, s10, s14
 80231a8:	ee36 6a27 	vadd.f32	s12, s12, s15
 80231ac:	eb09 030c 	add.w	r3, r9, ip
 80231b0:	b35c      	cbz	r4, 802320a <arm_conv_f32+0x2ba>
 80231b2:	ed5e 7a01 	vldr	s15, [lr, #-4]
 80231b6:	edd3 6a00 	vldr	s13, [r3]
 80231ba:	ee21 7aa7 	vmul.f32	s14, s3, s15
 80231be:	ee22 3a27 	vmul.f32	s6, s4, s15
 80231c2:	ee67 3a84 	vmul.f32	s7, s15, s8
 80231c6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80231ca:	2c01      	cmp	r4, #1
 80231cc:	ee75 5a87 	vadd.f32	s11, s11, s14
 80231d0:	ee74 4a83 	vadd.f32	s9, s9, s6
 80231d4:	ee35 5a23 	vadd.f32	s10, s10, s7
 80231d8:	ee36 6a27 	vadd.f32	s12, s12, s15
 80231dc:	eb00 030c 	add.w	r3, r0, ip
 80231e0:	d013      	beq.n	802320a <arm_conv_f32+0x2ba>
 80231e2:	ed1e 7a02 	vldr	s14, [lr, #-8]
 80231e6:	edd3 3a00 	vldr	s7, [r3]
 80231ea:	ee62 7a07 	vmul.f32	s15, s4, s14
 80231ee:	ee27 4a04 	vmul.f32	s8, s14, s8
 80231f2:	ee67 6a26 	vmul.f32	s13, s14, s13
 80231f6:	ee27 7a23 	vmul.f32	s14, s14, s7
 80231fa:	ee75 5aa7 	vadd.f32	s11, s11, s15
 80231fe:	ee74 4a84 	vadd.f32	s9, s9, s8
 8023202:	ee35 5a26 	vadd.f32	s10, s10, s13
 8023206:	ee36 6a07 	vadd.f32	s12, s12, s14
 802320a:	45ab      	cmp	fp, r5
 802320c:	ed45 5a04 	vstr	s11, [r5, #-16]
 8023210:	ed45 4a03 	vstr	s9, [r5, #-12]
 8023214:	ed05 5a02 	vstr	s10, [r5, #-8]
 8023218:	ed05 6a01 	vstr	s12, [r5, #-4]
 802321c:	f10c 0c10 	add.w	ip, ip, #16
 8023220:	f105 0310 	add.w	r3, r5, #16
 8023224:	f000 809e 	beq.w	8023364 <arm_conv_f32+0x414>
 8023228:	461d      	mov	r5, r3
 802322a:	e740      	b.n	80230ae <arm_conv_f32+0x15e>
 802322c:	9a01      	ldr	r2, [sp, #4]
 802322e:	46ac      	mov	ip, r5
 8023230:	2a00      	cmp	r2, #0
 8023232:	d037      	beq.n	80232a4 <arm_conv_f32+0x354>
 8023234:	9a01      	ldr	r2, [sp, #4]
 8023236:	ed9f 6a03 	vldr	s12, [pc, #12]	@ 8023244 <arm_conv_f32+0x2f4>
 802323a:	0096      	lsls	r6, r2, #2
 802323c:	eb05 0c06 	add.w	ip, r5, r6
 8023240:	4604      	mov	r4, r0
 8023242:	e021      	b.n	8023288 <arm_conv_f32+0x338>
 8023244:	00000000 	.word	0x00000000
 8023248:	edd7 7a00 	vldr	s15, [r7]
 802324c:	ecb2 7a01 	vldmia	r2!, {s14}
 8023250:	ee67 7a87 	vmul.f32	s15, s15, s14
 8023254:	ee77 7a86 	vadd.f32	s15, s15, s12
 8023258:	b189      	cbz	r1, 802327e <arm_conv_f32+0x32e>
 802325a:	ed17 7a01 	vldr	s14, [r7, #-4]
 802325e:	edd4 6a01 	vldr	s13, [r4, #4]
 8023262:	ee27 7a26 	vmul.f32	s14, s14, s13
 8023266:	2b02      	cmp	r3, #2
 8023268:	ee77 7a87 	vadd.f32	s15, s15, s14
 802326c:	d007      	beq.n	802327e <arm_conv_f32+0x32e>
 802326e:	ed94 7a02 	vldr	s14, [r4, #8]
 8023272:	ed57 6a02 	vldr	s13, [r7, #-8]
 8023276:	ee27 7a26 	vmul.f32	s14, s14, s13
 802327a:	ee77 7a87 	vadd.f32	s15, s15, s14
 802327e:	ece5 7a01 	vstmia	r5!, {s15}
 8023282:	4565      	cmp	r5, ip
 8023284:	4614      	mov	r4, r2
 8023286:	d00a      	beq.n	802329e <arm_conv_f32+0x34e>
 8023288:	4622      	mov	r2, r4
 802328a:	2b00      	cmp	r3, #0
 802328c:	d1dc      	bne.n	8023248 <arm_conv_f32+0x2f8>
 802328e:	ed5f 7a13 	vldr	s15, [pc, #-76]	@ 8023244 <arm_conv_f32+0x2f4>
 8023292:	ece5 7a01 	vstmia	r5!, {s15}
 8023296:	1d22      	adds	r2, r4, #4
 8023298:	4565      	cmp	r5, ip
 802329a:	4614      	mov	r4, r2
 802329c:	d1f4      	bne.n	8023288 <arm_conv_f32+0x338>
 802329e:	4430      	add	r0, r6
 80232a0:	2900      	cmp	r1, #0
 80232a2:	d059      	beq.n	8023358 <arm_conv_f32+0x408>
 80232a4:	088d      	lsrs	r5, r1, #2
 80232a6:	ed5f 5a19 	vldr	s11, [pc, #-100]	@ 8023244 <arm_conv_f32+0x2f4>
 80232aa:	d058      	beq.n	802335e <arm_conv_f32+0x40e>
 80232ac:	f100 0210 	add.w	r2, r0, #16
 80232b0:	f1a7 0310 	sub.w	r3, r7, #16
 80232b4:	462c      	mov	r4, r5
 80232b6:	ed52 6a04 	vldr	s13, [r2, #-16]
 80232ba:	edd3 3a04 	vldr	s7, [r3, #16]
 80232be:	ed12 7a03 	vldr	s14, [r2, #-12]
 80232c2:	ed93 4a03 	vldr	s8, [r3, #12]
 80232c6:	ed52 7a02 	vldr	s15, [r2, #-8]
 80232ca:	edd3 4a02 	vldr	s9, [r3, #8]
 80232ce:	ed12 6a01 	vldr	s12, [r2, #-4]
 80232d2:	ed93 5a01 	vldr	s10, [r3, #4]
 80232d6:	ee66 6aa3 	vmul.f32	s13, s13, s7
 80232da:	ee27 7a04 	vmul.f32	s14, s14, s8
 80232de:	ee76 6aa5 	vadd.f32	s13, s13, s11
 80232e2:	ee67 7aa4 	vmul.f32	s15, s15, s9
 80232e6:	ee37 7a26 	vadd.f32	s14, s14, s13
 80232ea:	ee66 6a05 	vmul.f32	s13, s12, s10
 80232ee:	ee77 7a87 	vadd.f32	s15, s15, s14
 80232f2:	3c01      	subs	r4, #1
 80232f4:	f102 0210 	add.w	r2, r2, #16
 80232f8:	ee76 5aa7 	vadd.f32	s11, s13, s15
 80232fc:	f1a3 0310 	sub.w	r3, r3, #16
 8023300:	d1d9      	bne.n	80232b6 <arm_conv_f32+0x366>
 8023302:	ebc5 7305 	rsb	r3, r5, r5, lsl #28
 8023306:	eb07 1303 	add.w	r3, r7, r3, lsl #4
 802330a:	eb00 1505 	add.w	r5, r0, r5, lsl #4
 802330e:	f011 0203 	ands.w	r2, r1, #3
 8023312:	d01b      	beq.n	802334c <arm_conv_f32+0x3fc>
 8023314:	edd3 7a00 	vldr	s15, [r3]
 8023318:	ed95 7a00 	vldr	s14, [r5]
 802331c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8023320:	3a01      	subs	r2, #1
 8023322:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8023326:	d011      	beq.n	802334c <arm_conv_f32+0x3fc>
 8023328:	ed53 7a01 	vldr	s15, [r3, #-4]
 802332c:	ed95 7a01 	vldr	s14, [r5, #4]
 8023330:	ee67 7a87 	vmul.f32	s15, s15, s14
 8023334:	2a01      	cmp	r2, #1
 8023336:	ee75 5aa7 	vadd.f32	s11, s11, s15
 802333a:	d007      	beq.n	802334c <arm_conv_f32+0x3fc>
 802333c:	edd5 7a02 	vldr	s15, [r5, #8]
 8023340:	ed13 7a02 	vldr	s14, [r3, #-8]
 8023344:	ee67 7a87 	vmul.f32	s15, s15, s14
 8023348:	ee75 5aa7 	vadd.f32	s11, s11, s15
 802334c:	3901      	subs	r1, #1
 802334e:	ecec 5a01 	vstmia	ip!, {s11}
 8023352:	f100 0004 	add.w	r0, r0, #4
 8023356:	d1a5      	bne.n	80232a4 <arm_conv_f32+0x354>
 8023358:	b00b      	add	sp, #44	@ 0x2c
 802335a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802335e:	463b      	mov	r3, r7
 8023360:	4605      	mov	r5, r0
 8023362:	e7d4      	b.n	802330e <arm_conv_f32+0x3be>
 8023364:	9b02      	ldr	r3, [sp, #8]
 8023366:	e9dd 7008 	ldrd	r7, r0, [sp, #32]
 802336a:	009b      	lsls	r3, r3, #2
 802336c:	9302      	str	r3, [sp, #8]
 802336e:	9b03      	ldr	r3, [sp, #12]
 8023370:	e9dd 4106 	ldrd	r4, r1, [sp, #24]
 8023374:	4403      	add	r3, r0
 8023376:	465d      	mov	r5, fp
 8023378:	469e      	mov	lr, r3
 802337a:	9b01      	ldr	r3, [sp, #4]
 802337c:	f013 0c03 	ands.w	ip, r3, #3
 8023380:	d075      	beq.n	802346e <arm_conv_f32+0x51e>
 8023382:	9b02      	ldr	r3, [sp, #8]
 8023384:	ea4f 0a94 	mov.w	sl, r4, lsr #2
 8023388:	f004 0403 	and.w	r4, r4, #3
 802338c:	f104 3bff 	add.w	fp, r4, #4294967295
 8023390:	f103 0801 	add.w	r8, r3, #1
 8023394:	ea4f 130a 	mov.w	r3, sl, lsl #4
 8023398:	e9cd 7002 	strd	r7, r0, [sp, #8]
 802339c:	ebca 790a 	rsb	r9, sl, sl, lsl #28
 80233a0:	eb00 0888 	add.w	r8, r0, r8, lsl #2
 80233a4:	f1a7 0210 	sub.w	r2, r7, #16
 80233a8:	4618      	mov	r0, r3
 80233aa:	465b      	mov	r3, fp
 80233ac:	eb07 1909 	add.w	r9, r7, r9, lsl #4
 80233b0:	468b      	mov	fp, r1
 80233b2:	eb05 0c8c 	add.w	ip, r5, ip, lsl #2
 80233b6:	4621      	mov	r1, r4
 80233b8:	4617      	mov	r7, r2
 80233ba:	461c      	mov	r4, r3
 80233bc:	ed5f 7a5f 	vldr	s15, [pc, #-380]	@ 8023244 <arm_conv_f32+0x2f4>
 80233c0:	f10e 0210 	add.w	r2, lr, #16
 80233c4:	463b      	mov	r3, r7
 80233c6:	4656      	mov	r6, sl
 80233c8:	ed12 7a04 	vldr	s14, [r2, #-16]
 80233cc:	edd3 3a04 	vldr	s7, [r3, #16]
 80233d0:	ed12 6a03 	vldr	s12, [r2, #-12]
 80233d4:	ed93 4a03 	vldr	s8, [r3, #12]
 80233d8:	ed52 6a02 	vldr	s13, [r2, #-8]
 80233dc:	edd3 4a02 	vldr	s9, [r3, #8]
 80233e0:	ed52 5a01 	vldr	s11, [r2, #-4]
 80233e4:	ed93 5a01 	vldr	s10, [r3, #4]
 80233e8:	ee27 7a23 	vmul.f32	s14, s14, s7
 80233ec:	ee26 6a04 	vmul.f32	s12, s12, s8
 80233f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80233f4:	ee26 7aa4 	vmul.f32	s14, s13, s9
 80233f8:	ee76 7a27 	vadd.f32	s15, s12, s15
 80233fc:	ee65 6a85 	vmul.f32	s13, s11, s10
 8023400:	ee77 7a27 	vadd.f32	s15, s14, s15
 8023404:	3e01      	subs	r6, #1
 8023406:	f102 0210 	add.w	r2, r2, #16
 802340a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 802340e:	f1a3 0310 	sub.w	r3, r3, #16
 8023412:	d1d9      	bne.n	80233c8 <arm_conv_f32+0x478>
 8023414:	4486      	add	lr, r0
 8023416:	b1d1      	cbz	r1, 802344e <arm_conv_f32+0x4fe>
 8023418:	ed99 7a00 	vldr	s14, [r9]
 802341c:	edde 6a00 	vldr	s13, [lr]
 8023420:	ee27 7a26 	vmul.f32	s14, s14, s13
 8023424:	ee77 7a87 	vadd.f32	s15, s15, s14
 8023428:	b18c      	cbz	r4, 802344e <arm_conv_f32+0x4fe>
 802342a:	ed19 7a01 	vldr	s14, [r9, #-4]
 802342e:	edde 6a01 	vldr	s13, [lr, #4]
 8023432:	ee27 7a26 	vmul.f32	s14, s14, s13
 8023436:	2c01      	cmp	r4, #1
 8023438:	ee77 7a87 	vadd.f32	s15, s15, s14
 802343c:	d007      	beq.n	802344e <arm_conv_f32+0x4fe>
 802343e:	ed9e 7a02 	vldr	s14, [lr, #8]
 8023442:	ed59 6a02 	vldr	s13, [r9, #-8]
 8023446:	ee27 7a26 	vmul.f32	s14, s14, s13
 802344a:	ee77 7a87 	vadd.f32	s15, s15, s14
 802344e:	ece5 7a01 	vstmia	r5!, {s15}
 8023452:	4565      	cmp	r5, ip
 8023454:	46c6      	mov	lr, r8
 8023456:	f108 0804 	add.w	r8, r8, #4
 802345a:	d1af      	bne.n	80233bc <arm_conv_f32+0x46c>
 802345c:	e9dd 7002 	ldrd	r7, r0, [sp, #8]
 8023460:	4659      	mov	r1, fp
 8023462:	9b01      	ldr	r3, [sp, #4]
 8023464:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8023468:	e71c      	b.n	80232a4 <arm_conv_f32+0x354>
 802346a:	4686      	mov	lr, r0
 802346c:	e785      	b.n	802337a <arm_conv_f32+0x42a>
 802346e:	46ac      	mov	ip, r5
 8023470:	e7f7      	b.n	8023462 <arm_conv_f32+0x512>
 8023472:	9a01      	ldr	r2, [sp, #4]
 8023474:	2a00      	cmp	r2, #0
 8023476:	f47f aedd 	bne.w	8023234 <arm_conv_f32+0x2e4>
 802347a:	e76d      	b.n	8023358 <arm_conv_f32+0x408>
 802347c:	ed5f 7a8f 	vldr	s15, [pc, #-572]	@ 8023244 <arm_conv_f32+0x2f4>
 8023480:	4680      	mov	r8, r0
 8023482:	e5e3      	b.n	802304c <arm_conv_f32+0xfc>

08023484 <arm_negate_f32>:
 8023484:	b470      	push	{r4, r5, r6}
 8023486:	0896      	lsrs	r6, r2, #2
 8023488:	d025      	beq.n	80234d6 <arm_negate_f32+0x52>
 802348a:	f100 0410 	add.w	r4, r0, #16
 802348e:	f101 0310 	add.w	r3, r1, #16
 8023492:	4635      	mov	r5, r6
 8023494:	ed54 7a04 	vldr	s15, [r4, #-16]
 8023498:	eef1 7a67 	vneg.f32	s15, s15
 802349c:	ed43 7a04 	vstr	s15, [r3, #-16]
 80234a0:	ed54 7a03 	vldr	s15, [r4, #-12]
 80234a4:	eef1 7a67 	vneg.f32	s15, s15
 80234a8:	ed43 7a03 	vstr	s15, [r3, #-12]
 80234ac:	ed54 7a02 	vldr	s15, [r4, #-8]
 80234b0:	eef1 7a67 	vneg.f32	s15, s15
 80234b4:	ed43 7a02 	vstr	s15, [r3, #-8]
 80234b8:	ed54 7a01 	vldr	s15, [r4, #-4]
 80234bc:	3d01      	subs	r5, #1
 80234be:	eef1 7a67 	vneg.f32	s15, s15
 80234c2:	ed43 7a01 	vstr	s15, [r3, #-4]
 80234c6:	f104 0410 	add.w	r4, r4, #16
 80234ca:	f103 0310 	add.w	r3, r3, #16
 80234ce:	d1e1      	bne.n	8023494 <arm_negate_f32+0x10>
 80234d0:	0136      	lsls	r6, r6, #4
 80234d2:	4430      	add	r0, r6
 80234d4:	4431      	add	r1, r6
 80234d6:	f012 0203 	ands.w	r2, r2, #3
 80234da:	d015      	beq.n	8023508 <arm_negate_f32+0x84>
 80234dc:	edd0 7a00 	vldr	s15, [r0]
 80234e0:	3a01      	subs	r2, #1
 80234e2:	eef1 7a67 	vneg.f32	s15, s15
 80234e6:	edc1 7a00 	vstr	s15, [r1]
 80234ea:	d00d      	beq.n	8023508 <arm_negate_f32+0x84>
 80234ec:	edd0 7a01 	vldr	s15, [r0, #4]
 80234f0:	2a01      	cmp	r2, #1
 80234f2:	eef1 7a67 	vneg.f32	s15, s15
 80234f6:	edc1 7a01 	vstr	s15, [r1, #4]
 80234fa:	d005      	beq.n	8023508 <arm_negate_f32+0x84>
 80234fc:	edd0 7a02 	vldr	s15, [r0, #8]
 8023500:	eef1 7a67 	vneg.f32	s15, s15
 8023504:	edc1 7a02 	vstr	s15, [r1, #8]
 8023508:	bc70      	pop	{r4, r5, r6}
 802350a:	4770      	bx	lr

0802350c <arm_mult_f32>:
 802350c:	ea5f 0c93 	movs.w	ip, r3, lsr #2
 8023510:	b4f0      	push	{r4, r5, r6, r7}
 8023512:	d033      	beq.n	802357c <arm_mult_f32+0x70>
 8023514:	f100 0610 	add.w	r6, r0, #16
 8023518:	f101 0510 	add.w	r5, r1, #16
 802351c:	f102 0410 	add.w	r4, r2, #16
 8023520:	4667      	mov	r7, ip
 8023522:	ed15 7a04 	vldr	s14, [r5, #-16]
 8023526:	ed56 7a04 	vldr	s15, [r6, #-16]
 802352a:	ee67 7a87 	vmul.f32	s15, s15, s14
 802352e:	3f01      	subs	r7, #1
 8023530:	ed44 7a04 	vstr	s15, [r4, #-16]
 8023534:	ed15 7a03 	vldr	s14, [r5, #-12]
 8023538:	ed56 7a03 	vldr	s15, [r6, #-12]
 802353c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8023540:	f106 0610 	add.w	r6, r6, #16
 8023544:	ed44 7a03 	vstr	s15, [r4, #-12]
 8023548:	ed15 7a02 	vldr	s14, [r5, #-8]
 802354c:	ed56 7a06 	vldr	s15, [r6, #-24]	@ 0xffffffe8
 8023550:	ee67 7a87 	vmul.f32	s15, s15, s14
 8023554:	f105 0510 	add.w	r5, r5, #16
 8023558:	ed44 7a02 	vstr	s15, [r4, #-8]
 802355c:	ed56 7a05 	vldr	s15, [r6, #-20]	@ 0xffffffec
 8023560:	ed15 7a05 	vldr	s14, [r5, #-20]	@ 0xffffffec
 8023564:	ee67 7a87 	vmul.f32	s15, s15, s14
 8023568:	f104 0410 	add.w	r4, r4, #16
 802356c:	ed44 7a05 	vstr	s15, [r4, #-20]	@ 0xffffffec
 8023570:	d1d7      	bne.n	8023522 <arm_mult_f32+0x16>
 8023572:	ea4f 140c 	mov.w	r4, ip, lsl #4
 8023576:	4420      	add	r0, r4
 8023578:	4421      	add	r1, r4
 802357a:	4422      	add	r2, r4
 802357c:	f013 0303 	ands.w	r3, r3, #3
 8023580:	d01b      	beq.n	80235ba <arm_mult_f32+0xae>
 8023582:	edd1 7a00 	vldr	s15, [r1]
 8023586:	ed90 7a00 	vldr	s14, [r0]
 802358a:	ee67 7a87 	vmul.f32	s15, s15, s14
 802358e:	3b01      	subs	r3, #1
 8023590:	edc2 7a00 	vstr	s15, [r2]
 8023594:	d011      	beq.n	80235ba <arm_mult_f32+0xae>
 8023596:	edd0 7a01 	vldr	s15, [r0, #4]
 802359a:	ed91 7a01 	vldr	s14, [r1, #4]
 802359e:	ee67 7a87 	vmul.f32	s15, s15, s14
 80235a2:	2b01      	cmp	r3, #1
 80235a4:	edc2 7a01 	vstr	s15, [r2, #4]
 80235a8:	d007      	beq.n	80235ba <arm_mult_f32+0xae>
 80235aa:	edd0 7a02 	vldr	s15, [r0, #8]
 80235ae:	ed91 7a02 	vldr	s14, [r1, #8]
 80235b2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80235b6:	edc2 7a02 	vstr	s15, [r2, #8]
 80235ba:	bcf0      	pop	{r4, r5, r6, r7}
 80235bc:	4770      	bx	lr
 80235be:	bf00      	nop

080235c0 <arm_add_f32>:
 80235c0:	ea5f 0c93 	movs.w	ip, r3, lsr #2
 80235c4:	b4f0      	push	{r4, r5, r6, r7}
 80235c6:	d033      	beq.n	8023630 <arm_add_f32+0x70>
 80235c8:	f100 0610 	add.w	r6, r0, #16
 80235cc:	f101 0510 	add.w	r5, r1, #16
 80235d0:	f102 0410 	add.w	r4, r2, #16
 80235d4:	4667      	mov	r7, ip
 80235d6:	ed15 7a04 	vldr	s14, [r5, #-16]
 80235da:	ed56 7a04 	vldr	s15, [r6, #-16]
 80235de:	ee77 7a87 	vadd.f32	s15, s15, s14
 80235e2:	3f01      	subs	r7, #1
 80235e4:	ed44 7a04 	vstr	s15, [r4, #-16]
 80235e8:	ed15 7a03 	vldr	s14, [r5, #-12]
 80235ec:	ed56 7a03 	vldr	s15, [r6, #-12]
 80235f0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80235f4:	f106 0610 	add.w	r6, r6, #16
 80235f8:	ed44 7a03 	vstr	s15, [r4, #-12]
 80235fc:	ed15 7a02 	vldr	s14, [r5, #-8]
 8023600:	ed56 7a06 	vldr	s15, [r6, #-24]	@ 0xffffffe8
 8023604:	ee77 7a87 	vadd.f32	s15, s15, s14
 8023608:	f105 0510 	add.w	r5, r5, #16
 802360c:	ed44 7a02 	vstr	s15, [r4, #-8]
 8023610:	ed56 7a05 	vldr	s15, [r6, #-20]	@ 0xffffffec
 8023614:	ed15 7a05 	vldr	s14, [r5, #-20]	@ 0xffffffec
 8023618:	ee77 7a87 	vadd.f32	s15, s15, s14
 802361c:	f104 0410 	add.w	r4, r4, #16
 8023620:	ed44 7a05 	vstr	s15, [r4, #-20]	@ 0xffffffec
 8023624:	d1d7      	bne.n	80235d6 <arm_add_f32+0x16>
 8023626:	ea4f 140c 	mov.w	r4, ip, lsl #4
 802362a:	4420      	add	r0, r4
 802362c:	4421      	add	r1, r4
 802362e:	4422      	add	r2, r4
 8023630:	f013 0303 	ands.w	r3, r3, #3
 8023634:	d01b      	beq.n	802366e <arm_add_f32+0xae>
 8023636:	edd1 7a00 	vldr	s15, [r1]
 802363a:	ed90 7a00 	vldr	s14, [r0]
 802363e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8023642:	3b01      	subs	r3, #1
 8023644:	edc2 7a00 	vstr	s15, [r2]
 8023648:	d011      	beq.n	802366e <arm_add_f32+0xae>
 802364a:	edd0 7a01 	vldr	s15, [r0, #4]
 802364e:	ed91 7a01 	vldr	s14, [r1, #4]
 8023652:	ee77 7a87 	vadd.f32	s15, s15, s14
 8023656:	2b01      	cmp	r3, #1
 8023658:	edc2 7a01 	vstr	s15, [r2, #4]
 802365c:	d007      	beq.n	802366e <arm_add_f32+0xae>
 802365e:	edd0 7a02 	vldr	s15, [r0, #8]
 8023662:	ed91 7a02 	vldr	s14, [r1, #8]
 8023666:	ee77 7a87 	vadd.f32	s15, s15, s14
 802366a:	edc2 7a02 	vstr	s15, [r2, #8]
 802366e:	bcf0      	pop	{r4, r5, r6, r7}
 8023670:	4770      	bx	lr
 8023672:	bf00      	nop

08023674 <memset>:
 8023674:	4402      	add	r2, r0
 8023676:	4603      	mov	r3, r0
 8023678:	4293      	cmp	r3, r2
 802367a:	d100      	bne.n	802367e <memset+0xa>
 802367c:	4770      	bx	lr
 802367e:	f803 1b01 	strb.w	r1, [r3], #1
 8023682:	e7f9      	b.n	8023678 <memset+0x4>

08023684 <__errno>:
 8023684:	4b01      	ldr	r3, [pc, #4]	@ (802368c <__errno+0x8>)
 8023686:	6818      	ldr	r0, [r3, #0]
 8023688:	4770      	bx	lr
 802368a:	bf00      	nop
 802368c:	2000000c 	.word	0x2000000c

08023690 <__libc_init_array>:
 8023690:	b570      	push	{r4, r5, r6, lr}
 8023692:	4d0d      	ldr	r5, [pc, #52]	@ (80236c8 <__libc_init_array+0x38>)
 8023694:	4c0d      	ldr	r4, [pc, #52]	@ (80236cc <__libc_init_array+0x3c>)
 8023696:	1b64      	subs	r4, r4, r5
 8023698:	10a4      	asrs	r4, r4, #2
 802369a:	2600      	movs	r6, #0
 802369c:	42a6      	cmp	r6, r4
 802369e:	d109      	bne.n	80236b4 <__libc_init_array+0x24>
 80236a0:	4d0b      	ldr	r5, [pc, #44]	@ (80236d0 <__libc_init_array+0x40>)
 80236a2:	4c0c      	ldr	r4, [pc, #48]	@ (80236d4 <__libc_init_array+0x44>)
 80236a4:	f000 ffd4 	bl	8024650 <_init>
 80236a8:	1b64      	subs	r4, r4, r5
 80236aa:	10a4      	asrs	r4, r4, #2
 80236ac:	2600      	movs	r6, #0
 80236ae:	42a6      	cmp	r6, r4
 80236b0:	d105      	bne.n	80236be <__libc_init_array+0x2e>
 80236b2:	bd70      	pop	{r4, r5, r6, pc}
 80236b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80236b8:	4798      	blx	r3
 80236ba:	3601      	adds	r6, #1
 80236bc:	e7ee      	b.n	802369c <__libc_init_array+0xc>
 80236be:	f855 3b04 	ldr.w	r3, [r5], #4
 80236c2:	4798      	blx	r3
 80236c4:	3601      	adds	r6, #1
 80236c6:	e7f2      	b.n	80236ae <__libc_init_array+0x1e>
 80236c8:	08024898 	.word	0x08024898
 80236cc:	08024898 	.word	0x08024898
 80236d0:	08024898 	.word	0x08024898
 80236d4:	0802489c 	.word	0x0802489c

080236d8 <memcpy>:
 80236d8:	440a      	add	r2, r1
 80236da:	4291      	cmp	r1, r2
 80236dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80236e0:	d100      	bne.n	80236e4 <memcpy+0xc>
 80236e2:	4770      	bx	lr
 80236e4:	b510      	push	{r4, lr}
 80236e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80236ea:	f803 4f01 	strb.w	r4, [r3, #1]!
 80236ee:	4291      	cmp	r1, r2
 80236f0:	d1f9      	bne.n	80236e6 <memcpy+0xe>
 80236f2:	bd10      	pop	{r4, pc}

080236f4 <pow>:
 80236f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80236f6:	ed2d 8b02 	vpush	{d8}
 80236fa:	eeb0 8a40 	vmov.f32	s16, s0
 80236fe:	eef0 8a60 	vmov.f32	s17, s1
 8023702:	ec55 4b11 	vmov	r4, r5, d1
 8023706:	f000 f99b 	bl	8023a40 <__ieee754_pow>
 802370a:	4622      	mov	r2, r4
 802370c:	462b      	mov	r3, r5
 802370e:	4620      	mov	r0, r4
 8023710:	4629      	mov	r1, r5
 8023712:	ec57 6b10 	vmov	r6, r7, d0
 8023716:	f7fd f913 	bl	8020940 <__aeabi_dcmpun>
 802371a:	2800      	cmp	r0, #0
 802371c:	d13b      	bne.n	8023796 <pow+0xa2>
 802371e:	ec51 0b18 	vmov	r0, r1, d8
 8023722:	2200      	movs	r2, #0
 8023724:	2300      	movs	r3, #0
 8023726:	f7fd f8d9 	bl	80208dc <__aeabi_dcmpeq>
 802372a:	b1b8      	cbz	r0, 802375c <pow+0x68>
 802372c:	2200      	movs	r2, #0
 802372e:	2300      	movs	r3, #0
 8023730:	4620      	mov	r0, r4
 8023732:	4629      	mov	r1, r5
 8023734:	f7fd f8d2 	bl	80208dc <__aeabi_dcmpeq>
 8023738:	2800      	cmp	r0, #0
 802373a:	d146      	bne.n	80237ca <pow+0xd6>
 802373c:	ec45 4b10 	vmov	d0, r4, r5
 8023740:	f000 f892 	bl	8023868 <finite>
 8023744:	b338      	cbz	r0, 8023796 <pow+0xa2>
 8023746:	2200      	movs	r2, #0
 8023748:	2300      	movs	r3, #0
 802374a:	4620      	mov	r0, r4
 802374c:	4629      	mov	r1, r5
 802374e:	f7fd f8cf 	bl	80208f0 <__aeabi_dcmplt>
 8023752:	b300      	cbz	r0, 8023796 <pow+0xa2>
 8023754:	f7ff ff96 	bl	8023684 <__errno>
 8023758:	2322      	movs	r3, #34	@ 0x22
 802375a:	e01b      	b.n	8023794 <pow+0xa0>
 802375c:	ec47 6b10 	vmov	d0, r6, r7
 8023760:	f000 f882 	bl	8023868 <finite>
 8023764:	b9e0      	cbnz	r0, 80237a0 <pow+0xac>
 8023766:	eeb0 0a48 	vmov.f32	s0, s16
 802376a:	eef0 0a68 	vmov.f32	s1, s17
 802376e:	f000 f87b 	bl	8023868 <finite>
 8023772:	b1a8      	cbz	r0, 80237a0 <pow+0xac>
 8023774:	ec45 4b10 	vmov	d0, r4, r5
 8023778:	f000 f876 	bl	8023868 <finite>
 802377c:	b180      	cbz	r0, 80237a0 <pow+0xac>
 802377e:	4632      	mov	r2, r6
 8023780:	463b      	mov	r3, r7
 8023782:	4630      	mov	r0, r6
 8023784:	4639      	mov	r1, r7
 8023786:	f7fd f8db 	bl	8020940 <__aeabi_dcmpun>
 802378a:	2800      	cmp	r0, #0
 802378c:	d0e2      	beq.n	8023754 <pow+0x60>
 802378e:	f7ff ff79 	bl	8023684 <__errno>
 8023792:	2321      	movs	r3, #33	@ 0x21
 8023794:	6003      	str	r3, [r0, #0]
 8023796:	ecbd 8b02 	vpop	{d8}
 802379a:	ec47 6b10 	vmov	d0, r6, r7
 802379e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80237a0:	2200      	movs	r2, #0
 80237a2:	2300      	movs	r3, #0
 80237a4:	4630      	mov	r0, r6
 80237a6:	4639      	mov	r1, r7
 80237a8:	f7fd f898 	bl	80208dc <__aeabi_dcmpeq>
 80237ac:	2800      	cmp	r0, #0
 80237ae:	d0f2      	beq.n	8023796 <pow+0xa2>
 80237b0:	eeb0 0a48 	vmov.f32	s0, s16
 80237b4:	eef0 0a68 	vmov.f32	s1, s17
 80237b8:	f000 f856 	bl	8023868 <finite>
 80237bc:	2800      	cmp	r0, #0
 80237be:	d0ea      	beq.n	8023796 <pow+0xa2>
 80237c0:	ec45 4b10 	vmov	d0, r4, r5
 80237c4:	f000 f850 	bl	8023868 <finite>
 80237c8:	e7c3      	b.n	8023752 <pow+0x5e>
 80237ca:	4f01      	ldr	r7, [pc, #4]	@ (80237d0 <pow+0xdc>)
 80237cc:	2600      	movs	r6, #0
 80237ce:	e7e2      	b.n	8023796 <pow+0xa2>
 80237d0:	3ff00000 	.word	0x3ff00000

080237d4 <sqrt>:
 80237d4:	b538      	push	{r3, r4, r5, lr}
 80237d6:	ed2d 8b02 	vpush	{d8}
 80237da:	ec55 4b10 	vmov	r4, r5, d0
 80237de:	f000 f84f 	bl	8023880 <__ieee754_sqrt>
 80237e2:	4622      	mov	r2, r4
 80237e4:	462b      	mov	r3, r5
 80237e6:	4620      	mov	r0, r4
 80237e8:	4629      	mov	r1, r5
 80237ea:	eeb0 8a40 	vmov.f32	s16, s0
 80237ee:	eef0 8a60 	vmov.f32	s17, s1
 80237f2:	f7fd f8a5 	bl	8020940 <__aeabi_dcmpun>
 80237f6:	b990      	cbnz	r0, 802381e <sqrt+0x4a>
 80237f8:	2200      	movs	r2, #0
 80237fa:	2300      	movs	r3, #0
 80237fc:	4620      	mov	r0, r4
 80237fe:	4629      	mov	r1, r5
 8023800:	f7fd f876 	bl	80208f0 <__aeabi_dcmplt>
 8023804:	b158      	cbz	r0, 802381e <sqrt+0x4a>
 8023806:	f7ff ff3d 	bl	8023684 <__errno>
 802380a:	2321      	movs	r3, #33	@ 0x21
 802380c:	6003      	str	r3, [r0, #0]
 802380e:	2200      	movs	r2, #0
 8023810:	2300      	movs	r3, #0
 8023812:	4610      	mov	r0, r2
 8023814:	4619      	mov	r1, r3
 8023816:	f7fc ff23 	bl	8020660 <__aeabi_ddiv>
 802381a:	ec41 0b18 	vmov	d8, r0, r1
 802381e:	eeb0 0a48 	vmov.f32	s0, s16
 8023822:	eef0 0a68 	vmov.f32	s1, s17
 8023826:	ecbd 8b02 	vpop	{d8}
 802382a:	bd38      	pop	{r3, r4, r5, pc}

0802382c <sqrtf>:
 802382c:	b508      	push	{r3, lr}
 802382e:	ed2d 8b02 	vpush	{d8}
 8023832:	eeb0 8a40 	vmov.f32	s16, s0
 8023836:	f000 f8fd 	bl	8023a34 <__ieee754_sqrtf>
 802383a:	eeb4 8a48 	vcmp.f32	s16, s16
 802383e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023842:	d60c      	bvs.n	802385e <sqrtf+0x32>
 8023844:	eddf 8a07 	vldr	s17, [pc, #28]	@ 8023864 <sqrtf+0x38>
 8023848:	eeb4 8ae8 	vcmpe.f32	s16, s17
 802384c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023850:	d505      	bpl.n	802385e <sqrtf+0x32>
 8023852:	f7ff ff17 	bl	8023684 <__errno>
 8023856:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 802385a:	2321      	movs	r3, #33	@ 0x21
 802385c:	6003      	str	r3, [r0, #0]
 802385e:	ecbd 8b02 	vpop	{d8}
 8023862:	bd08      	pop	{r3, pc}
 8023864:	00000000 	.word	0x00000000

08023868 <finite>:
 8023868:	b082      	sub	sp, #8
 802386a:	ed8d 0b00 	vstr	d0, [sp]
 802386e:	9801      	ldr	r0, [sp, #4]
 8023870:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 8023874:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 8023878:	0fc0      	lsrs	r0, r0, #31
 802387a:	b002      	add	sp, #8
 802387c:	4770      	bx	lr
	...

08023880 <__ieee754_sqrt>:
 8023880:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023884:	4a68      	ldr	r2, [pc, #416]	@ (8023a28 <__ieee754_sqrt+0x1a8>)
 8023886:	ec55 4b10 	vmov	r4, r5, d0
 802388a:	43aa      	bics	r2, r5
 802388c:	462b      	mov	r3, r5
 802388e:	4621      	mov	r1, r4
 8023890:	d110      	bne.n	80238b4 <__ieee754_sqrt+0x34>
 8023892:	4622      	mov	r2, r4
 8023894:	4620      	mov	r0, r4
 8023896:	4629      	mov	r1, r5
 8023898:	f7fc fdb8 	bl	802040c <__aeabi_dmul>
 802389c:	4602      	mov	r2, r0
 802389e:	460b      	mov	r3, r1
 80238a0:	4620      	mov	r0, r4
 80238a2:	4629      	mov	r1, r5
 80238a4:	f7fc fbfc 	bl	80200a0 <__adddf3>
 80238a8:	4604      	mov	r4, r0
 80238aa:	460d      	mov	r5, r1
 80238ac:	ec45 4b10 	vmov	d0, r4, r5
 80238b0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80238b4:	2d00      	cmp	r5, #0
 80238b6:	dc0e      	bgt.n	80238d6 <__ieee754_sqrt+0x56>
 80238b8:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 80238bc:	4322      	orrs	r2, r4
 80238be:	d0f5      	beq.n	80238ac <__ieee754_sqrt+0x2c>
 80238c0:	b19d      	cbz	r5, 80238ea <__ieee754_sqrt+0x6a>
 80238c2:	4622      	mov	r2, r4
 80238c4:	4620      	mov	r0, r4
 80238c6:	4629      	mov	r1, r5
 80238c8:	f7fc fbe8 	bl	802009c <__aeabi_dsub>
 80238cc:	4602      	mov	r2, r0
 80238ce:	460b      	mov	r3, r1
 80238d0:	f7fc fec6 	bl	8020660 <__aeabi_ddiv>
 80238d4:	e7e8      	b.n	80238a8 <__ieee754_sqrt+0x28>
 80238d6:	152a      	asrs	r2, r5, #20
 80238d8:	d115      	bne.n	8023906 <__ieee754_sqrt+0x86>
 80238da:	2000      	movs	r0, #0
 80238dc:	e009      	b.n	80238f2 <__ieee754_sqrt+0x72>
 80238de:	0acb      	lsrs	r3, r1, #11
 80238e0:	3a15      	subs	r2, #21
 80238e2:	0549      	lsls	r1, r1, #21
 80238e4:	2b00      	cmp	r3, #0
 80238e6:	d0fa      	beq.n	80238de <__ieee754_sqrt+0x5e>
 80238e8:	e7f7      	b.n	80238da <__ieee754_sqrt+0x5a>
 80238ea:	462a      	mov	r2, r5
 80238ec:	e7fa      	b.n	80238e4 <__ieee754_sqrt+0x64>
 80238ee:	005b      	lsls	r3, r3, #1
 80238f0:	3001      	adds	r0, #1
 80238f2:	02dc      	lsls	r4, r3, #11
 80238f4:	d5fb      	bpl.n	80238ee <__ieee754_sqrt+0x6e>
 80238f6:	1e44      	subs	r4, r0, #1
 80238f8:	1b12      	subs	r2, r2, r4
 80238fa:	f1c0 0420 	rsb	r4, r0, #32
 80238fe:	fa21 f404 	lsr.w	r4, r1, r4
 8023902:	4323      	orrs	r3, r4
 8023904:	4081      	lsls	r1, r0
 8023906:	f3c3 0313 	ubfx	r3, r3, #0, #20
 802390a:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 802390e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8023912:	07d2      	lsls	r2, r2, #31
 8023914:	bf5c      	itt	pl
 8023916:	005b      	lslpl	r3, r3, #1
 8023918:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 802391c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8023920:	bf58      	it	pl
 8023922:	0049      	lslpl	r1, r1, #1
 8023924:	2600      	movs	r6, #0
 8023926:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 802392a:	106d      	asrs	r5, r5, #1
 802392c:	0049      	lsls	r1, r1, #1
 802392e:	2016      	movs	r0, #22
 8023930:	4632      	mov	r2, r6
 8023932:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 8023936:	1917      	adds	r7, r2, r4
 8023938:	429f      	cmp	r7, r3
 802393a:	bfde      	ittt	le
 802393c:	193a      	addle	r2, r7, r4
 802393e:	1bdb      	suble	r3, r3, r7
 8023940:	1936      	addle	r6, r6, r4
 8023942:	0fcf      	lsrs	r7, r1, #31
 8023944:	3801      	subs	r0, #1
 8023946:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 802394a:	ea4f 0141 	mov.w	r1, r1, lsl #1
 802394e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8023952:	d1f0      	bne.n	8023936 <__ieee754_sqrt+0xb6>
 8023954:	4604      	mov	r4, r0
 8023956:	2720      	movs	r7, #32
 8023958:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 802395c:	429a      	cmp	r2, r3
 802395e:	eb00 0e0c 	add.w	lr, r0, ip
 8023962:	db02      	blt.n	802396a <__ieee754_sqrt+0xea>
 8023964:	d113      	bne.n	802398e <__ieee754_sqrt+0x10e>
 8023966:	458e      	cmp	lr, r1
 8023968:	d811      	bhi.n	802398e <__ieee754_sqrt+0x10e>
 802396a:	f1be 0f00 	cmp.w	lr, #0
 802396e:	eb0e 000c 	add.w	r0, lr, ip
 8023972:	da42      	bge.n	80239fa <__ieee754_sqrt+0x17a>
 8023974:	2800      	cmp	r0, #0
 8023976:	db40      	blt.n	80239fa <__ieee754_sqrt+0x17a>
 8023978:	f102 0801 	add.w	r8, r2, #1
 802397c:	1a9b      	subs	r3, r3, r2
 802397e:	458e      	cmp	lr, r1
 8023980:	bf88      	it	hi
 8023982:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8023986:	eba1 010e 	sub.w	r1, r1, lr
 802398a:	4464      	add	r4, ip
 802398c:	4642      	mov	r2, r8
 802398e:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 8023992:	3f01      	subs	r7, #1
 8023994:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8023998:	ea4f 0141 	mov.w	r1, r1, lsl #1
 802399c:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 80239a0:	d1dc      	bne.n	802395c <__ieee754_sqrt+0xdc>
 80239a2:	4319      	orrs	r1, r3
 80239a4:	d01b      	beq.n	80239de <__ieee754_sqrt+0x15e>
 80239a6:	f8df a084 	ldr.w	sl, [pc, #132]	@ 8023a2c <__ieee754_sqrt+0x1ac>
 80239aa:	f8df b084 	ldr.w	fp, [pc, #132]	@ 8023a30 <__ieee754_sqrt+0x1b0>
 80239ae:	e9da 0100 	ldrd	r0, r1, [sl]
 80239b2:	e9db 2300 	ldrd	r2, r3, [fp]
 80239b6:	f7fc fb71 	bl	802009c <__aeabi_dsub>
 80239ba:	e9da 8900 	ldrd	r8, r9, [sl]
 80239be:	4602      	mov	r2, r0
 80239c0:	460b      	mov	r3, r1
 80239c2:	4640      	mov	r0, r8
 80239c4:	4649      	mov	r1, r9
 80239c6:	f7fc ff9d 	bl	8020904 <__aeabi_dcmple>
 80239ca:	b140      	cbz	r0, 80239de <__ieee754_sqrt+0x15e>
 80239cc:	f1b4 3fff 	cmp.w	r4, #4294967295
 80239d0:	e9da 0100 	ldrd	r0, r1, [sl]
 80239d4:	e9db 2300 	ldrd	r2, r3, [fp]
 80239d8:	d111      	bne.n	80239fe <__ieee754_sqrt+0x17e>
 80239da:	3601      	adds	r6, #1
 80239dc:	463c      	mov	r4, r7
 80239de:	1072      	asrs	r2, r6, #1
 80239e0:	0863      	lsrs	r3, r4, #1
 80239e2:	07f1      	lsls	r1, r6, #31
 80239e4:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 80239e8:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 80239ec:	bf48      	it	mi
 80239ee:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 80239f2:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 80239f6:	4618      	mov	r0, r3
 80239f8:	e756      	b.n	80238a8 <__ieee754_sqrt+0x28>
 80239fa:	4690      	mov	r8, r2
 80239fc:	e7be      	b.n	802397c <__ieee754_sqrt+0xfc>
 80239fe:	f7fc fb4f 	bl	80200a0 <__adddf3>
 8023a02:	e9da 8900 	ldrd	r8, r9, [sl]
 8023a06:	4602      	mov	r2, r0
 8023a08:	460b      	mov	r3, r1
 8023a0a:	4640      	mov	r0, r8
 8023a0c:	4649      	mov	r1, r9
 8023a0e:	f7fc ff6f 	bl	80208f0 <__aeabi_dcmplt>
 8023a12:	b120      	cbz	r0, 8023a1e <__ieee754_sqrt+0x19e>
 8023a14:	1ca0      	adds	r0, r4, #2
 8023a16:	bf08      	it	eq
 8023a18:	3601      	addeq	r6, #1
 8023a1a:	3402      	adds	r4, #2
 8023a1c:	e7df      	b.n	80239de <__ieee754_sqrt+0x15e>
 8023a1e:	1c63      	adds	r3, r4, #1
 8023a20:	f023 0401 	bic.w	r4, r3, #1
 8023a24:	e7db      	b.n	80239de <__ieee754_sqrt+0x15e>
 8023a26:	bf00      	nop
 8023a28:	7ff00000 	.word	0x7ff00000
 8023a2c:	20000068 	.word	0x20000068
 8023a30:	20000060 	.word	0x20000060

08023a34 <__ieee754_sqrtf>:
 8023a34:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8023a38:	4770      	bx	lr
 8023a3a:	0000      	movs	r0, r0
 8023a3c:	0000      	movs	r0, r0
	...

08023a40 <__ieee754_pow>:
 8023a40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023a44:	b091      	sub	sp, #68	@ 0x44
 8023a46:	ed8d 1b00 	vstr	d1, [sp]
 8023a4a:	e9dd 1900 	ldrd	r1, r9, [sp]
 8023a4e:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 8023a52:	ea5a 0001 	orrs.w	r0, sl, r1
 8023a56:	ec57 6b10 	vmov	r6, r7, d0
 8023a5a:	d113      	bne.n	8023a84 <__ieee754_pow+0x44>
 8023a5c:	19b3      	adds	r3, r6, r6
 8023a5e:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 8023a62:	4152      	adcs	r2, r2
 8023a64:	4298      	cmp	r0, r3
 8023a66:	4b98      	ldr	r3, [pc, #608]	@ (8023cc8 <__ieee754_pow+0x288>)
 8023a68:	4193      	sbcs	r3, r2
 8023a6a:	f080 84ea 	bcs.w	8024442 <__ieee754_pow+0xa02>
 8023a6e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8023a72:	4630      	mov	r0, r6
 8023a74:	4639      	mov	r1, r7
 8023a76:	f7fc fb13 	bl	80200a0 <__adddf3>
 8023a7a:	ec41 0b10 	vmov	d0, r0, r1
 8023a7e:	b011      	add	sp, #68	@ 0x44
 8023a80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023a84:	4a91      	ldr	r2, [pc, #580]	@ (8023ccc <__ieee754_pow+0x28c>)
 8023a86:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8023a8a:	4590      	cmp	r8, r2
 8023a8c:	463d      	mov	r5, r7
 8023a8e:	4633      	mov	r3, r6
 8023a90:	d806      	bhi.n	8023aa0 <__ieee754_pow+0x60>
 8023a92:	d101      	bne.n	8023a98 <__ieee754_pow+0x58>
 8023a94:	2e00      	cmp	r6, #0
 8023a96:	d1ea      	bne.n	8023a6e <__ieee754_pow+0x2e>
 8023a98:	4592      	cmp	sl, r2
 8023a9a:	d801      	bhi.n	8023aa0 <__ieee754_pow+0x60>
 8023a9c:	d10e      	bne.n	8023abc <__ieee754_pow+0x7c>
 8023a9e:	b169      	cbz	r1, 8023abc <__ieee754_pow+0x7c>
 8023aa0:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 8023aa4:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 8023aa8:	431d      	orrs	r5, r3
 8023aaa:	d1e0      	bne.n	8023a6e <__ieee754_pow+0x2e>
 8023aac:	e9dd 3200 	ldrd	r3, r2, [sp]
 8023ab0:	18db      	adds	r3, r3, r3
 8023ab2:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 8023ab6:	4152      	adcs	r2, r2
 8023ab8:	429d      	cmp	r5, r3
 8023aba:	e7d4      	b.n	8023a66 <__ieee754_pow+0x26>
 8023abc:	2d00      	cmp	r5, #0
 8023abe:	46c3      	mov	fp, r8
 8023ac0:	da3a      	bge.n	8023b38 <__ieee754_pow+0xf8>
 8023ac2:	4a83      	ldr	r2, [pc, #524]	@ (8023cd0 <__ieee754_pow+0x290>)
 8023ac4:	4592      	cmp	sl, r2
 8023ac6:	d84d      	bhi.n	8023b64 <__ieee754_pow+0x124>
 8023ac8:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 8023acc:	4592      	cmp	sl, r2
 8023ace:	f240 84c7 	bls.w	8024460 <__ieee754_pow+0xa20>
 8023ad2:	ea4f 522a 	mov.w	r2, sl, asr #20
 8023ad6:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8023ada:	2a14      	cmp	r2, #20
 8023adc:	dd0f      	ble.n	8023afe <__ieee754_pow+0xbe>
 8023ade:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 8023ae2:	fa21 f402 	lsr.w	r4, r1, r2
 8023ae6:	fa04 f202 	lsl.w	r2, r4, r2
 8023aea:	428a      	cmp	r2, r1
 8023aec:	f040 84b8 	bne.w	8024460 <__ieee754_pow+0xa20>
 8023af0:	f004 0401 	and.w	r4, r4, #1
 8023af4:	f1c4 0402 	rsb	r4, r4, #2
 8023af8:	2900      	cmp	r1, #0
 8023afa:	d158      	bne.n	8023bae <__ieee754_pow+0x16e>
 8023afc:	e00e      	b.n	8023b1c <__ieee754_pow+0xdc>
 8023afe:	2900      	cmp	r1, #0
 8023b00:	d154      	bne.n	8023bac <__ieee754_pow+0x16c>
 8023b02:	f1c2 0214 	rsb	r2, r2, #20
 8023b06:	fa4a f402 	asr.w	r4, sl, r2
 8023b0a:	fa04 f202 	lsl.w	r2, r4, r2
 8023b0e:	4552      	cmp	r2, sl
 8023b10:	f040 84a3 	bne.w	802445a <__ieee754_pow+0xa1a>
 8023b14:	f004 0401 	and.w	r4, r4, #1
 8023b18:	f1c4 0402 	rsb	r4, r4, #2
 8023b1c:	4a6d      	ldr	r2, [pc, #436]	@ (8023cd4 <__ieee754_pow+0x294>)
 8023b1e:	4592      	cmp	sl, r2
 8023b20:	d12e      	bne.n	8023b80 <__ieee754_pow+0x140>
 8023b22:	f1b9 0f00 	cmp.w	r9, #0
 8023b26:	f280 8494 	bge.w	8024452 <__ieee754_pow+0xa12>
 8023b2a:	496a      	ldr	r1, [pc, #424]	@ (8023cd4 <__ieee754_pow+0x294>)
 8023b2c:	4632      	mov	r2, r6
 8023b2e:	463b      	mov	r3, r7
 8023b30:	2000      	movs	r0, #0
 8023b32:	f7fc fd95 	bl	8020660 <__aeabi_ddiv>
 8023b36:	e7a0      	b.n	8023a7a <__ieee754_pow+0x3a>
 8023b38:	2400      	movs	r4, #0
 8023b3a:	bbc1      	cbnz	r1, 8023bae <__ieee754_pow+0x16e>
 8023b3c:	4a63      	ldr	r2, [pc, #396]	@ (8023ccc <__ieee754_pow+0x28c>)
 8023b3e:	4592      	cmp	sl, r2
 8023b40:	d1ec      	bne.n	8023b1c <__ieee754_pow+0xdc>
 8023b42:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 8023b46:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 8023b4a:	431a      	orrs	r2, r3
 8023b4c:	f000 8479 	beq.w	8024442 <__ieee754_pow+0xa02>
 8023b50:	4b61      	ldr	r3, [pc, #388]	@ (8023cd8 <__ieee754_pow+0x298>)
 8023b52:	4598      	cmp	r8, r3
 8023b54:	d908      	bls.n	8023b68 <__ieee754_pow+0x128>
 8023b56:	f1b9 0f00 	cmp.w	r9, #0
 8023b5a:	f2c0 8476 	blt.w	802444a <__ieee754_pow+0xa0a>
 8023b5e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8023b62:	e78a      	b.n	8023a7a <__ieee754_pow+0x3a>
 8023b64:	2402      	movs	r4, #2
 8023b66:	e7e8      	b.n	8023b3a <__ieee754_pow+0xfa>
 8023b68:	f1b9 0f00 	cmp.w	r9, #0
 8023b6c:	f04f 0000 	mov.w	r0, #0
 8023b70:	f04f 0100 	mov.w	r1, #0
 8023b74:	da81      	bge.n	8023a7a <__ieee754_pow+0x3a>
 8023b76:	e9dd 0300 	ldrd	r0, r3, [sp]
 8023b7a:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8023b7e:	e77c      	b.n	8023a7a <__ieee754_pow+0x3a>
 8023b80:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 8023b84:	d106      	bne.n	8023b94 <__ieee754_pow+0x154>
 8023b86:	4632      	mov	r2, r6
 8023b88:	463b      	mov	r3, r7
 8023b8a:	4630      	mov	r0, r6
 8023b8c:	4639      	mov	r1, r7
 8023b8e:	f7fc fc3d 	bl	802040c <__aeabi_dmul>
 8023b92:	e772      	b.n	8023a7a <__ieee754_pow+0x3a>
 8023b94:	4a51      	ldr	r2, [pc, #324]	@ (8023cdc <__ieee754_pow+0x29c>)
 8023b96:	4591      	cmp	r9, r2
 8023b98:	d109      	bne.n	8023bae <__ieee754_pow+0x16e>
 8023b9a:	2d00      	cmp	r5, #0
 8023b9c:	db07      	blt.n	8023bae <__ieee754_pow+0x16e>
 8023b9e:	ec47 6b10 	vmov	d0, r6, r7
 8023ba2:	b011      	add	sp, #68	@ 0x44
 8023ba4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023ba8:	f7ff be6a 	b.w	8023880 <__ieee754_sqrt>
 8023bac:	2400      	movs	r4, #0
 8023bae:	ec47 6b10 	vmov	d0, r6, r7
 8023bb2:	9302      	str	r3, [sp, #8]
 8023bb4:	f000 fc88 	bl	80244c8 <fabs>
 8023bb8:	9b02      	ldr	r3, [sp, #8]
 8023bba:	ec51 0b10 	vmov	r0, r1, d0
 8023bbe:	bb53      	cbnz	r3, 8023c16 <__ieee754_pow+0x1d6>
 8023bc0:	4b44      	ldr	r3, [pc, #272]	@ (8023cd4 <__ieee754_pow+0x294>)
 8023bc2:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 8023bc6:	429a      	cmp	r2, r3
 8023bc8:	d002      	beq.n	8023bd0 <__ieee754_pow+0x190>
 8023bca:	f1b8 0f00 	cmp.w	r8, #0
 8023bce:	d122      	bne.n	8023c16 <__ieee754_pow+0x1d6>
 8023bd0:	f1b9 0f00 	cmp.w	r9, #0
 8023bd4:	da05      	bge.n	8023be2 <__ieee754_pow+0x1a2>
 8023bd6:	4602      	mov	r2, r0
 8023bd8:	460b      	mov	r3, r1
 8023bda:	2000      	movs	r0, #0
 8023bdc:	493d      	ldr	r1, [pc, #244]	@ (8023cd4 <__ieee754_pow+0x294>)
 8023bde:	f7fc fd3f 	bl	8020660 <__aeabi_ddiv>
 8023be2:	2d00      	cmp	r5, #0
 8023be4:	f6bf af49 	bge.w	8023a7a <__ieee754_pow+0x3a>
 8023be8:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 8023bec:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 8023bf0:	ea58 0804 	orrs.w	r8, r8, r4
 8023bf4:	d108      	bne.n	8023c08 <__ieee754_pow+0x1c8>
 8023bf6:	4602      	mov	r2, r0
 8023bf8:	460b      	mov	r3, r1
 8023bfa:	4610      	mov	r0, r2
 8023bfc:	4619      	mov	r1, r3
 8023bfe:	f7fc fa4d 	bl	802009c <__aeabi_dsub>
 8023c02:	4602      	mov	r2, r0
 8023c04:	460b      	mov	r3, r1
 8023c06:	e794      	b.n	8023b32 <__ieee754_pow+0xf2>
 8023c08:	2c01      	cmp	r4, #1
 8023c0a:	f47f af36 	bne.w	8023a7a <__ieee754_pow+0x3a>
 8023c0e:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8023c12:	4619      	mov	r1, r3
 8023c14:	e731      	b.n	8023a7a <__ieee754_pow+0x3a>
 8023c16:	0feb      	lsrs	r3, r5, #31
 8023c18:	3b01      	subs	r3, #1
 8023c1a:	ea53 0204 	orrs.w	r2, r3, r4
 8023c1e:	d102      	bne.n	8023c26 <__ieee754_pow+0x1e6>
 8023c20:	4632      	mov	r2, r6
 8023c22:	463b      	mov	r3, r7
 8023c24:	e7e9      	b.n	8023bfa <__ieee754_pow+0x1ba>
 8023c26:	3c01      	subs	r4, #1
 8023c28:	431c      	orrs	r4, r3
 8023c2a:	d016      	beq.n	8023c5a <__ieee754_pow+0x21a>
 8023c2c:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 8023cb8 <__ieee754_pow+0x278>
 8023c30:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 8023c34:	ed8d 7b02 	vstr	d7, [sp, #8]
 8023c38:	f240 8112 	bls.w	8023e60 <__ieee754_pow+0x420>
 8023c3c:	4b28      	ldr	r3, [pc, #160]	@ (8023ce0 <__ieee754_pow+0x2a0>)
 8023c3e:	459a      	cmp	sl, r3
 8023c40:	4b25      	ldr	r3, [pc, #148]	@ (8023cd8 <__ieee754_pow+0x298>)
 8023c42:	d916      	bls.n	8023c72 <__ieee754_pow+0x232>
 8023c44:	4598      	cmp	r8, r3
 8023c46:	d80b      	bhi.n	8023c60 <__ieee754_pow+0x220>
 8023c48:	f1b9 0f00 	cmp.w	r9, #0
 8023c4c:	da0b      	bge.n	8023c66 <__ieee754_pow+0x226>
 8023c4e:	2000      	movs	r0, #0
 8023c50:	b011      	add	sp, #68	@ 0x44
 8023c52:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023c56:	f000 bcf3 	b.w	8024640 <__math_oflow>
 8023c5a:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 8023cc0 <__ieee754_pow+0x280>
 8023c5e:	e7e7      	b.n	8023c30 <__ieee754_pow+0x1f0>
 8023c60:	f1b9 0f00 	cmp.w	r9, #0
 8023c64:	dcf3      	bgt.n	8023c4e <__ieee754_pow+0x20e>
 8023c66:	2000      	movs	r0, #0
 8023c68:	b011      	add	sp, #68	@ 0x44
 8023c6a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023c6e:	f000 bcdf 	b.w	8024630 <__math_uflow>
 8023c72:	4598      	cmp	r8, r3
 8023c74:	d20c      	bcs.n	8023c90 <__ieee754_pow+0x250>
 8023c76:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8023c7a:	2200      	movs	r2, #0
 8023c7c:	2300      	movs	r3, #0
 8023c7e:	f7fc fe37 	bl	80208f0 <__aeabi_dcmplt>
 8023c82:	3800      	subs	r0, #0
 8023c84:	bf18      	it	ne
 8023c86:	2001      	movne	r0, #1
 8023c88:	f1b9 0f00 	cmp.w	r9, #0
 8023c8c:	daec      	bge.n	8023c68 <__ieee754_pow+0x228>
 8023c8e:	e7df      	b.n	8023c50 <__ieee754_pow+0x210>
 8023c90:	4b10      	ldr	r3, [pc, #64]	@ (8023cd4 <__ieee754_pow+0x294>)
 8023c92:	4598      	cmp	r8, r3
 8023c94:	f04f 0200 	mov.w	r2, #0
 8023c98:	d924      	bls.n	8023ce4 <__ieee754_pow+0x2a4>
 8023c9a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8023c9e:	2300      	movs	r3, #0
 8023ca0:	f7fc fe26 	bl	80208f0 <__aeabi_dcmplt>
 8023ca4:	3800      	subs	r0, #0
 8023ca6:	bf18      	it	ne
 8023ca8:	2001      	movne	r0, #1
 8023caa:	f1b9 0f00 	cmp.w	r9, #0
 8023cae:	dccf      	bgt.n	8023c50 <__ieee754_pow+0x210>
 8023cb0:	e7da      	b.n	8023c68 <__ieee754_pow+0x228>
 8023cb2:	bf00      	nop
 8023cb4:	f3af 8000 	nop.w
 8023cb8:	00000000 	.word	0x00000000
 8023cbc:	3ff00000 	.word	0x3ff00000
 8023cc0:	00000000 	.word	0x00000000
 8023cc4:	bff00000 	.word	0xbff00000
 8023cc8:	fff00000 	.word	0xfff00000
 8023ccc:	7ff00000 	.word	0x7ff00000
 8023cd0:	433fffff 	.word	0x433fffff
 8023cd4:	3ff00000 	.word	0x3ff00000
 8023cd8:	3fefffff 	.word	0x3fefffff
 8023cdc:	3fe00000 	.word	0x3fe00000
 8023ce0:	43f00000 	.word	0x43f00000
 8023ce4:	4b5a      	ldr	r3, [pc, #360]	@ (8023e50 <__ieee754_pow+0x410>)
 8023ce6:	f7fc f9d9 	bl	802009c <__aeabi_dsub>
 8023cea:	a351      	add	r3, pc, #324	@ (adr r3, 8023e30 <__ieee754_pow+0x3f0>)
 8023cec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023cf0:	4604      	mov	r4, r0
 8023cf2:	460d      	mov	r5, r1
 8023cf4:	f7fc fb8a 	bl	802040c <__aeabi_dmul>
 8023cf8:	a34f      	add	r3, pc, #316	@ (adr r3, 8023e38 <__ieee754_pow+0x3f8>)
 8023cfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023cfe:	4606      	mov	r6, r0
 8023d00:	460f      	mov	r7, r1
 8023d02:	4620      	mov	r0, r4
 8023d04:	4629      	mov	r1, r5
 8023d06:	f7fc fb81 	bl	802040c <__aeabi_dmul>
 8023d0a:	4b52      	ldr	r3, [pc, #328]	@ (8023e54 <__ieee754_pow+0x414>)
 8023d0c:	4682      	mov	sl, r0
 8023d0e:	468b      	mov	fp, r1
 8023d10:	2200      	movs	r2, #0
 8023d12:	4620      	mov	r0, r4
 8023d14:	4629      	mov	r1, r5
 8023d16:	f7fc fb79 	bl	802040c <__aeabi_dmul>
 8023d1a:	4602      	mov	r2, r0
 8023d1c:	460b      	mov	r3, r1
 8023d1e:	a148      	add	r1, pc, #288	@ (adr r1, 8023e40 <__ieee754_pow+0x400>)
 8023d20:	e9d1 0100 	ldrd	r0, r1, [r1]
 8023d24:	f7fc f9ba 	bl	802009c <__aeabi_dsub>
 8023d28:	4622      	mov	r2, r4
 8023d2a:	462b      	mov	r3, r5
 8023d2c:	f7fc fb6e 	bl	802040c <__aeabi_dmul>
 8023d30:	4602      	mov	r2, r0
 8023d32:	460b      	mov	r3, r1
 8023d34:	2000      	movs	r0, #0
 8023d36:	4948      	ldr	r1, [pc, #288]	@ (8023e58 <__ieee754_pow+0x418>)
 8023d38:	f7fc f9b0 	bl	802009c <__aeabi_dsub>
 8023d3c:	4622      	mov	r2, r4
 8023d3e:	4680      	mov	r8, r0
 8023d40:	4689      	mov	r9, r1
 8023d42:	462b      	mov	r3, r5
 8023d44:	4620      	mov	r0, r4
 8023d46:	4629      	mov	r1, r5
 8023d48:	f7fc fb60 	bl	802040c <__aeabi_dmul>
 8023d4c:	4602      	mov	r2, r0
 8023d4e:	460b      	mov	r3, r1
 8023d50:	4640      	mov	r0, r8
 8023d52:	4649      	mov	r1, r9
 8023d54:	f7fc fb5a 	bl	802040c <__aeabi_dmul>
 8023d58:	a33b      	add	r3, pc, #236	@ (adr r3, 8023e48 <__ieee754_pow+0x408>)
 8023d5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023d5e:	f7fc fb55 	bl	802040c <__aeabi_dmul>
 8023d62:	4602      	mov	r2, r0
 8023d64:	460b      	mov	r3, r1
 8023d66:	4650      	mov	r0, sl
 8023d68:	4659      	mov	r1, fp
 8023d6a:	f7fc f997 	bl	802009c <__aeabi_dsub>
 8023d6e:	4602      	mov	r2, r0
 8023d70:	460b      	mov	r3, r1
 8023d72:	4680      	mov	r8, r0
 8023d74:	4689      	mov	r9, r1
 8023d76:	4630      	mov	r0, r6
 8023d78:	4639      	mov	r1, r7
 8023d7a:	f7fc f991 	bl	80200a0 <__adddf3>
 8023d7e:	2400      	movs	r4, #0
 8023d80:	4632      	mov	r2, r6
 8023d82:	463b      	mov	r3, r7
 8023d84:	4620      	mov	r0, r4
 8023d86:	460d      	mov	r5, r1
 8023d88:	f7fc f988 	bl	802009c <__aeabi_dsub>
 8023d8c:	4602      	mov	r2, r0
 8023d8e:	460b      	mov	r3, r1
 8023d90:	4640      	mov	r0, r8
 8023d92:	4649      	mov	r1, r9
 8023d94:	f7fc f982 	bl	802009c <__aeabi_dsub>
 8023d98:	e9dd 2300 	ldrd	r2, r3, [sp]
 8023d9c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8023da0:	2300      	movs	r3, #0
 8023da2:	9304      	str	r3, [sp, #16]
 8023da4:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8023da8:	4606      	mov	r6, r0
 8023daa:	460f      	mov	r7, r1
 8023dac:	4652      	mov	r2, sl
 8023dae:	465b      	mov	r3, fp
 8023db0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8023db4:	f7fc f972 	bl	802009c <__aeabi_dsub>
 8023db8:	4622      	mov	r2, r4
 8023dba:	462b      	mov	r3, r5
 8023dbc:	f7fc fb26 	bl	802040c <__aeabi_dmul>
 8023dc0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8023dc4:	4680      	mov	r8, r0
 8023dc6:	4689      	mov	r9, r1
 8023dc8:	4630      	mov	r0, r6
 8023dca:	4639      	mov	r1, r7
 8023dcc:	f7fc fb1e 	bl	802040c <__aeabi_dmul>
 8023dd0:	4602      	mov	r2, r0
 8023dd2:	460b      	mov	r3, r1
 8023dd4:	4640      	mov	r0, r8
 8023dd6:	4649      	mov	r1, r9
 8023dd8:	f7fc f962 	bl	80200a0 <__adddf3>
 8023ddc:	4652      	mov	r2, sl
 8023dde:	465b      	mov	r3, fp
 8023de0:	4606      	mov	r6, r0
 8023de2:	460f      	mov	r7, r1
 8023de4:	4620      	mov	r0, r4
 8023de6:	4629      	mov	r1, r5
 8023de8:	f7fc fb10 	bl	802040c <__aeabi_dmul>
 8023dec:	460b      	mov	r3, r1
 8023dee:	4602      	mov	r2, r0
 8023df0:	4680      	mov	r8, r0
 8023df2:	4689      	mov	r9, r1
 8023df4:	4630      	mov	r0, r6
 8023df6:	4639      	mov	r1, r7
 8023df8:	f7fc f952 	bl	80200a0 <__adddf3>
 8023dfc:	4b17      	ldr	r3, [pc, #92]	@ (8023e5c <__ieee754_pow+0x41c>)
 8023dfe:	4299      	cmp	r1, r3
 8023e00:	4604      	mov	r4, r0
 8023e02:	460d      	mov	r5, r1
 8023e04:	468a      	mov	sl, r1
 8023e06:	468b      	mov	fp, r1
 8023e08:	f340 82ef 	ble.w	80243ea <__ieee754_pow+0x9aa>
 8023e0c:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 8023e10:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 8023e14:	4303      	orrs	r3, r0
 8023e16:	f000 81e8 	beq.w	80241ea <__ieee754_pow+0x7aa>
 8023e1a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8023e1e:	2200      	movs	r2, #0
 8023e20:	2300      	movs	r3, #0
 8023e22:	f7fc fd65 	bl	80208f0 <__aeabi_dcmplt>
 8023e26:	3800      	subs	r0, #0
 8023e28:	bf18      	it	ne
 8023e2a:	2001      	movne	r0, #1
 8023e2c:	e710      	b.n	8023c50 <__ieee754_pow+0x210>
 8023e2e:	bf00      	nop
 8023e30:	60000000 	.word	0x60000000
 8023e34:	3ff71547 	.word	0x3ff71547
 8023e38:	f85ddf44 	.word	0xf85ddf44
 8023e3c:	3e54ae0b 	.word	0x3e54ae0b
 8023e40:	55555555 	.word	0x55555555
 8023e44:	3fd55555 	.word	0x3fd55555
 8023e48:	652b82fe 	.word	0x652b82fe
 8023e4c:	3ff71547 	.word	0x3ff71547
 8023e50:	3ff00000 	.word	0x3ff00000
 8023e54:	3fd00000 	.word	0x3fd00000
 8023e58:	3fe00000 	.word	0x3fe00000
 8023e5c:	408fffff 	.word	0x408fffff
 8023e60:	4bd5      	ldr	r3, [pc, #852]	@ (80241b8 <__ieee754_pow+0x778>)
 8023e62:	402b      	ands	r3, r5
 8023e64:	2200      	movs	r2, #0
 8023e66:	b92b      	cbnz	r3, 8023e74 <__ieee754_pow+0x434>
 8023e68:	4bd4      	ldr	r3, [pc, #848]	@ (80241bc <__ieee754_pow+0x77c>)
 8023e6a:	f7fc facf 	bl	802040c <__aeabi_dmul>
 8023e6e:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 8023e72:	468b      	mov	fp, r1
 8023e74:	ea4f 532b 	mov.w	r3, fp, asr #20
 8023e78:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8023e7c:	4413      	add	r3, r2
 8023e7e:	930a      	str	r3, [sp, #40]	@ 0x28
 8023e80:	4bcf      	ldr	r3, [pc, #828]	@ (80241c0 <__ieee754_pow+0x780>)
 8023e82:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 8023e86:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 8023e8a:	459b      	cmp	fp, r3
 8023e8c:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8023e90:	dd08      	ble.n	8023ea4 <__ieee754_pow+0x464>
 8023e92:	4bcc      	ldr	r3, [pc, #816]	@ (80241c4 <__ieee754_pow+0x784>)
 8023e94:	459b      	cmp	fp, r3
 8023e96:	f340 81a5 	ble.w	80241e4 <__ieee754_pow+0x7a4>
 8023e9a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8023e9c:	3301      	adds	r3, #1
 8023e9e:	930a      	str	r3, [sp, #40]	@ 0x28
 8023ea0:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 8023ea4:	f04f 0a00 	mov.w	sl, #0
 8023ea8:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8023eac:	930b      	str	r3, [sp, #44]	@ 0x2c
 8023eae:	4bc6      	ldr	r3, [pc, #792]	@ (80241c8 <__ieee754_pow+0x788>)
 8023eb0:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8023eb4:	ed93 7b00 	vldr	d7, [r3]
 8023eb8:	4629      	mov	r1, r5
 8023eba:	ec53 2b17 	vmov	r2, r3, d7
 8023ebe:	ed8d 7b06 	vstr	d7, [sp, #24]
 8023ec2:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8023ec6:	f7fc f8e9 	bl	802009c <__aeabi_dsub>
 8023eca:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8023ece:	4606      	mov	r6, r0
 8023ed0:	460f      	mov	r7, r1
 8023ed2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8023ed6:	f7fc f8e3 	bl	80200a0 <__adddf3>
 8023eda:	4602      	mov	r2, r0
 8023edc:	460b      	mov	r3, r1
 8023ede:	2000      	movs	r0, #0
 8023ee0:	49ba      	ldr	r1, [pc, #744]	@ (80241cc <__ieee754_pow+0x78c>)
 8023ee2:	f7fc fbbd 	bl	8020660 <__aeabi_ddiv>
 8023ee6:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 8023eea:	4602      	mov	r2, r0
 8023eec:	460b      	mov	r3, r1
 8023eee:	4630      	mov	r0, r6
 8023ef0:	4639      	mov	r1, r7
 8023ef2:	f7fc fa8b 	bl	802040c <__aeabi_dmul>
 8023ef6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8023efa:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 8023efe:	106d      	asrs	r5, r5, #1
 8023f00:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 8023f04:	f04f 0b00 	mov.w	fp, #0
 8023f08:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 8023f0c:	4661      	mov	r1, ip
 8023f0e:	2200      	movs	r2, #0
 8023f10:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8023f14:	4658      	mov	r0, fp
 8023f16:	46e1      	mov	r9, ip
 8023f18:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 8023f1c:	4614      	mov	r4, r2
 8023f1e:	461d      	mov	r5, r3
 8023f20:	f7fc fa74 	bl	802040c <__aeabi_dmul>
 8023f24:	4602      	mov	r2, r0
 8023f26:	460b      	mov	r3, r1
 8023f28:	4630      	mov	r0, r6
 8023f2a:	4639      	mov	r1, r7
 8023f2c:	f7fc f8b6 	bl	802009c <__aeabi_dsub>
 8023f30:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8023f34:	4606      	mov	r6, r0
 8023f36:	460f      	mov	r7, r1
 8023f38:	4620      	mov	r0, r4
 8023f3a:	4629      	mov	r1, r5
 8023f3c:	f7fc f8ae 	bl	802009c <__aeabi_dsub>
 8023f40:	4602      	mov	r2, r0
 8023f42:	460b      	mov	r3, r1
 8023f44:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8023f48:	f7fc f8a8 	bl	802009c <__aeabi_dsub>
 8023f4c:	465a      	mov	r2, fp
 8023f4e:	464b      	mov	r3, r9
 8023f50:	f7fc fa5c 	bl	802040c <__aeabi_dmul>
 8023f54:	4602      	mov	r2, r0
 8023f56:	460b      	mov	r3, r1
 8023f58:	4630      	mov	r0, r6
 8023f5a:	4639      	mov	r1, r7
 8023f5c:	f7fc f89e 	bl	802009c <__aeabi_dsub>
 8023f60:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8023f64:	f7fc fa52 	bl	802040c <__aeabi_dmul>
 8023f68:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8023f6c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8023f70:	4610      	mov	r0, r2
 8023f72:	4619      	mov	r1, r3
 8023f74:	f7fc fa4a 	bl	802040c <__aeabi_dmul>
 8023f78:	a37d      	add	r3, pc, #500	@ (adr r3, 8024170 <__ieee754_pow+0x730>)
 8023f7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023f7e:	4604      	mov	r4, r0
 8023f80:	460d      	mov	r5, r1
 8023f82:	f7fc fa43 	bl	802040c <__aeabi_dmul>
 8023f86:	a37c      	add	r3, pc, #496	@ (adr r3, 8024178 <__ieee754_pow+0x738>)
 8023f88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023f8c:	f7fc f888 	bl	80200a0 <__adddf3>
 8023f90:	4622      	mov	r2, r4
 8023f92:	462b      	mov	r3, r5
 8023f94:	f7fc fa3a 	bl	802040c <__aeabi_dmul>
 8023f98:	a379      	add	r3, pc, #484	@ (adr r3, 8024180 <__ieee754_pow+0x740>)
 8023f9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023f9e:	f7fc f87f 	bl	80200a0 <__adddf3>
 8023fa2:	4622      	mov	r2, r4
 8023fa4:	462b      	mov	r3, r5
 8023fa6:	f7fc fa31 	bl	802040c <__aeabi_dmul>
 8023faa:	a377      	add	r3, pc, #476	@ (adr r3, 8024188 <__ieee754_pow+0x748>)
 8023fac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023fb0:	f7fc f876 	bl	80200a0 <__adddf3>
 8023fb4:	4622      	mov	r2, r4
 8023fb6:	462b      	mov	r3, r5
 8023fb8:	f7fc fa28 	bl	802040c <__aeabi_dmul>
 8023fbc:	a374      	add	r3, pc, #464	@ (adr r3, 8024190 <__ieee754_pow+0x750>)
 8023fbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023fc2:	f7fc f86d 	bl	80200a0 <__adddf3>
 8023fc6:	4622      	mov	r2, r4
 8023fc8:	462b      	mov	r3, r5
 8023fca:	f7fc fa1f 	bl	802040c <__aeabi_dmul>
 8023fce:	a372      	add	r3, pc, #456	@ (adr r3, 8024198 <__ieee754_pow+0x758>)
 8023fd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023fd4:	f7fc f864 	bl	80200a0 <__adddf3>
 8023fd8:	4622      	mov	r2, r4
 8023fda:	4606      	mov	r6, r0
 8023fdc:	460f      	mov	r7, r1
 8023fde:	462b      	mov	r3, r5
 8023fe0:	4620      	mov	r0, r4
 8023fe2:	4629      	mov	r1, r5
 8023fe4:	f7fc fa12 	bl	802040c <__aeabi_dmul>
 8023fe8:	4602      	mov	r2, r0
 8023fea:	460b      	mov	r3, r1
 8023fec:	4630      	mov	r0, r6
 8023fee:	4639      	mov	r1, r7
 8023ff0:	f7fc fa0c 	bl	802040c <__aeabi_dmul>
 8023ff4:	465a      	mov	r2, fp
 8023ff6:	4604      	mov	r4, r0
 8023ff8:	460d      	mov	r5, r1
 8023ffa:	464b      	mov	r3, r9
 8023ffc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8024000:	f7fc f84e 	bl	80200a0 <__adddf3>
 8024004:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8024008:	f7fc fa00 	bl	802040c <__aeabi_dmul>
 802400c:	4622      	mov	r2, r4
 802400e:	462b      	mov	r3, r5
 8024010:	f7fc f846 	bl	80200a0 <__adddf3>
 8024014:	465a      	mov	r2, fp
 8024016:	e9cd 0108 	strd	r0, r1, [sp, #32]
 802401a:	464b      	mov	r3, r9
 802401c:	4658      	mov	r0, fp
 802401e:	4649      	mov	r1, r9
 8024020:	f7fc f9f4 	bl	802040c <__aeabi_dmul>
 8024024:	4b6a      	ldr	r3, [pc, #424]	@ (80241d0 <__ieee754_pow+0x790>)
 8024026:	2200      	movs	r2, #0
 8024028:	4606      	mov	r6, r0
 802402a:	460f      	mov	r7, r1
 802402c:	f7fc f838 	bl	80200a0 <__adddf3>
 8024030:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8024034:	f7fc f834 	bl	80200a0 <__adddf3>
 8024038:	46d8      	mov	r8, fp
 802403a:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 802403e:	460d      	mov	r5, r1
 8024040:	465a      	mov	r2, fp
 8024042:	460b      	mov	r3, r1
 8024044:	4640      	mov	r0, r8
 8024046:	4649      	mov	r1, r9
 8024048:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 802404c:	f7fc f9de 	bl	802040c <__aeabi_dmul>
 8024050:	465c      	mov	r4, fp
 8024052:	4680      	mov	r8, r0
 8024054:	4689      	mov	r9, r1
 8024056:	4b5e      	ldr	r3, [pc, #376]	@ (80241d0 <__ieee754_pow+0x790>)
 8024058:	2200      	movs	r2, #0
 802405a:	4620      	mov	r0, r4
 802405c:	4629      	mov	r1, r5
 802405e:	f7fc f81d 	bl	802009c <__aeabi_dsub>
 8024062:	4632      	mov	r2, r6
 8024064:	463b      	mov	r3, r7
 8024066:	f7fc f819 	bl	802009c <__aeabi_dsub>
 802406a:	4602      	mov	r2, r0
 802406c:	460b      	mov	r3, r1
 802406e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8024072:	f7fc f813 	bl	802009c <__aeabi_dsub>
 8024076:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 802407a:	f7fc f9c7 	bl	802040c <__aeabi_dmul>
 802407e:	4622      	mov	r2, r4
 8024080:	4606      	mov	r6, r0
 8024082:	460f      	mov	r7, r1
 8024084:	462b      	mov	r3, r5
 8024086:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 802408a:	f7fc f9bf 	bl	802040c <__aeabi_dmul>
 802408e:	4602      	mov	r2, r0
 8024090:	460b      	mov	r3, r1
 8024092:	4630      	mov	r0, r6
 8024094:	4639      	mov	r1, r7
 8024096:	f7fc f803 	bl	80200a0 <__adddf3>
 802409a:	4606      	mov	r6, r0
 802409c:	460f      	mov	r7, r1
 802409e:	4602      	mov	r2, r0
 80240a0:	460b      	mov	r3, r1
 80240a2:	4640      	mov	r0, r8
 80240a4:	4649      	mov	r1, r9
 80240a6:	f7fb fffb 	bl	80200a0 <__adddf3>
 80240aa:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 80240ae:	a33c      	add	r3, pc, #240	@ (adr r3, 80241a0 <__ieee754_pow+0x760>)
 80240b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80240b4:	4658      	mov	r0, fp
 80240b6:	e9cd bc08 	strd	fp, ip, [sp, #32]
 80240ba:	460d      	mov	r5, r1
 80240bc:	f7fc f9a6 	bl	802040c <__aeabi_dmul>
 80240c0:	465c      	mov	r4, fp
 80240c2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80240c6:	4642      	mov	r2, r8
 80240c8:	464b      	mov	r3, r9
 80240ca:	4620      	mov	r0, r4
 80240cc:	4629      	mov	r1, r5
 80240ce:	f7fb ffe5 	bl	802009c <__aeabi_dsub>
 80240d2:	4602      	mov	r2, r0
 80240d4:	460b      	mov	r3, r1
 80240d6:	4630      	mov	r0, r6
 80240d8:	4639      	mov	r1, r7
 80240da:	f7fb ffdf 	bl	802009c <__aeabi_dsub>
 80240de:	a332      	add	r3, pc, #200	@ (adr r3, 80241a8 <__ieee754_pow+0x768>)
 80240e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80240e4:	f7fc f992 	bl	802040c <__aeabi_dmul>
 80240e8:	a331      	add	r3, pc, #196	@ (adr r3, 80241b0 <__ieee754_pow+0x770>)
 80240ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80240ee:	4606      	mov	r6, r0
 80240f0:	460f      	mov	r7, r1
 80240f2:	4620      	mov	r0, r4
 80240f4:	4629      	mov	r1, r5
 80240f6:	f7fc f989 	bl	802040c <__aeabi_dmul>
 80240fa:	4602      	mov	r2, r0
 80240fc:	460b      	mov	r3, r1
 80240fe:	4630      	mov	r0, r6
 8024100:	4639      	mov	r1, r7
 8024102:	f7fb ffcd 	bl	80200a0 <__adddf3>
 8024106:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8024108:	4b32      	ldr	r3, [pc, #200]	@ (80241d4 <__ieee754_pow+0x794>)
 802410a:	4413      	add	r3, r2
 802410c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024110:	f7fb ffc6 	bl	80200a0 <__adddf3>
 8024114:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8024118:	980a      	ldr	r0, [sp, #40]	@ 0x28
 802411a:	f7fc f90d 	bl	8020338 <__aeabi_i2d>
 802411e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8024120:	4b2d      	ldr	r3, [pc, #180]	@ (80241d8 <__ieee754_pow+0x798>)
 8024122:	4413      	add	r3, r2
 8024124:	e9d3 8900 	ldrd	r8, r9, [r3]
 8024128:	4606      	mov	r6, r0
 802412a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 802412e:	460f      	mov	r7, r1
 8024130:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8024134:	f7fb ffb4 	bl	80200a0 <__adddf3>
 8024138:	4642      	mov	r2, r8
 802413a:	464b      	mov	r3, r9
 802413c:	f7fb ffb0 	bl	80200a0 <__adddf3>
 8024140:	4632      	mov	r2, r6
 8024142:	463b      	mov	r3, r7
 8024144:	f7fb ffac 	bl	80200a0 <__adddf3>
 8024148:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 802414c:	4632      	mov	r2, r6
 802414e:	463b      	mov	r3, r7
 8024150:	4658      	mov	r0, fp
 8024152:	460d      	mov	r5, r1
 8024154:	f7fb ffa2 	bl	802009c <__aeabi_dsub>
 8024158:	4642      	mov	r2, r8
 802415a:	464b      	mov	r3, r9
 802415c:	f7fb ff9e 	bl	802009c <__aeabi_dsub>
 8024160:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8024164:	f7fb ff9a 	bl	802009c <__aeabi_dsub>
 8024168:	465c      	mov	r4, fp
 802416a:	4602      	mov	r2, r0
 802416c:	e036      	b.n	80241dc <__ieee754_pow+0x79c>
 802416e:	bf00      	nop
 8024170:	4a454eef 	.word	0x4a454eef
 8024174:	3fca7e28 	.word	0x3fca7e28
 8024178:	93c9db65 	.word	0x93c9db65
 802417c:	3fcd864a 	.word	0x3fcd864a
 8024180:	a91d4101 	.word	0xa91d4101
 8024184:	3fd17460 	.word	0x3fd17460
 8024188:	518f264d 	.word	0x518f264d
 802418c:	3fd55555 	.word	0x3fd55555
 8024190:	db6fabff 	.word	0xdb6fabff
 8024194:	3fdb6db6 	.word	0x3fdb6db6
 8024198:	33333303 	.word	0x33333303
 802419c:	3fe33333 	.word	0x3fe33333
 80241a0:	e0000000 	.word	0xe0000000
 80241a4:	3feec709 	.word	0x3feec709
 80241a8:	dc3a03fd 	.word	0xdc3a03fd
 80241ac:	3feec709 	.word	0x3feec709
 80241b0:	145b01f5 	.word	0x145b01f5
 80241b4:	be3e2fe0 	.word	0xbe3e2fe0
 80241b8:	7ff00000 	.word	0x7ff00000
 80241bc:	43400000 	.word	0x43400000
 80241c0:	0003988e 	.word	0x0003988e
 80241c4:	000bb679 	.word	0x000bb679
 80241c8:	08024888 	.word	0x08024888
 80241cc:	3ff00000 	.word	0x3ff00000
 80241d0:	40080000 	.word	0x40080000
 80241d4:	08024868 	.word	0x08024868
 80241d8:	08024878 	.word	0x08024878
 80241dc:	460b      	mov	r3, r1
 80241de:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80241e2:	e5d7      	b.n	8023d94 <__ieee754_pow+0x354>
 80241e4:	f04f 0a01 	mov.w	sl, #1
 80241e8:	e65e      	b.n	8023ea8 <__ieee754_pow+0x468>
 80241ea:	a3b4      	add	r3, pc, #720	@ (adr r3, 80244bc <__ieee754_pow+0xa7c>)
 80241ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80241f0:	4630      	mov	r0, r6
 80241f2:	4639      	mov	r1, r7
 80241f4:	f7fb ff54 	bl	80200a0 <__adddf3>
 80241f8:	4642      	mov	r2, r8
 80241fa:	e9cd 0100 	strd	r0, r1, [sp]
 80241fe:	464b      	mov	r3, r9
 8024200:	4620      	mov	r0, r4
 8024202:	4629      	mov	r1, r5
 8024204:	f7fb ff4a 	bl	802009c <__aeabi_dsub>
 8024208:	4602      	mov	r2, r0
 802420a:	460b      	mov	r3, r1
 802420c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8024210:	f7fc fb8c 	bl	802092c <__aeabi_dcmpgt>
 8024214:	2800      	cmp	r0, #0
 8024216:	f47f ae00 	bne.w	8023e1a <__ieee754_pow+0x3da>
 802421a:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 802421e:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8024222:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 8024226:	fa43 fa0a 	asr.w	sl, r3, sl
 802422a:	44da      	add	sl, fp
 802422c:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8024230:	489d      	ldr	r0, [pc, #628]	@ (80244a8 <__ieee754_pow+0xa68>)
 8024232:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 8024236:	4108      	asrs	r0, r1
 8024238:	ea00 030a 	and.w	r3, r0, sl
 802423c:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8024240:	f1c1 0114 	rsb	r1, r1, #20
 8024244:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 8024248:	fa4a fa01 	asr.w	sl, sl, r1
 802424c:	f1bb 0f00 	cmp.w	fp, #0
 8024250:	4640      	mov	r0, r8
 8024252:	4649      	mov	r1, r9
 8024254:	f04f 0200 	mov.w	r2, #0
 8024258:	bfb8      	it	lt
 802425a:	f1ca 0a00 	rsblt	sl, sl, #0
 802425e:	f7fb ff1d 	bl	802009c <__aeabi_dsub>
 8024262:	4680      	mov	r8, r0
 8024264:	4689      	mov	r9, r1
 8024266:	4632      	mov	r2, r6
 8024268:	463b      	mov	r3, r7
 802426a:	4640      	mov	r0, r8
 802426c:	4649      	mov	r1, r9
 802426e:	f7fb ff17 	bl	80200a0 <__adddf3>
 8024272:	2400      	movs	r4, #0
 8024274:	a37c      	add	r3, pc, #496	@ (adr r3, 8024468 <__ieee754_pow+0xa28>)
 8024276:	e9d3 2300 	ldrd	r2, r3, [r3]
 802427a:	4620      	mov	r0, r4
 802427c:	460d      	mov	r5, r1
 802427e:	f7fc f8c5 	bl	802040c <__aeabi_dmul>
 8024282:	4642      	mov	r2, r8
 8024284:	e9cd 0100 	strd	r0, r1, [sp]
 8024288:	464b      	mov	r3, r9
 802428a:	4620      	mov	r0, r4
 802428c:	4629      	mov	r1, r5
 802428e:	f7fb ff05 	bl	802009c <__aeabi_dsub>
 8024292:	4602      	mov	r2, r0
 8024294:	460b      	mov	r3, r1
 8024296:	4630      	mov	r0, r6
 8024298:	4639      	mov	r1, r7
 802429a:	f7fb feff 	bl	802009c <__aeabi_dsub>
 802429e:	a374      	add	r3, pc, #464	@ (adr r3, 8024470 <__ieee754_pow+0xa30>)
 80242a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80242a4:	f7fc f8b2 	bl	802040c <__aeabi_dmul>
 80242a8:	a373      	add	r3, pc, #460	@ (adr r3, 8024478 <__ieee754_pow+0xa38>)
 80242aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80242ae:	4680      	mov	r8, r0
 80242b0:	4689      	mov	r9, r1
 80242b2:	4620      	mov	r0, r4
 80242b4:	4629      	mov	r1, r5
 80242b6:	f7fc f8a9 	bl	802040c <__aeabi_dmul>
 80242ba:	4602      	mov	r2, r0
 80242bc:	460b      	mov	r3, r1
 80242be:	4640      	mov	r0, r8
 80242c0:	4649      	mov	r1, r9
 80242c2:	f7fb feed 	bl	80200a0 <__adddf3>
 80242c6:	4604      	mov	r4, r0
 80242c8:	460d      	mov	r5, r1
 80242ca:	4602      	mov	r2, r0
 80242cc:	460b      	mov	r3, r1
 80242ce:	e9dd 0100 	ldrd	r0, r1, [sp]
 80242d2:	f7fb fee5 	bl	80200a0 <__adddf3>
 80242d6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80242da:	4680      	mov	r8, r0
 80242dc:	4689      	mov	r9, r1
 80242de:	f7fb fedd 	bl	802009c <__aeabi_dsub>
 80242e2:	4602      	mov	r2, r0
 80242e4:	460b      	mov	r3, r1
 80242e6:	4620      	mov	r0, r4
 80242e8:	4629      	mov	r1, r5
 80242ea:	f7fb fed7 	bl	802009c <__aeabi_dsub>
 80242ee:	4642      	mov	r2, r8
 80242f0:	4606      	mov	r6, r0
 80242f2:	460f      	mov	r7, r1
 80242f4:	464b      	mov	r3, r9
 80242f6:	4640      	mov	r0, r8
 80242f8:	4649      	mov	r1, r9
 80242fa:	f7fc f887 	bl	802040c <__aeabi_dmul>
 80242fe:	a360      	add	r3, pc, #384	@ (adr r3, 8024480 <__ieee754_pow+0xa40>)
 8024300:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024304:	4604      	mov	r4, r0
 8024306:	460d      	mov	r5, r1
 8024308:	f7fc f880 	bl	802040c <__aeabi_dmul>
 802430c:	a35e      	add	r3, pc, #376	@ (adr r3, 8024488 <__ieee754_pow+0xa48>)
 802430e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024312:	f7fb fec3 	bl	802009c <__aeabi_dsub>
 8024316:	4622      	mov	r2, r4
 8024318:	462b      	mov	r3, r5
 802431a:	f7fc f877 	bl	802040c <__aeabi_dmul>
 802431e:	a35c      	add	r3, pc, #368	@ (adr r3, 8024490 <__ieee754_pow+0xa50>)
 8024320:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024324:	f7fb febc 	bl	80200a0 <__adddf3>
 8024328:	4622      	mov	r2, r4
 802432a:	462b      	mov	r3, r5
 802432c:	f7fc f86e 	bl	802040c <__aeabi_dmul>
 8024330:	a359      	add	r3, pc, #356	@ (adr r3, 8024498 <__ieee754_pow+0xa58>)
 8024332:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024336:	f7fb feb1 	bl	802009c <__aeabi_dsub>
 802433a:	4622      	mov	r2, r4
 802433c:	462b      	mov	r3, r5
 802433e:	f7fc f865 	bl	802040c <__aeabi_dmul>
 8024342:	a357      	add	r3, pc, #348	@ (adr r3, 80244a0 <__ieee754_pow+0xa60>)
 8024344:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024348:	f7fb feaa 	bl	80200a0 <__adddf3>
 802434c:	4622      	mov	r2, r4
 802434e:	462b      	mov	r3, r5
 8024350:	f7fc f85c 	bl	802040c <__aeabi_dmul>
 8024354:	4602      	mov	r2, r0
 8024356:	460b      	mov	r3, r1
 8024358:	4640      	mov	r0, r8
 802435a:	4649      	mov	r1, r9
 802435c:	f7fb fe9e 	bl	802009c <__aeabi_dsub>
 8024360:	4604      	mov	r4, r0
 8024362:	460d      	mov	r5, r1
 8024364:	4602      	mov	r2, r0
 8024366:	460b      	mov	r3, r1
 8024368:	4640      	mov	r0, r8
 802436a:	4649      	mov	r1, r9
 802436c:	f7fc f84e 	bl	802040c <__aeabi_dmul>
 8024370:	2200      	movs	r2, #0
 8024372:	e9cd 0100 	strd	r0, r1, [sp]
 8024376:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 802437a:	4620      	mov	r0, r4
 802437c:	4629      	mov	r1, r5
 802437e:	f7fb fe8d 	bl	802009c <__aeabi_dsub>
 8024382:	4602      	mov	r2, r0
 8024384:	460b      	mov	r3, r1
 8024386:	e9dd 0100 	ldrd	r0, r1, [sp]
 802438a:	f7fc f969 	bl	8020660 <__aeabi_ddiv>
 802438e:	4632      	mov	r2, r6
 8024390:	4604      	mov	r4, r0
 8024392:	460d      	mov	r5, r1
 8024394:	463b      	mov	r3, r7
 8024396:	4640      	mov	r0, r8
 8024398:	4649      	mov	r1, r9
 802439a:	f7fc f837 	bl	802040c <__aeabi_dmul>
 802439e:	4632      	mov	r2, r6
 80243a0:	463b      	mov	r3, r7
 80243a2:	f7fb fe7d 	bl	80200a0 <__adddf3>
 80243a6:	4602      	mov	r2, r0
 80243a8:	460b      	mov	r3, r1
 80243aa:	4620      	mov	r0, r4
 80243ac:	4629      	mov	r1, r5
 80243ae:	f7fb fe75 	bl	802009c <__aeabi_dsub>
 80243b2:	4642      	mov	r2, r8
 80243b4:	464b      	mov	r3, r9
 80243b6:	f7fb fe71 	bl	802009c <__aeabi_dsub>
 80243ba:	460b      	mov	r3, r1
 80243bc:	4602      	mov	r2, r0
 80243be:	493b      	ldr	r1, [pc, #236]	@ (80244ac <__ieee754_pow+0xa6c>)
 80243c0:	2000      	movs	r0, #0
 80243c2:	f7fb fe6b 	bl	802009c <__aeabi_dsub>
 80243c6:	ec41 0b10 	vmov	d0, r0, r1
 80243ca:	ee10 3a90 	vmov	r3, s1
 80243ce:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 80243d2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80243d6:	da30      	bge.n	802443a <__ieee754_pow+0x9fa>
 80243d8:	4650      	mov	r0, sl
 80243da:	f000 f87d 	bl	80244d8 <scalbn>
 80243de:	ec51 0b10 	vmov	r0, r1, d0
 80243e2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80243e6:	f7ff bbd2 	b.w	8023b8e <__ieee754_pow+0x14e>
 80243ea:	4c31      	ldr	r4, [pc, #196]	@ (80244b0 <__ieee754_pow+0xa70>)
 80243ec:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80243f0:	42a3      	cmp	r3, r4
 80243f2:	d91a      	bls.n	802442a <__ieee754_pow+0x9ea>
 80243f4:	4b2f      	ldr	r3, [pc, #188]	@ (80244b4 <__ieee754_pow+0xa74>)
 80243f6:	440b      	add	r3, r1
 80243f8:	4303      	orrs	r3, r0
 80243fa:	d009      	beq.n	8024410 <__ieee754_pow+0x9d0>
 80243fc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8024400:	2200      	movs	r2, #0
 8024402:	2300      	movs	r3, #0
 8024404:	f7fc fa74 	bl	80208f0 <__aeabi_dcmplt>
 8024408:	3800      	subs	r0, #0
 802440a:	bf18      	it	ne
 802440c:	2001      	movne	r0, #1
 802440e:	e42b      	b.n	8023c68 <__ieee754_pow+0x228>
 8024410:	4642      	mov	r2, r8
 8024412:	464b      	mov	r3, r9
 8024414:	f7fb fe42 	bl	802009c <__aeabi_dsub>
 8024418:	4632      	mov	r2, r6
 802441a:	463b      	mov	r3, r7
 802441c:	f7fc fa7c 	bl	8020918 <__aeabi_dcmpge>
 8024420:	2800      	cmp	r0, #0
 8024422:	d1eb      	bne.n	80243fc <__ieee754_pow+0x9bc>
 8024424:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 80244c4 <__ieee754_pow+0xa84>
 8024428:	e6f7      	b.n	802421a <__ieee754_pow+0x7da>
 802442a:	469a      	mov	sl, r3
 802442c:	4b22      	ldr	r3, [pc, #136]	@ (80244b8 <__ieee754_pow+0xa78>)
 802442e:	459a      	cmp	sl, r3
 8024430:	f63f aef3 	bhi.w	802421a <__ieee754_pow+0x7da>
 8024434:	f8dd a010 	ldr.w	sl, [sp, #16]
 8024438:	e715      	b.n	8024266 <__ieee754_pow+0x826>
 802443a:	ec51 0b10 	vmov	r0, r1, d0
 802443e:	4619      	mov	r1, r3
 8024440:	e7cf      	b.n	80243e2 <__ieee754_pow+0x9a2>
 8024442:	491a      	ldr	r1, [pc, #104]	@ (80244ac <__ieee754_pow+0xa6c>)
 8024444:	2000      	movs	r0, #0
 8024446:	f7ff bb18 	b.w	8023a7a <__ieee754_pow+0x3a>
 802444a:	2000      	movs	r0, #0
 802444c:	2100      	movs	r1, #0
 802444e:	f7ff bb14 	b.w	8023a7a <__ieee754_pow+0x3a>
 8024452:	4630      	mov	r0, r6
 8024454:	4639      	mov	r1, r7
 8024456:	f7ff bb10 	b.w	8023a7a <__ieee754_pow+0x3a>
 802445a:	460c      	mov	r4, r1
 802445c:	f7ff bb5e 	b.w	8023b1c <__ieee754_pow+0xdc>
 8024460:	2400      	movs	r4, #0
 8024462:	f7ff bb49 	b.w	8023af8 <__ieee754_pow+0xb8>
 8024466:	bf00      	nop
 8024468:	00000000 	.word	0x00000000
 802446c:	3fe62e43 	.word	0x3fe62e43
 8024470:	fefa39ef 	.word	0xfefa39ef
 8024474:	3fe62e42 	.word	0x3fe62e42
 8024478:	0ca86c39 	.word	0x0ca86c39
 802447c:	be205c61 	.word	0xbe205c61
 8024480:	72bea4d0 	.word	0x72bea4d0
 8024484:	3e663769 	.word	0x3e663769
 8024488:	c5d26bf1 	.word	0xc5d26bf1
 802448c:	3ebbbd41 	.word	0x3ebbbd41
 8024490:	af25de2c 	.word	0xaf25de2c
 8024494:	3f11566a 	.word	0x3f11566a
 8024498:	16bebd93 	.word	0x16bebd93
 802449c:	3f66c16c 	.word	0x3f66c16c
 80244a0:	5555553e 	.word	0x5555553e
 80244a4:	3fc55555 	.word	0x3fc55555
 80244a8:	fff00000 	.word	0xfff00000
 80244ac:	3ff00000 	.word	0x3ff00000
 80244b0:	4090cbff 	.word	0x4090cbff
 80244b4:	3f6f3400 	.word	0x3f6f3400
 80244b8:	3fe00000 	.word	0x3fe00000
 80244bc:	652b82fe 	.word	0x652b82fe
 80244c0:	3c971547 	.word	0x3c971547
 80244c4:	4090cc00 	.word	0x4090cc00

080244c8 <fabs>:
 80244c8:	ec51 0b10 	vmov	r0, r1, d0
 80244cc:	4602      	mov	r2, r0
 80244ce:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80244d2:	ec43 2b10 	vmov	d0, r2, r3
 80244d6:	4770      	bx	lr

080244d8 <scalbn>:
 80244d8:	b570      	push	{r4, r5, r6, lr}
 80244da:	ec55 4b10 	vmov	r4, r5, d0
 80244de:	f3c5 510a 	ubfx	r1, r5, #20, #11
 80244e2:	4606      	mov	r6, r0
 80244e4:	462b      	mov	r3, r5
 80244e6:	b991      	cbnz	r1, 802450e <scalbn+0x36>
 80244e8:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 80244ec:	4323      	orrs	r3, r4
 80244ee:	d03d      	beq.n	802456c <scalbn+0x94>
 80244f0:	4b35      	ldr	r3, [pc, #212]	@ (80245c8 <scalbn+0xf0>)
 80244f2:	4620      	mov	r0, r4
 80244f4:	4629      	mov	r1, r5
 80244f6:	2200      	movs	r2, #0
 80244f8:	f7fb ff88 	bl	802040c <__aeabi_dmul>
 80244fc:	4b33      	ldr	r3, [pc, #204]	@ (80245cc <scalbn+0xf4>)
 80244fe:	429e      	cmp	r6, r3
 8024500:	4604      	mov	r4, r0
 8024502:	460d      	mov	r5, r1
 8024504:	da0f      	bge.n	8024526 <scalbn+0x4e>
 8024506:	a328      	add	r3, pc, #160	@ (adr r3, 80245a8 <scalbn+0xd0>)
 8024508:	e9d3 2300 	ldrd	r2, r3, [r3]
 802450c:	e01e      	b.n	802454c <scalbn+0x74>
 802450e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8024512:	4291      	cmp	r1, r2
 8024514:	d10b      	bne.n	802452e <scalbn+0x56>
 8024516:	4622      	mov	r2, r4
 8024518:	4620      	mov	r0, r4
 802451a:	4629      	mov	r1, r5
 802451c:	f7fb fdc0 	bl	80200a0 <__adddf3>
 8024520:	4604      	mov	r4, r0
 8024522:	460d      	mov	r5, r1
 8024524:	e022      	b.n	802456c <scalbn+0x94>
 8024526:	460b      	mov	r3, r1
 8024528:	f3c1 510a 	ubfx	r1, r1, #20, #11
 802452c:	3936      	subs	r1, #54	@ 0x36
 802452e:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8024532:	4296      	cmp	r6, r2
 8024534:	dd0d      	ble.n	8024552 <scalbn+0x7a>
 8024536:	2d00      	cmp	r5, #0
 8024538:	a11d      	add	r1, pc, #116	@ (adr r1, 80245b0 <scalbn+0xd8>)
 802453a:	e9d1 0100 	ldrd	r0, r1, [r1]
 802453e:	da02      	bge.n	8024546 <scalbn+0x6e>
 8024540:	a11d      	add	r1, pc, #116	@ (adr r1, 80245b8 <scalbn+0xe0>)
 8024542:	e9d1 0100 	ldrd	r0, r1, [r1]
 8024546:	a31a      	add	r3, pc, #104	@ (adr r3, 80245b0 <scalbn+0xd8>)
 8024548:	e9d3 2300 	ldrd	r2, r3, [r3]
 802454c:	f7fb ff5e 	bl	802040c <__aeabi_dmul>
 8024550:	e7e6      	b.n	8024520 <scalbn+0x48>
 8024552:	1872      	adds	r2, r6, r1
 8024554:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8024558:	428a      	cmp	r2, r1
 802455a:	dcec      	bgt.n	8024536 <scalbn+0x5e>
 802455c:	2a00      	cmp	r2, #0
 802455e:	dd08      	ble.n	8024572 <scalbn+0x9a>
 8024560:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8024564:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8024568:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 802456c:	ec45 4b10 	vmov	d0, r4, r5
 8024570:	bd70      	pop	{r4, r5, r6, pc}
 8024572:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8024576:	da08      	bge.n	802458a <scalbn+0xb2>
 8024578:	2d00      	cmp	r5, #0
 802457a:	a10b      	add	r1, pc, #44	@ (adr r1, 80245a8 <scalbn+0xd0>)
 802457c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8024580:	dac1      	bge.n	8024506 <scalbn+0x2e>
 8024582:	a10f      	add	r1, pc, #60	@ (adr r1, 80245c0 <scalbn+0xe8>)
 8024584:	e9d1 0100 	ldrd	r0, r1, [r1]
 8024588:	e7bd      	b.n	8024506 <scalbn+0x2e>
 802458a:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 802458e:	3236      	adds	r2, #54	@ 0x36
 8024590:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8024594:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8024598:	4620      	mov	r0, r4
 802459a:	4b0d      	ldr	r3, [pc, #52]	@ (80245d0 <scalbn+0xf8>)
 802459c:	4629      	mov	r1, r5
 802459e:	2200      	movs	r2, #0
 80245a0:	e7d4      	b.n	802454c <scalbn+0x74>
 80245a2:	bf00      	nop
 80245a4:	f3af 8000 	nop.w
 80245a8:	c2f8f359 	.word	0xc2f8f359
 80245ac:	01a56e1f 	.word	0x01a56e1f
 80245b0:	8800759c 	.word	0x8800759c
 80245b4:	7e37e43c 	.word	0x7e37e43c
 80245b8:	8800759c 	.word	0x8800759c
 80245bc:	fe37e43c 	.word	0xfe37e43c
 80245c0:	c2f8f359 	.word	0xc2f8f359
 80245c4:	81a56e1f 	.word	0x81a56e1f
 80245c8:	43500000 	.word	0x43500000
 80245cc:	ffff3cb0 	.word	0xffff3cb0
 80245d0:	3c900000 	.word	0x3c900000

080245d4 <with_errno>:
 80245d4:	b510      	push	{r4, lr}
 80245d6:	ed2d 8b02 	vpush	{d8}
 80245da:	eeb0 8a40 	vmov.f32	s16, s0
 80245de:	eef0 8a60 	vmov.f32	s17, s1
 80245e2:	4604      	mov	r4, r0
 80245e4:	f7ff f84e 	bl	8023684 <__errno>
 80245e8:	eeb0 0a48 	vmov.f32	s0, s16
 80245ec:	eef0 0a68 	vmov.f32	s1, s17
 80245f0:	ecbd 8b02 	vpop	{d8}
 80245f4:	6004      	str	r4, [r0, #0]
 80245f6:	bd10      	pop	{r4, pc}

080245f8 <xflow>:
 80245f8:	4603      	mov	r3, r0
 80245fa:	b507      	push	{r0, r1, r2, lr}
 80245fc:	ec51 0b10 	vmov	r0, r1, d0
 8024600:	b183      	cbz	r3, 8024624 <xflow+0x2c>
 8024602:	4602      	mov	r2, r0
 8024604:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8024608:	e9cd 2300 	strd	r2, r3, [sp]
 802460c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8024610:	f7fb fefc 	bl	802040c <__aeabi_dmul>
 8024614:	ec41 0b10 	vmov	d0, r0, r1
 8024618:	2022      	movs	r0, #34	@ 0x22
 802461a:	b003      	add	sp, #12
 802461c:	f85d eb04 	ldr.w	lr, [sp], #4
 8024620:	f7ff bfd8 	b.w	80245d4 <with_errno>
 8024624:	4602      	mov	r2, r0
 8024626:	460b      	mov	r3, r1
 8024628:	e7ee      	b.n	8024608 <xflow+0x10>
 802462a:	0000      	movs	r0, r0
 802462c:	0000      	movs	r0, r0
	...

08024630 <__math_uflow>:
 8024630:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8024638 <__math_uflow+0x8>
 8024634:	f7ff bfe0 	b.w	80245f8 <xflow>
 8024638:	00000000 	.word	0x00000000
 802463c:	10000000 	.word	0x10000000

08024640 <__math_oflow>:
 8024640:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8024648 <__math_oflow+0x8>
 8024644:	f7ff bfd8 	b.w	80245f8 <xflow>
 8024648:	00000000 	.word	0x00000000
 802464c:	70000000 	.word	0x70000000

08024650 <_init>:
 8024650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8024652:	bf00      	nop
 8024654:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8024656:	bc08      	pop	{r3}
 8024658:	469e      	mov	lr, r3
 802465a:	4770      	bx	lr

0802465c <_fini>:
 802465c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802465e:	bf00      	nop
 8024660:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8024662:	bc08      	pop	{r3}
 8024664:	469e      	mov	lr, r3
 8024666:	4770      	bx	lr
