
lab2-2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000399c  080001bc  080001bc  000011bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08003b58  08003b58  00004b58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003bc8  08003bc8  0000500c  2**0
                  CONTENTS
  4 .ARM          00000000  08003bc8  08003bc8  0000500c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003bc8  08003bc8  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003bc8  08003bc8  00004bc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003bcc  08003bcc  00004bcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003bd0  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000088  2000000c  08003bdc  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000094  08003bdc  00005094  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008ca4  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001771  00000000  00000000  0000dce0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000900  00000000  00000000  0000f458  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000006b6  00000000  00000000  0000fd58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029b13  00000000  00000000  0001040e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000099e7  00000000  00000000  00039f21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00105fcd  00000000  00000000  00043908  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001498d5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000023fc  00000000  00000000  00149918  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  0014bd14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	@ (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	@ (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	@ (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	2000000c 	.word	0x2000000c
 80001d8:	00000000 	.word	0x00000000
 80001dc:	08003b40 	.word	0x08003b40

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	@ (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	@ (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	@ (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20000010 	.word	0x20000010
 80001f8:	08003b40 	.word	0x08003b40

080001fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001fc:	b5b0      	push	{r4, r5, r7, lr}
 80001fe:	b092      	sub	sp, #72	@ 0x48
 8000200:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000202:	f000 fa9a 	bl	800073a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000206:	f000 f8b9 	bl	800037c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800020a:	f000 f96d 	bl	80004e8 <MX_GPIO_Init>
  MX_ADC1_Init();
 800020e:	f000 f907 	bl	8000420 <MX_ADC1_Init>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  //VOLTAGE
	  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 8000212:	2201      	movs	r2, #1
 8000214:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000218:	484f      	ldr	r0, [pc, #316]	@ (8000358 <main+0x15c>)
 800021a:	f001 ffd1 	bl	80021c0 <HAL_GPIO_WritePin>
	  ADC_ChannelConfTypeDef channel_config = {.Channel = ADC_CHANNEL_VREFINT, .Rank = ADC_REGULAR_RANK_1, .SamplingTime=ADC_SAMPLETIME_12CYCLES_5,
 800021e:	4b4f      	ldr	r3, [pc, #316]	@ (800035c <main+0x160>)
 8000220:	f107 041c 	add.w	r4, r7, #28
 8000224:	461d      	mov	r5, r3
 8000226:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000228:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800022a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800022e:	e884 0003 	stmia.w	r4, {r0, r1}
			  .SingleDiff = ADC_SINGLE_ENDED, .OffsetNumber = ADC_OFFSET_NONE, .Offset=0
	  };

	  if(HAL_ADC_ConfigChannel(&hadc1, &channel_config) != HAL_OK){
 8000232:	f107 031c 	add.w	r3, r7, #28
 8000236:	4619      	mov	r1, r3
 8000238:	4849      	ldr	r0, [pc, #292]	@ (8000360 <main+0x164>)
 800023a:	f000 ff93 	bl	8001164 <HAL_ADC_ConfigChannel>
 800023e:	4603      	mov	r3, r0
 8000240:	2b00      	cmp	r3, #0
 8000242:	d002      	beq.n	800024a <main+0x4e>
		  return -1;
 8000244:	f04f 33ff 	mov.w	r3, #4294967295
 8000248:	e081      	b.n	800034e <main+0x152>
	  }
	  HAL_ADC_Start(&hadc1);
 800024a:	4845      	ldr	r0, [pc, #276]	@ (8000360 <main+0x164>)
 800024c:	f000 fe58 	bl	8000f00 <HAL_ADC_Start>

	  HAL_ADC_PollForConversion(&hadc1, 0xFFFF);
 8000250:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000254:	4842      	ldr	r0, [pc, #264]	@ (8000360 <main+0x164>)
 8000256:	f000 fee9 	bl	800102c <HAL_ADC_PollForConversion>
	  uint32_t adcValue = HAL_ADC_GetValue(&hadc1);
 800025a:	4841      	ldr	r0, [pc, #260]	@ (8000360 <main+0x164>)
 800025c:	f000 ff75 	bl	800114a <HAL_ADC_GetValue>
 8000260:	6478      	str	r0, [r7, #68]	@ 0x44
	  HAL_ADC_Stop(&hadc1);
 8000262:	483f      	ldr	r0, [pc, #252]	@ (8000360 <main+0x164>)
 8000264:	f000 feaf 	bl	8000fc6 <HAL_ADC_Stop>
	  uint32_t vdda_voltage = __HAL_ADC_CALC_VREFANALOG_VOLTAGE(adcValue, ADC_RESOLUTION_12B);
 8000268:	4b3e      	ldr	r3, [pc, #248]	@ (8000364 <main+0x168>)
 800026a:	881b      	ldrh	r3, [r3, #0]
 800026c:	461a      	mov	r2, r3
 800026e:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8000272:	fb03 f202 	mul.w	r2, r3, r2
 8000276:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000278:	fbb2 f3f3 	udiv	r3, r2, r3
 800027c:	643b      	str	r3, [r7, #64]	@ 0x40



	  //TEMPERATURE
	  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 800027e:	2200      	movs	r2, #0
 8000280:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000284:	4834      	ldr	r0, [pc, #208]	@ (8000358 <main+0x15c>)
 8000286:	f001 ff9b 	bl	80021c0 <HAL_GPIO_WritePin>
	  ADC_ChannelConfTypeDef channel_config2 = {.Channel = ADC_CHANNEL_TEMPSENSOR, .Rank = ADC_REGULAR_RANK_1, .SamplingTime=ADC_SAMPLETIME_12CYCLES_5,
 800028a:	4b37      	ldr	r3, [pc, #220]	@ (8000368 <main+0x16c>)
 800028c:	1d3c      	adds	r4, r7, #4
 800028e:	461d      	mov	r5, r3
 8000290:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000292:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000294:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000298:	e884 0003 	stmia.w	r4, {r0, r1}
	  			  .SingleDiff = ADC_SINGLE_ENDED, .OffsetNumber = ADC_OFFSET_NONE, .Offset=0
	  	  };
	  if(HAL_ADC_ConfigChannel(&hadc1, &channel_config2) != HAL_OK){
 800029c:	1d3b      	adds	r3, r7, #4
 800029e:	4619      	mov	r1, r3
 80002a0:	482f      	ldr	r0, [pc, #188]	@ (8000360 <main+0x164>)
 80002a2:	f000 ff5f 	bl	8001164 <HAL_ADC_ConfigChannel>
 80002a6:	4603      	mov	r3, r0
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d002      	beq.n	80002b2 <main+0xb6>
	  		  return -1;
 80002ac:	f04f 33ff 	mov.w	r3, #4294967295
 80002b0:	e04d      	b.n	800034e <main+0x152>
	  }
	  HAL_ADC_Start(&hadc1);
 80002b2:	482b      	ldr	r0, [pc, #172]	@ (8000360 <main+0x164>)
 80002b4:	f000 fe24 	bl	8000f00 <HAL_ADC_Start>

	  HAL_ADC_PollForConversion(&hadc1, 0xFFFF);
 80002b8:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80002bc:	4828      	ldr	r0, [pc, #160]	@ (8000360 <main+0x164>)
 80002be:	f000 feb5 	bl	800102c <HAL_ADC_PollForConversion>
	  adcValue = HAL_ADC_GetValue(&hadc1);
 80002c2:	4827      	ldr	r0, [pc, #156]	@ (8000360 <main+0x164>)
 80002c4:	f000 ff41 	bl	800114a <HAL_ADC_GetValue>
 80002c8:	6478      	str	r0, [r7, #68]	@ 0x44
	  HAL_ADC_Stop(&hadc1);
 80002ca:	4825      	ldr	r0, [pc, #148]	@ (8000360 <main+0x164>)
 80002cc:	f000 fe7b 	bl	8000fc6 <HAL_ADC_Stop>


	  uint32_t VREFANALOG_VOLTAGE = 3300;
 80002d0:	f640 43e4 	movw	r3, #3300	@ 0xce4
 80002d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
	  int32_t Temperature = __HAL_ADC_CALC_TEMPERATURE(VREFANALOG_VOLTAGE, adcValue,ADC_RESOLUTION_12B);
 80002d6:	4b25      	ldr	r3, [pc, #148]	@ (800036c <main+0x170>)
 80002d8:	881a      	ldrh	r2, [r3, #0]
 80002da:	4b25      	ldr	r3, [pc, #148]	@ (8000370 <main+0x174>)
 80002dc:	881b      	ldrh	r3, [r3, #0]
 80002de:	429a      	cmp	r2, r3
 80002e0:	d018      	beq.n	8000314 <main+0x118>
 80002e2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80002e4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80002e6:	fb02 f303 	mul.w	r3, r2, r3
 80002ea:	4a22      	ldr	r2, [pc, #136]	@ (8000374 <main+0x178>)
 80002ec:	fba2 2303 	umull	r2, r3, r2, r3
 80002f0:	099b      	lsrs	r3, r3, #6
 80002f2:	461a      	mov	r2, r3
 80002f4:	4b1e      	ldr	r3, [pc, #120]	@ (8000370 <main+0x174>)
 80002f6:	881b      	ldrh	r3, [r3, #0]
 80002f8:	1ad3      	subs	r3, r2, r3
 80002fa:	2264      	movs	r2, #100	@ 0x64
 80002fc:	fb03 f202 	mul.w	r2, r3, r2
 8000300:	4b1a      	ldr	r3, [pc, #104]	@ (800036c <main+0x170>)
 8000302:	881b      	ldrh	r3, [r3, #0]
 8000304:	4619      	mov	r1, r3
 8000306:	4b1a      	ldr	r3, [pc, #104]	@ (8000370 <main+0x174>)
 8000308:	881b      	ldrh	r3, [r3, #0]
 800030a:	1acb      	subs	r3, r1, r3
 800030c:	fb92 f3f3 	sdiv	r3, r2, r3
 8000310:	331e      	adds	r3, #30
 8000312:	e001      	b.n	8000318 <main+0x11c>
 8000314:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 8000318:	63bb      	str	r3, [r7, #56]	@ 0x38

	  float V_Sense = (adcValue * V_REF) / 4096.0f; // dividing by 4096 because of 12-bits resolution of ADC
	  float temperature = ((V_Sense - V_30) / Avg_Slope) + 30.0f;*/


	  char button_status= HAL_GPIO_ReadPin(button_GPIO_Port, button_Pin);
 800031a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800031e:	4816      	ldr	r0, [pc, #88]	@ (8000378 <main+0x17c>)
 8000320:	f001 ff36 	bl	8002190 <HAL_GPIO_ReadPin>
 8000324:	4603      	mov	r3, r0
 8000326:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	  if(button_status== 0){
 800032a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800032e:	2b00      	cmp	r3, #0
 8000330:	d106      	bne.n	8000340 <main+0x144>
		  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 8000332:	2201      	movs	r2, #1
 8000334:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000338:	4807      	ldr	r0, [pc, #28]	@ (8000358 <main+0x15c>)
 800033a:	f001 ff41 	bl	80021c0 <HAL_GPIO_WritePin>
 800033e:	e768      	b.n	8000212 <main+0x16>
	  }else{
		  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 8000340:	2200      	movs	r2, #0
 8000342:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000346:	4804      	ldr	r0, [pc, #16]	@ (8000358 <main+0x15c>)
 8000348:	f001 ff3a 	bl	80021c0 <HAL_GPIO_WritePin>
  {
 800034c:	e761      	b.n	8000212 <main+0x16>
	  }
  }
  /* USER CODE END 3 */
}
 800034e:	4618      	mov	r0, r3
 8000350:	3748      	adds	r7, #72	@ 0x48
 8000352:	46bd      	mov	sp, r7
 8000354:	bdb0      	pop	{r4, r5, r7, pc}
 8000356:	bf00      	nop
 8000358:	48000400 	.word	0x48000400
 800035c:	08003b58 	.word	0x08003b58
 8000360:	20000028 	.word	0x20000028
 8000364:	1fff75aa 	.word	0x1fff75aa
 8000368:	08003b70 	.word	0x08003b70
 800036c:	1fff75ca 	.word	0x1fff75ca
 8000370:	1fff75a8 	.word	0x1fff75a8
 8000374:	057619f1 	.word	0x057619f1
 8000378:	48000800 	.word	0x48000800

0800037c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800037c:	b580      	push	{r7, lr}
 800037e:	b096      	sub	sp, #88	@ 0x58
 8000380:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000382:	f107 0314 	add.w	r3, r7, #20
 8000386:	2244      	movs	r2, #68	@ 0x44
 8000388:	2100      	movs	r1, #0
 800038a:	4618      	mov	r0, r3
 800038c:	f003 fbac 	bl	8003ae8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000390:	463b      	mov	r3, r7
 8000392:	2200      	movs	r2, #0
 8000394:	601a      	str	r2, [r3, #0]
 8000396:	605a      	str	r2, [r3, #4]
 8000398:	609a      	str	r2, [r3, #8]
 800039a:	60da      	str	r2, [r3, #12]
 800039c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 800039e:	2000      	movs	r0, #0
 80003a0:	f001 ff46 	bl	8002230 <HAL_PWREx_ControlVoltageScaling>
 80003a4:	4603      	mov	r3, r0
 80003a6:	2b00      	cmp	r3, #0
 80003a8:	d001      	beq.n	80003ae <SystemClock_Config+0x32>
  {
    Error_Handler();
 80003aa:	f000 f8ed 	bl	8000588 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80003ae:	2310      	movs	r3, #16
 80003b0:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80003b2:	2301      	movs	r3, #1
 80003b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80003b6:	2300      	movs	r3, #0
 80003b8:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80003ba:	2360      	movs	r3, #96	@ 0x60
 80003bc:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003be:	2302      	movs	r3, #2
 80003c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80003c2:	2301      	movs	r3, #1
 80003c4:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80003c6:	2301      	movs	r3, #1
 80003c8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 60;
 80003ca:	233c      	movs	r3, #60	@ 0x3c
 80003cc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80003ce:	2302      	movs	r3, #2
 80003d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80003d2:	2302      	movs	r3, #2
 80003d4:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80003d6:	2302      	movs	r3, #2
 80003d8:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003da:	f107 0314 	add.w	r3, r7, #20
 80003de:	4618      	mov	r0, r3
 80003e0:	f001 ffca 	bl	8002378 <HAL_RCC_OscConfig>
 80003e4:	4603      	mov	r3, r0
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	d001      	beq.n	80003ee <SystemClock_Config+0x72>
  {
    Error_Handler();
 80003ea:	f000 f8cd 	bl	8000588 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003ee:	230f      	movs	r3, #15
 80003f0:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003f2:	2303      	movs	r3, #3
 80003f4:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003f6:	2300      	movs	r3, #0
 80003f8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80003fa:	2300      	movs	r3, #0
 80003fc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003fe:	2300      	movs	r3, #0
 8000400:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000402:	463b      	mov	r3, r7
 8000404:	2105      	movs	r1, #5
 8000406:	4618      	mov	r0, r3
 8000408:	f002 fbd0 	bl	8002bac <HAL_RCC_ClockConfig>
 800040c:	4603      	mov	r3, r0
 800040e:	2b00      	cmp	r3, #0
 8000410:	d001      	beq.n	8000416 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000412:	f000 f8b9 	bl	8000588 <Error_Handler>
  }
}
 8000416:	bf00      	nop
 8000418:	3758      	adds	r7, #88	@ 0x58
 800041a:	46bd      	mov	sp, r7
 800041c:	bd80      	pop	{r7, pc}
	...

08000420 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000420:	b580      	push	{r7, lr}
 8000422:	b086      	sub	sp, #24
 8000424:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000426:	463b      	mov	r3, r7
 8000428:	2200      	movs	r2, #0
 800042a:	601a      	str	r2, [r3, #0]
 800042c:	605a      	str	r2, [r3, #4]
 800042e:	609a      	str	r2, [r3, #8]
 8000430:	60da      	str	r2, [r3, #12]
 8000432:	611a      	str	r2, [r3, #16]
 8000434:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000436:	4b29      	ldr	r3, [pc, #164]	@ (80004dc <MX_ADC1_Init+0xbc>)
 8000438:	4a29      	ldr	r2, [pc, #164]	@ (80004e0 <MX_ADC1_Init+0xc0>)
 800043a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800043c:	4b27      	ldr	r3, [pc, #156]	@ (80004dc <MX_ADC1_Init+0xbc>)
 800043e:	2200      	movs	r2, #0
 8000440:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000442:	4b26      	ldr	r3, [pc, #152]	@ (80004dc <MX_ADC1_Init+0xbc>)
 8000444:	2200      	movs	r2, #0
 8000446:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000448:	4b24      	ldr	r3, [pc, #144]	@ (80004dc <MX_ADC1_Init+0xbc>)
 800044a:	2200      	movs	r2, #0
 800044c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800044e:	4b23      	ldr	r3, [pc, #140]	@ (80004dc <MX_ADC1_Init+0xbc>)
 8000450:	2200      	movs	r2, #0
 8000452:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000454:	4b21      	ldr	r3, [pc, #132]	@ (80004dc <MX_ADC1_Init+0xbc>)
 8000456:	2204      	movs	r2, #4
 8000458:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800045a:	4b20      	ldr	r3, [pc, #128]	@ (80004dc <MX_ADC1_Init+0xbc>)
 800045c:	2200      	movs	r2, #0
 800045e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000460:	4b1e      	ldr	r3, [pc, #120]	@ (80004dc <MX_ADC1_Init+0xbc>)
 8000462:	2200      	movs	r2, #0
 8000464:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000466:	4b1d      	ldr	r3, [pc, #116]	@ (80004dc <MX_ADC1_Init+0xbc>)
 8000468:	2201      	movs	r2, #1
 800046a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800046c:	4b1b      	ldr	r3, [pc, #108]	@ (80004dc <MX_ADC1_Init+0xbc>)
 800046e:	2200      	movs	r2, #0
 8000470:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000474:	4b19      	ldr	r3, [pc, #100]	@ (80004dc <MX_ADC1_Init+0xbc>)
 8000476:	2200      	movs	r2, #0
 8000478:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800047a:	4b18      	ldr	r3, [pc, #96]	@ (80004dc <MX_ADC1_Init+0xbc>)
 800047c:	2200      	movs	r2, #0
 800047e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000480:	4b16      	ldr	r3, [pc, #88]	@ (80004dc <MX_ADC1_Init+0xbc>)
 8000482:	2200      	movs	r2, #0
 8000484:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000488:	4b14      	ldr	r3, [pc, #80]	@ (80004dc <MX_ADC1_Init+0xbc>)
 800048a:	2200      	movs	r2, #0
 800048c:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800048e:	4b13      	ldr	r3, [pc, #76]	@ (80004dc <MX_ADC1_Init+0xbc>)
 8000490:	2200      	movs	r2, #0
 8000492:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000496:	4811      	ldr	r0, [pc, #68]	@ (80004dc <MX_ADC1_Init+0xbc>)
 8000498:	f000 fbec 	bl	8000c74 <HAL_ADC_Init>
 800049c:	4603      	mov	r3, r0
 800049e:	2b00      	cmp	r3, #0
 80004a0:	d001      	beq.n	80004a6 <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 80004a2:	f000 f871 	bl	8000588 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80004a6:	4b0f      	ldr	r3, [pc, #60]	@ (80004e4 <MX_ADC1_Init+0xc4>)
 80004a8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80004aa:	2306      	movs	r3, #6
 80004ac:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_12CYCLES_5;
 80004ae:	2302      	movs	r3, #2
 80004b0:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80004b2:	237f      	movs	r3, #127	@ 0x7f
 80004b4:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80004b6:	2304      	movs	r3, #4
 80004b8:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80004ba:	2300      	movs	r3, #0
 80004bc:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80004be:	463b      	mov	r3, r7
 80004c0:	4619      	mov	r1, r3
 80004c2:	4806      	ldr	r0, [pc, #24]	@ (80004dc <MX_ADC1_Init+0xbc>)
 80004c4:	f000 fe4e 	bl	8001164 <HAL_ADC_ConfigChannel>
 80004c8:	4603      	mov	r3, r0
 80004ca:	2b00      	cmp	r3, #0
 80004cc:	d001      	beq.n	80004d2 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80004ce:	f000 f85b 	bl	8000588 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80004d2:	bf00      	nop
 80004d4:	3718      	adds	r7, #24
 80004d6:	46bd      	mov	sp, r7
 80004d8:	bd80      	pop	{r7, pc}
 80004da:	bf00      	nop
 80004dc:	20000028 	.word	0x20000028
 80004e0:	50040000 	.word	0x50040000
 80004e4:	c7520000 	.word	0xc7520000

080004e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b088      	sub	sp, #32
 80004ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004ee:	f107 030c 	add.w	r3, r7, #12
 80004f2:	2200      	movs	r2, #0
 80004f4:	601a      	str	r2, [r3, #0]
 80004f6:	605a      	str	r2, [r3, #4]
 80004f8:	609a      	str	r2, [r3, #8]
 80004fa:	60da      	str	r2, [r3, #12]
 80004fc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004fe:	4b1f      	ldr	r3, [pc, #124]	@ (800057c <MX_GPIO_Init+0x94>)
 8000500:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000502:	4a1e      	ldr	r2, [pc, #120]	@ (800057c <MX_GPIO_Init+0x94>)
 8000504:	f043 0304 	orr.w	r3, r3, #4
 8000508:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800050a:	4b1c      	ldr	r3, [pc, #112]	@ (800057c <MX_GPIO_Init+0x94>)
 800050c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800050e:	f003 0304 	and.w	r3, r3, #4
 8000512:	60bb      	str	r3, [r7, #8]
 8000514:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000516:	4b19      	ldr	r3, [pc, #100]	@ (800057c <MX_GPIO_Init+0x94>)
 8000518:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800051a:	4a18      	ldr	r2, [pc, #96]	@ (800057c <MX_GPIO_Init+0x94>)
 800051c:	f043 0302 	orr.w	r3, r3, #2
 8000520:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000522:	4b16      	ldr	r3, [pc, #88]	@ (800057c <MX_GPIO_Init+0x94>)
 8000524:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000526:	f003 0302 	and.w	r3, r3, #2
 800052a:	607b      	str	r3, [r7, #4]
 800052c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 800052e:	2200      	movs	r2, #0
 8000530:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000534:	4812      	ldr	r0, [pc, #72]	@ (8000580 <MX_GPIO_Init+0x98>)
 8000536:	f001 fe43 	bl	80021c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : button_Pin */
  GPIO_InitStruct.Pin = button_Pin;
 800053a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800053e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000540:	2300      	movs	r3, #0
 8000542:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000544:	2300      	movs	r3, #0
 8000546:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(button_GPIO_Port, &GPIO_InitStruct);
 8000548:	f107 030c 	add.w	r3, r7, #12
 800054c:	4619      	mov	r1, r3
 800054e:	480d      	ldr	r0, [pc, #52]	@ (8000584 <MX_GPIO_Init+0x9c>)
 8000550:	f001 fc8c 	bl	8001e6c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED2_Pin */
  GPIO_InitStruct.Pin = LED2_Pin;
 8000554:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000558:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800055a:	2301      	movs	r3, #1
 800055c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800055e:	2300      	movs	r3, #0
 8000560:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000562:	2300      	movs	r3, #0
 8000564:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED2_GPIO_Port, &GPIO_InitStruct);
 8000566:	f107 030c 	add.w	r3, r7, #12
 800056a:	4619      	mov	r1, r3
 800056c:	4804      	ldr	r0, [pc, #16]	@ (8000580 <MX_GPIO_Init+0x98>)
 800056e:	f001 fc7d 	bl	8001e6c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000572:	bf00      	nop
 8000574:	3720      	adds	r7, #32
 8000576:	46bd      	mov	sp, r7
 8000578:	bd80      	pop	{r7, pc}
 800057a:	bf00      	nop
 800057c:	40021000 	.word	0x40021000
 8000580:	48000400 	.word	0x48000400
 8000584:	48000800 	.word	0x48000800

08000588 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000588:	b480      	push	{r7}
 800058a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800058c:	b672      	cpsid	i
}
 800058e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000590:	bf00      	nop
 8000592:	e7fd      	b.n	8000590 <Error_Handler+0x8>

08000594 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000594:	b480      	push	{r7}
 8000596:	b083      	sub	sp, #12
 8000598:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800059a:	4b0f      	ldr	r3, [pc, #60]	@ (80005d8 <HAL_MspInit+0x44>)
 800059c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800059e:	4a0e      	ldr	r2, [pc, #56]	@ (80005d8 <HAL_MspInit+0x44>)
 80005a0:	f043 0301 	orr.w	r3, r3, #1
 80005a4:	6613      	str	r3, [r2, #96]	@ 0x60
 80005a6:	4b0c      	ldr	r3, [pc, #48]	@ (80005d8 <HAL_MspInit+0x44>)
 80005a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80005aa:	f003 0301 	and.w	r3, r3, #1
 80005ae:	607b      	str	r3, [r7, #4]
 80005b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005b2:	4b09      	ldr	r3, [pc, #36]	@ (80005d8 <HAL_MspInit+0x44>)
 80005b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80005b6:	4a08      	ldr	r2, [pc, #32]	@ (80005d8 <HAL_MspInit+0x44>)
 80005b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005bc:	6593      	str	r3, [r2, #88]	@ 0x58
 80005be:	4b06      	ldr	r3, [pc, #24]	@ (80005d8 <HAL_MspInit+0x44>)
 80005c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80005c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005c6:	603b      	str	r3, [r7, #0]
 80005c8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005ca:	bf00      	nop
 80005cc:	370c      	adds	r7, #12
 80005ce:	46bd      	mov	sp, r7
 80005d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop
 80005d8:	40021000 	.word	0x40021000

080005dc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b0a8      	sub	sp, #160	@ 0xa0
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80005e4:	f107 030c 	add.w	r3, r7, #12
 80005e8:	2294      	movs	r2, #148	@ 0x94
 80005ea:	2100      	movs	r1, #0
 80005ec:	4618      	mov	r0, r3
 80005ee:	f003 fa7b 	bl	8003ae8 <memset>
  if(hadc->Instance==ADC1)
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	4a19      	ldr	r2, [pc, #100]	@ (800065c <HAL_ADC_MspInit+0x80>)
 80005f8:	4293      	cmp	r3, r2
 80005fa:	d12b      	bne.n	8000654 <HAL_ADC_MspInit+0x78>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80005fc:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000600:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000602:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000606:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 800060a:	2301      	movs	r3, #1
 800060c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800060e:	2301      	movs	r3, #1
 8000610:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8000612:	2318      	movs	r3, #24
 8000614:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 8000616:	2302      	movs	r3, #2
 8000618:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800061a:	2302      	movs	r3, #2
 800061c:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800061e:	2302      	movs	r3, #2
 8000620:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000622:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000626:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000628:	f107 030c 	add.w	r3, r7, #12
 800062c:	4618      	mov	r0, r3
 800062e:	f002 fd43 	bl	80030b8 <HAL_RCCEx_PeriphCLKConfig>
 8000632:	4603      	mov	r3, r0
 8000634:	2b00      	cmp	r3, #0
 8000636:	d001      	beq.n	800063c <HAL_ADC_MspInit+0x60>
    {
      Error_Handler();
 8000638:	f7ff ffa6 	bl	8000588 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800063c:	4b08      	ldr	r3, [pc, #32]	@ (8000660 <HAL_ADC_MspInit+0x84>)
 800063e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000640:	4a07      	ldr	r2, [pc, #28]	@ (8000660 <HAL_ADC_MspInit+0x84>)
 8000642:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000646:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000648:	4b05      	ldr	r3, [pc, #20]	@ (8000660 <HAL_ADC_MspInit+0x84>)
 800064a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800064c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000650:	60bb      	str	r3, [r7, #8]
 8000652:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000654:	bf00      	nop
 8000656:	37a0      	adds	r7, #160	@ 0xa0
 8000658:	46bd      	mov	sp, r7
 800065a:	bd80      	pop	{r7, pc}
 800065c:	50040000 	.word	0x50040000
 8000660:	40021000 	.word	0x40021000

08000664 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000664:	b480      	push	{r7}
 8000666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000668:	bf00      	nop
 800066a:	e7fd      	b.n	8000668 <NMI_Handler+0x4>

0800066c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800066c:	b480      	push	{r7}
 800066e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000670:	bf00      	nop
 8000672:	e7fd      	b.n	8000670 <HardFault_Handler+0x4>

08000674 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000674:	b480      	push	{r7}
 8000676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000678:	bf00      	nop
 800067a:	e7fd      	b.n	8000678 <MemManage_Handler+0x4>

0800067c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800067c:	b480      	push	{r7}
 800067e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000680:	bf00      	nop
 8000682:	e7fd      	b.n	8000680 <BusFault_Handler+0x4>

08000684 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000684:	b480      	push	{r7}
 8000686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000688:	bf00      	nop
 800068a:	e7fd      	b.n	8000688 <UsageFault_Handler+0x4>

0800068c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800068c:	b480      	push	{r7}
 800068e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000690:	bf00      	nop
 8000692:	46bd      	mov	sp, r7
 8000694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000698:	4770      	bx	lr

0800069a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800069a:	b480      	push	{r7}
 800069c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800069e:	bf00      	nop
 80006a0:	46bd      	mov	sp, r7
 80006a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a6:	4770      	bx	lr

080006a8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006a8:	b480      	push	{r7}
 80006aa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006ac:	bf00      	nop
 80006ae:	46bd      	mov	sp, r7
 80006b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b4:	4770      	bx	lr

080006b6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006b6:	b580      	push	{r7, lr}
 80006b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006ba:	f000 f893 	bl	80007e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006be:	bf00      	nop
 80006c0:	bd80      	pop	{r7, pc}
	...

080006c4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80006c4:	b480      	push	{r7}
 80006c6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80006c8:	4b06      	ldr	r3, [pc, #24]	@ (80006e4 <SystemInit+0x20>)
 80006ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80006ce:	4a05      	ldr	r2, [pc, #20]	@ (80006e4 <SystemInit+0x20>)
 80006d0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80006d4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80006d8:	bf00      	nop
 80006da:	46bd      	mov	sp, r7
 80006dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e0:	4770      	bx	lr
 80006e2:	bf00      	nop
 80006e4:	e000ed00 	.word	0xe000ed00

080006e8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80006e8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000720 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80006ec:	f7ff ffea 	bl	80006c4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006f0:	480c      	ldr	r0, [pc, #48]	@ (8000724 <LoopForever+0x6>)
  ldr r1, =_edata
 80006f2:	490d      	ldr	r1, [pc, #52]	@ (8000728 <LoopForever+0xa>)
  ldr r2, =_sidata
 80006f4:	4a0d      	ldr	r2, [pc, #52]	@ (800072c <LoopForever+0xe>)
  movs r3, #0
 80006f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006f8:	e002      	b.n	8000700 <LoopCopyDataInit>

080006fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006fe:	3304      	adds	r3, #4

08000700 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000700:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000702:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000704:	d3f9      	bcc.n	80006fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000706:	4a0a      	ldr	r2, [pc, #40]	@ (8000730 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000708:	4c0a      	ldr	r4, [pc, #40]	@ (8000734 <LoopForever+0x16>)
  movs r3, #0
 800070a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800070c:	e001      	b.n	8000712 <LoopFillZerobss>

0800070e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800070e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000710:	3204      	adds	r2, #4

08000712 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000712:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000714:	d3fb      	bcc.n	800070e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000716:	f003 f9ef 	bl	8003af8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800071a:	f7ff fd6f 	bl	80001fc <main>

0800071e <LoopForever>:

LoopForever:
    b LoopForever
 800071e:	e7fe      	b.n	800071e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000720:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8000724:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000728:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800072c:	08003bd0 	.word	0x08003bd0
  ldr r2, =_sbss
 8000730:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000734:	20000094 	.word	0x20000094

08000738 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000738:	e7fe      	b.n	8000738 <ADC1_IRQHandler>

0800073a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800073a:	b580      	push	{r7, lr}
 800073c:	b082      	sub	sp, #8
 800073e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000740:	2300      	movs	r3, #0
 8000742:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000744:	2003      	movs	r0, #3
 8000746:	f001 fb5d 	bl	8001e04 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800074a:	2000      	movs	r0, #0
 800074c:	f000 f80e 	bl	800076c <HAL_InitTick>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d002      	beq.n	800075c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000756:	2301      	movs	r3, #1
 8000758:	71fb      	strb	r3, [r7, #7]
 800075a:	e001      	b.n	8000760 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800075c:	f7ff ff1a 	bl	8000594 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000760:	79fb      	ldrb	r3, [r7, #7]
}
 8000762:	4618      	mov	r0, r3
 8000764:	3708      	adds	r7, #8
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}
	...

0800076c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b084      	sub	sp, #16
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000774:	2300      	movs	r3, #0
 8000776:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000778:	4b17      	ldr	r3, [pc, #92]	@ (80007d8 <HAL_InitTick+0x6c>)
 800077a:	781b      	ldrb	r3, [r3, #0]
 800077c:	2b00      	cmp	r3, #0
 800077e:	d023      	beq.n	80007c8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000780:	4b16      	ldr	r3, [pc, #88]	@ (80007dc <HAL_InitTick+0x70>)
 8000782:	681a      	ldr	r2, [r3, #0]
 8000784:	4b14      	ldr	r3, [pc, #80]	@ (80007d8 <HAL_InitTick+0x6c>)
 8000786:	781b      	ldrb	r3, [r3, #0]
 8000788:	4619      	mov	r1, r3
 800078a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800078e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000792:	fbb2 f3f3 	udiv	r3, r2, r3
 8000796:	4618      	mov	r0, r3
 8000798:	f001 fb5b 	bl	8001e52 <HAL_SYSTICK_Config>
 800079c:	4603      	mov	r3, r0
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d10f      	bne.n	80007c2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	2b0f      	cmp	r3, #15
 80007a6:	d809      	bhi.n	80007bc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007a8:	2200      	movs	r2, #0
 80007aa:	6879      	ldr	r1, [r7, #4]
 80007ac:	f04f 30ff 	mov.w	r0, #4294967295
 80007b0:	f001 fb33 	bl	8001e1a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80007b4:	4a0a      	ldr	r2, [pc, #40]	@ (80007e0 <HAL_InitTick+0x74>)
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	6013      	str	r3, [r2, #0]
 80007ba:	e007      	b.n	80007cc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80007bc:	2301      	movs	r3, #1
 80007be:	73fb      	strb	r3, [r7, #15]
 80007c0:	e004      	b.n	80007cc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80007c2:	2301      	movs	r3, #1
 80007c4:	73fb      	strb	r3, [r7, #15]
 80007c6:	e001      	b.n	80007cc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80007c8:	2301      	movs	r3, #1
 80007ca:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80007cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80007ce:	4618      	mov	r0, r3
 80007d0:	3710      	adds	r7, #16
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	20000008 	.word	0x20000008
 80007dc:	20000000 	.word	0x20000000
 80007e0:	20000004 	.word	0x20000004

080007e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007e4:	b480      	push	{r7}
 80007e6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80007e8:	4b06      	ldr	r3, [pc, #24]	@ (8000804 <HAL_IncTick+0x20>)
 80007ea:	781b      	ldrb	r3, [r3, #0]
 80007ec:	461a      	mov	r2, r3
 80007ee:	4b06      	ldr	r3, [pc, #24]	@ (8000808 <HAL_IncTick+0x24>)
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	4413      	add	r3, r2
 80007f4:	4a04      	ldr	r2, [pc, #16]	@ (8000808 <HAL_IncTick+0x24>)
 80007f6:	6013      	str	r3, [r2, #0]
}
 80007f8:	bf00      	nop
 80007fa:	46bd      	mov	sp, r7
 80007fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000800:	4770      	bx	lr
 8000802:	bf00      	nop
 8000804:	20000008 	.word	0x20000008
 8000808:	20000090 	.word	0x20000090

0800080c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800080c:	b480      	push	{r7}
 800080e:	af00      	add	r7, sp, #0
  return uwTick;
 8000810:	4b03      	ldr	r3, [pc, #12]	@ (8000820 <HAL_GetTick+0x14>)
 8000812:	681b      	ldr	r3, [r3, #0]
}
 8000814:	4618      	mov	r0, r3
 8000816:	46bd      	mov	sp, r7
 8000818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081c:	4770      	bx	lr
 800081e:	bf00      	nop
 8000820:	20000090 	.word	0x20000090

08000824 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000824:	b480      	push	{r7}
 8000826:	b083      	sub	sp, #12
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
 800082c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	689b      	ldr	r3, [r3, #8]
 8000832:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8000836:	683b      	ldr	r3, [r7, #0]
 8000838:	431a      	orrs	r2, r3
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	609a      	str	r2, [r3, #8]
}
 800083e:	bf00      	nop
 8000840:	370c      	adds	r7, #12
 8000842:	46bd      	mov	sp, r7
 8000844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000848:	4770      	bx	lr

0800084a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800084a:	b480      	push	{r7}
 800084c:	b083      	sub	sp, #12
 800084e:	af00      	add	r7, sp, #0
 8000850:	6078      	str	r0, [r7, #4]
 8000852:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	689b      	ldr	r3, [r3, #8]
 8000858:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 800085c:	683b      	ldr	r3, [r7, #0]
 800085e:	431a      	orrs	r2, r3
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	609a      	str	r2, [r3, #8]
}
 8000864:	bf00      	nop
 8000866:	370c      	adds	r7, #12
 8000868:	46bd      	mov	sp, r7
 800086a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086e:	4770      	bx	lr

08000870 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000870:	b480      	push	{r7}
 8000872:	b083      	sub	sp, #12
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	689b      	ldr	r3, [r3, #8]
 800087c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8000880:	4618      	mov	r0, r3
 8000882:	370c      	adds	r7, #12
 8000884:	46bd      	mov	sp, r7
 8000886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088a:	4770      	bx	lr

0800088c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800088c:	b480      	push	{r7}
 800088e:	b087      	sub	sp, #28
 8000890:	af00      	add	r7, sp, #0
 8000892:	60f8      	str	r0, [r7, #12]
 8000894:	60b9      	str	r1, [r7, #8]
 8000896:	607a      	str	r2, [r7, #4]
 8000898:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800089a:	68fb      	ldr	r3, [r7, #12]
 800089c:	3360      	adds	r3, #96	@ 0x60
 800089e:	461a      	mov	r2, r3
 80008a0:	68bb      	ldr	r3, [r7, #8]
 80008a2:	009b      	lsls	r3, r3, #2
 80008a4:	4413      	add	r3, r2
 80008a6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80008a8:	697b      	ldr	r3, [r7, #20]
 80008aa:	681a      	ldr	r2, [r3, #0]
 80008ac:	4b08      	ldr	r3, [pc, #32]	@ (80008d0 <LL_ADC_SetOffset+0x44>)
 80008ae:	4013      	ands	r3, r2
 80008b0:	687a      	ldr	r2, [r7, #4]
 80008b2:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80008b6:	683a      	ldr	r2, [r7, #0]
 80008b8:	430a      	orrs	r2, r1
 80008ba:	4313      	orrs	r3, r2
 80008bc:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80008c0:	697b      	ldr	r3, [r7, #20]
 80008c2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80008c4:	bf00      	nop
 80008c6:	371c      	adds	r7, #28
 80008c8:	46bd      	mov	sp, r7
 80008ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ce:	4770      	bx	lr
 80008d0:	03fff000 	.word	0x03fff000

080008d4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80008d4:	b480      	push	{r7}
 80008d6:	b085      	sub	sp, #20
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
 80008dc:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	3360      	adds	r3, #96	@ 0x60
 80008e2:	461a      	mov	r2, r3
 80008e4:	683b      	ldr	r3, [r7, #0]
 80008e6:	009b      	lsls	r3, r3, #2
 80008e8:	4413      	add	r3, r2
 80008ea:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80008ec:	68fb      	ldr	r3, [r7, #12]
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80008f4:	4618      	mov	r0, r3
 80008f6:	3714      	adds	r7, #20
 80008f8:	46bd      	mov	sp, r7
 80008fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fe:	4770      	bx	lr

08000900 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8000900:	b480      	push	{r7}
 8000902:	b087      	sub	sp, #28
 8000904:	af00      	add	r7, sp, #0
 8000906:	60f8      	str	r0, [r7, #12]
 8000908:	60b9      	str	r1, [r7, #8]
 800090a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800090c:	68fb      	ldr	r3, [r7, #12]
 800090e:	3360      	adds	r3, #96	@ 0x60
 8000910:	461a      	mov	r2, r3
 8000912:	68bb      	ldr	r3, [r7, #8]
 8000914:	009b      	lsls	r3, r3, #2
 8000916:	4413      	add	r3, r2
 8000918:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800091a:	697b      	ldr	r3, [r7, #20]
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	431a      	orrs	r2, r3
 8000926:	697b      	ldr	r3, [r7, #20]
 8000928:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800092a:	bf00      	nop
 800092c:	371c      	adds	r7, #28
 800092e:	46bd      	mov	sp, r7
 8000930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000934:	4770      	bx	lr

08000936 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8000936:	b480      	push	{r7}
 8000938:	b083      	sub	sp, #12
 800093a:	af00      	add	r7, sp, #0
 800093c:	6078      	str	r0, [r7, #4]
 800093e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	695b      	ldr	r3, [r3, #20]
 8000944:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8000948:	683b      	ldr	r3, [r7, #0]
 800094a:	431a      	orrs	r2, r3
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	615a      	str	r2, [r3, #20]
}
 8000950:	bf00      	nop
 8000952:	370c      	adds	r7, #12
 8000954:	46bd      	mov	sp, r7
 8000956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095a:	4770      	bx	lr

0800095c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800095c:	b480      	push	{r7}
 800095e:	b083      	sub	sp, #12
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	68db      	ldr	r3, [r3, #12]
 8000968:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800096c:	2b00      	cmp	r3, #0
 800096e:	d101      	bne.n	8000974 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8000970:	2301      	movs	r3, #1
 8000972:	e000      	b.n	8000976 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8000974:	2300      	movs	r3, #0
}
 8000976:	4618      	mov	r0, r3
 8000978:	370c      	adds	r7, #12
 800097a:	46bd      	mov	sp, r7
 800097c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000980:	4770      	bx	lr

08000982 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000982:	b480      	push	{r7}
 8000984:	b087      	sub	sp, #28
 8000986:	af00      	add	r7, sp, #0
 8000988:	60f8      	str	r0, [r7, #12]
 800098a:	60b9      	str	r1, [r7, #8]
 800098c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800098e:	68fb      	ldr	r3, [r7, #12]
 8000990:	3330      	adds	r3, #48	@ 0x30
 8000992:	461a      	mov	r2, r3
 8000994:	68bb      	ldr	r3, [r7, #8]
 8000996:	0a1b      	lsrs	r3, r3, #8
 8000998:	009b      	lsls	r3, r3, #2
 800099a:	f003 030c 	and.w	r3, r3, #12
 800099e:	4413      	add	r3, r2
 80009a0:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80009a2:	697b      	ldr	r3, [r7, #20]
 80009a4:	681a      	ldr	r2, [r3, #0]
 80009a6:	68bb      	ldr	r3, [r7, #8]
 80009a8:	f003 031f 	and.w	r3, r3, #31
 80009ac:	211f      	movs	r1, #31
 80009ae:	fa01 f303 	lsl.w	r3, r1, r3
 80009b2:	43db      	mvns	r3, r3
 80009b4:	401a      	ands	r2, r3
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	0e9b      	lsrs	r3, r3, #26
 80009ba:	f003 011f 	and.w	r1, r3, #31
 80009be:	68bb      	ldr	r3, [r7, #8]
 80009c0:	f003 031f 	and.w	r3, r3, #31
 80009c4:	fa01 f303 	lsl.w	r3, r1, r3
 80009c8:	431a      	orrs	r2, r3
 80009ca:	697b      	ldr	r3, [r7, #20]
 80009cc:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80009ce:	bf00      	nop
 80009d0:	371c      	adds	r7, #28
 80009d2:	46bd      	mov	sp, r7
 80009d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d8:	4770      	bx	lr

080009da <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80009da:	b480      	push	{r7}
 80009dc:	b087      	sub	sp, #28
 80009de:	af00      	add	r7, sp, #0
 80009e0:	60f8      	str	r0, [r7, #12]
 80009e2:	60b9      	str	r1, [r7, #8]
 80009e4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80009e6:	68fb      	ldr	r3, [r7, #12]
 80009e8:	3314      	adds	r3, #20
 80009ea:	461a      	mov	r2, r3
 80009ec:	68bb      	ldr	r3, [r7, #8]
 80009ee:	0e5b      	lsrs	r3, r3, #25
 80009f0:	009b      	lsls	r3, r3, #2
 80009f2:	f003 0304 	and.w	r3, r3, #4
 80009f6:	4413      	add	r3, r2
 80009f8:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80009fa:	697b      	ldr	r3, [r7, #20]
 80009fc:	681a      	ldr	r2, [r3, #0]
 80009fe:	68bb      	ldr	r3, [r7, #8]
 8000a00:	0d1b      	lsrs	r3, r3, #20
 8000a02:	f003 031f 	and.w	r3, r3, #31
 8000a06:	2107      	movs	r1, #7
 8000a08:	fa01 f303 	lsl.w	r3, r1, r3
 8000a0c:	43db      	mvns	r3, r3
 8000a0e:	401a      	ands	r2, r3
 8000a10:	68bb      	ldr	r3, [r7, #8]
 8000a12:	0d1b      	lsrs	r3, r3, #20
 8000a14:	f003 031f 	and.w	r3, r3, #31
 8000a18:	6879      	ldr	r1, [r7, #4]
 8000a1a:	fa01 f303 	lsl.w	r3, r1, r3
 8000a1e:	431a      	orrs	r2, r3
 8000a20:	697b      	ldr	r3, [r7, #20]
 8000a22:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8000a24:	bf00      	nop
 8000a26:	371c      	adds	r7, #28
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2e:	4770      	bx	lr

08000a30 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8000a30:	b480      	push	{r7}
 8000a32:	b085      	sub	sp, #20
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	60f8      	str	r0, [r7, #12]
 8000a38:	60b9      	str	r1, [r7, #8]
 8000a3a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8000a3c:	68fb      	ldr	r3, [r7, #12]
 8000a3e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8000a42:	68bb      	ldr	r3, [r7, #8]
 8000a44:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000a48:	43db      	mvns	r3, r3
 8000a4a:	401a      	ands	r2, r3
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	f003 0318 	and.w	r3, r3, #24
 8000a52:	4908      	ldr	r1, [pc, #32]	@ (8000a74 <LL_ADC_SetChannelSingleDiff+0x44>)
 8000a54:	40d9      	lsrs	r1, r3
 8000a56:	68bb      	ldr	r3, [r7, #8]
 8000a58:	400b      	ands	r3, r1
 8000a5a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000a5e:	431a      	orrs	r2, r3
 8000a60:	68fb      	ldr	r3, [r7, #12]
 8000a62:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8000a66:	bf00      	nop
 8000a68:	3714      	adds	r7, #20
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a70:	4770      	bx	lr
 8000a72:	bf00      	nop
 8000a74:	0007ffff 	.word	0x0007ffff

08000a78 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	b083      	sub	sp, #12
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	689b      	ldr	r3, [r3, #8]
 8000a84:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8000a88:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000a8c:	687a      	ldr	r2, [r7, #4]
 8000a8e:	6093      	str	r3, [r2, #8]
}
 8000a90:	bf00      	nop
 8000a92:	370c      	adds	r7, #12
 8000a94:	46bd      	mov	sp, r7
 8000a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9a:	4770      	bx	lr

08000a9c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	b083      	sub	sp, #12
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	689b      	ldr	r3, [r3, #8]
 8000aa8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8000aac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000ab0:	d101      	bne.n	8000ab6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8000ab2:	2301      	movs	r3, #1
 8000ab4:	e000      	b.n	8000ab8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8000ab6:	2300      	movs	r3, #0
}
 8000ab8:	4618      	mov	r0, r3
 8000aba:	370c      	adds	r7, #12
 8000abc:	46bd      	mov	sp, r7
 8000abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac2:	4770      	bx	lr

08000ac4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	b083      	sub	sp, #12
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	689b      	ldr	r3, [r3, #8]
 8000ad0:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8000ad4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000ad8:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000ae0:	bf00      	nop
 8000ae2:	370c      	adds	r7, #12
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aea:	4770      	bx	lr

08000aec <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8000aec:	b480      	push	{r7}
 8000aee:	b083      	sub	sp, #12
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	689b      	ldr	r3, [r3, #8]
 8000af8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000afc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8000b00:	d101      	bne.n	8000b06 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8000b02:	2301      	movs	r3, #1
 8000b04:	e000      	b.n	8000b08 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8000b06:	2300      	movs	r3, #0
}
 8000b08:	4618      	mov	r0, r3
 8000b0a:	370c      	adds	r7, #12
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b12:	4770      	bx	lr

08000b14 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8000b14:	b480      	push	{r7}
 8000b16:	b083      	sub	sp, #12
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	689b      	ldr	r3, [r3, #8]
 8000b20:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8000b24:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000b28:	f043 0201 	orr.w	r2, r3, #1
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8000b30:	bf00      	nop
 8000b32:	370c      	adds	r7, #12
 8000b34:	46bd      	mov	sp, r7
 8000b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3a:	4770      	bx	lr

08000b3c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	b083      	sub	sp, #12
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	689b      	ldr	r3, [r3, #8]
 8000b48:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8000b4c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000b50:	f043 0202 	orr.w	r2, r3, #2
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8000b58:	bf00      	nop
 8000b5a:	370c      	adds	r7, #12
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b62:	4770      	bx	lr

08000b64 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8000b64:	b480      	push	{r7}
 8000b66:	b083      	sub	sp, #12
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	689b      	ldr	r3, [r3, #8]
 8000b70:	f003 0301 	and.w	r3, r3, #1
 8000b74:	2b01      	cmp	r3, #1
 8000b76:	d101      	bne.n	8000b7c <LL_ADC_IsEnabled+0x18>
 8000b78:	2301      	movs	r3, #1
 8000b7a:	e000      	b.n	8000b7e <LL_ADC_IsEnabled+0x1a>
 8000b7c:	2300      	movs	r3, #0
}
 8000b7e:	4618      	mov	r0, r3
 8000b80:	370c      	adds	r7, #12
 8000b82:	46bd      	mov	sp, r7
 8000b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b88:	4770      	bx	lr

08000b8a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8000b8a:	b480      	push	{r7}
 8000b8c:	b083      	sub	sp, #12
 8000b8e:	af00      	add	r7, sp, #0
 8000b90:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	689b      	ldr	r3, [r3, #8]
 8000b96:	f003 0302 	and.w	r3, r3, #2
 8000b9a:	2b02      	cmp	r3, #2
 8000b9c:	d101      	bne.n	8000ba2 <LL_ADC_IsDisableOngoing+0x18>
 8000b9e:	2301      	movs	r3, #1
 8000ba0:	e000      	b.n	8000ba4 <LL_ADC_IsDisableOngoing+0x1a>
 8000ba2:	2300      	movs	r3, #0
}
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	370c      	adds	r7, #12
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bae:	4770      	bx	lr

08000bb0 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	b083      	sub	sp, #12
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	689b      	ldr	r3, [r3, #8]
 8000bbc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8000bc0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000bc4:	f043 0204 	orr.w	r2, r3, #4
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8000bcc:	bf00      	nop
 8000bce:	370c      	adds	r7, #12
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd6:	4770      	bx	lr

08000bd8 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	b083      	sub	sp, #12
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	689b      	ldr	r3, [r3, #8]
 8000be4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8000be8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000bec:	f043 0210 	orr.w	r2, r3, #16
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8000bf4:	bf00      	nop
 8000bf6:	370c      	adds	r7, #12
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfe:	4770      	bx	lr

08000c00 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8000c00:	b480      	push	{r7}
 8000c02:	b083      	sub	sp, #12
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	689b      	ldr	r3, [r3, #8]
 8000c0c:	f003 0304 	and.w	r3, r3, #4
 8000c10:	2b04      	cmp	r3, #4
 8000c12:	d101      	bne.n	8000c18 <LL_ADC_REG_IsConversionOngoing+0x18>
 8000c14:	2301      	movs	r3, #1
 8000c16:	e000      	b.n	8000c1a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8000c18:	2300      	movs	r3, #0
}
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	370c      	adds	r7, #12
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c24:	4770      	bx	lr

08000c26 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8000c26:	b480      	push	{r7}
 8000c28:	b083      	sub	sp, #12
 8000c2a:	af00      	add	r7, sp, #0
 8000c2c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	689b      	ldr	r3, [r3, #8]
 8000c32:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8000c36:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000c3a:	f043 0220 	orr.w	r2, r3, #32
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8000c42:	bf00      	nop
 8000c44:	370c      	adds	r7, #12
 8000c46:	46bd      	mov	sp, r7
 8000c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4c:	4770      	bx	lr

08000c4e <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8000c4e:	b480      	push	{r7}
 8000c50:	b083      	sub	sp, #12
 8000c52:	af00      	add	r7, sp, #0
 8000c54:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	689b      	ldr	r3, [r3, #8]
 8000c5a:	f003 0308 	and.w	r3, r3, #8
 8000c5e:	2b08      	cmp	r3, #8
 8000c60:	d101      	bne.n	8000c66 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8000c62:	2301      	movs	r3, #1
 8000c64:	e000      	b.n	8000c68 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8000c66:	2300      	movs	r3, #0
}
 8000c68:	4618      	mov	r0, r3
 8000c6a:	370c      	adds	r7, #12
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c72:	4770      	bx	lr

08000c74 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b088      	sub	sp, #32
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8000c80:	2300      	movs	r3, #0
 8000c82:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d101      	bne.n	8000c8e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8000c8a:	2301      	movs	r3, #1
 8000c8c:	e129      	b.n	8000ee2 <HAL_ADC_Init+0x26e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	691b      	ldr	r3, [r3, #16]
 8000c92:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d109      	bne.n	8000cb0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000c9c:	6878      	ldr	r0, [r7, #4]
 8000c9e:	f7ff fc9d 	bl	80005dc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	2200      	movs	r2, #0
 8000cac:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	f7ff fef1 	bl	8000a9c <LL_ADC_IsDeepPowerDownEnabled>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d004      	beq.n	8000cca <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	f7ff fed7 	bl	8000a78 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	4618      	mov	r0, r3
 8000cd0:	f7ff ff0c 	bl	8000aec <LL_ADC_IsInternalRegulatorEnabled>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d115      	bne.n	8000d06 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	4618      	mov	r0, r3
 8000ce0:	f7ff fef0 	bl	8000ac4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8000ce4:	4b81      	ldr	r3, [pc, #516]	@ (8000eec <HAL_ADC_Init+0x278>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	099b      	lsrs	r3, r3, #6
 8000cea:	4a81      	ldr	r2, [pc, #516]	@ (8000ef0 <HAL_ADC_Init+0x27c>)
 8000cec:	fba2 2303 	umull	r2, r3, r2, r3
 8000cf0:	099b      	lsrs	r3, r3, #6
 8000cf2:	3301      	adds	r3, #1
 8000cf4:	005b      	lsls	r3, r3, #1
 8000cf6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8000cf8:	e002      	b.n	8000d00 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8000cfa:	68fb      	ldr	r3, [r7, #12]
 8000cfc:	3b01      	subs	r3, #1
 8000cfe:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d1f9      	bne.n	8000cfa <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	f7ff feee 	bl	8000aec <LL_ADC_IsInternalRegulatorEnabled>
 8000d10:	4603      	mov	r3, r0
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d10d      	bne.n	8000d32 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d1a:	f043 0210 	orr.w	r2, r3, #16
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000d26:	f043 0201 	orr.w	r2, r3, #1
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8000d2e:	2301      	movs	r3, #1
 8000d30:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	4618      	mov	r0, r3
 8000d38:	f7ff ff62 	bl	8000c00 <LL_ADC_REG_IsConversionOngoing>
 8000d3c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d42:	f003 0310 	and.w	r3, r3, #16
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	f040 80c2 	bne.w	8000ed0 <HAL_ADC_Init+0x25c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8000d4c:	697b      	ldr	r3, [r7, #20]
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	f040 80be 	bne.w	8000ed0 <HAL_ADC_Init+0x25c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d58:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8000d5c:	f043 0202 	orr.w	r2, r3, #2
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	4618      	mov	r0, r3
 8000d6a:	f7ff fefb 	bl	8000b64 <LL_ADC_IsEnabled>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d10b      	bne.n	8000d8c <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8000d74:	485f      	ldr	r0, [pc, #380]	@ (8000ef4 <HAL_ADC_Init+0x280>)
 8000d76:	f7ff fef5 	bl	8000b64 <LL_ADC_IsEnabled>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d105      	bne.n	8000d8c <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	685b      	ldr	r3, [r3, #4]
 8000d84:	4619      	mov	r1, r3
 8000d86:	485c      	ldr	r0, [pc, #368]	@ (8000ef8 <HAL_ADC_Init+0x284>)
 8000d88:	f7ff fd4c 	bl	8000824 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	7e5b      	ldrb	r3, [r3, #25]
 8000d90:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000d96:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8000d9c:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8000da2:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000daa:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000dac:	4313      	orrs	r3, r2
 8000dae:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000db6:	2b01      	cmp	r3, #1
 8000db8:	d106      	bne.n	8000dc8 <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000dbe:	3b01      	subs	r3, #1
 8000dc0:	045b      	lsls	r3, r3, #17
 8000dc2:	69ba      	ldr	r2, [r7, #24]
 8000dc4:	4313      	orrs	r3, r2
 8000dc6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d009      	beq.n	8000de4 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000dd4:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000ddc:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8000dde:	69ba      	ldr	r2, [r7, #24]
 8000de0:	4313      	orrs	r3, r2
 8000de2:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	68da      	ldr	r2, [r3, #12]
 8000dea:	4b44      	ldr	r3, [pc, #272]	@ (8000efc <HAL_ADC_Init+0x288>)
 8000dec:	4013      	ands	r3, r2
 8000dee:	687a      	ldr	r2, [r7, #4]
 8000df0:	6812      	ldr	r2, [r2, #0]
 8000df2:	69b9      	ldr	r1, [r7, #24]
 8000df4:	430b      	orrs	r3, r1
 8000df6:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f7ff ff26 	bl	8000c4e <LL_ADC_INJ_IsConversionOngoing>
 8000e02:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8000e04:	697b      	ldr	r3, [r7, #20]
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d140      	bne.n	8000e8c <HAL_ADC_Init+0x218>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8000e0a:	693b      	ldr	r3, [r7, #16]
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d13d      	bne.n	8000e8c <HAL_ADC_Init+0x218>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	7e1b      	ldrb	r3, [r3, #24]
 8000e18:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8000e1a:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8000e22:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8000e24:	4313      	orrs	r3, r2
 8000e26:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	68db      	ldr	r3, [r3, #12]
 8000e2e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8000e32:	f023 0306 	bic.w	r3, r3, #6
 8000e36:	687a      	ldr	r2, [r7, #4]
 8000e38:	6812      	ldr	r2, [r2, #0]
 8000e3a:	69b9      	ldr	r1, [r7, #24]
 8000e3c:	430b      	orrs	r3, r1
 8000e3e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8000e46:	2b01      	cmp	r3, #1
 8000e48:	d118      	bne.n	8000e7c <HAL_ADC_Init+0x208>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	691b      	ldr	r3, [r3, #16]
 8000e50:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8000e54:	f023 0304 	bic.w	r3, r3, #4
 8000e58:	687a      	ldr	r2, [r7, #4]
 8000e5a:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8000e5c:	687a      	ldr	r2, [r7, #4]
 8000e5e:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8000e60:	4311      	orrs	r1, r2
 8000e62:	687a      	ldr	r2, [r7, #4]
 8000e64:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8000e66:	4311      	orrs	r1, r2
 8000e68:	687a      	ldr	r2, [r7, #4]
 8000e6a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8000e6c:	430a      	orrs	r2, r1
 8000e6e:	431a      	orrs	r2, r3
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	f042 0201 	orr.w	r2, r2, #1
 8000e78:	611a      	str	r2, [r3, #16]
 8000e7a:	e007      	b.n	8000e8c <HAL_ADC_Init+0x218>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	691a      	ldr	r2, [r3, #16]
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	f022 0201 	bic.w	r2, r2, #1
 8000e8a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	691b      	ldr	r3, [r3, #16]
 8000e90:	2b01      	cmp	r3, #1
 8000e92:	d10c      	bne.n	8000eae <HAL_ADC_Init+0x23a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e9a:	f023 010f 	bic.w	r1, r3, #15
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	69db      	ldr	r3, [r3, #28]
 8000ea2:	1e5a      	subs	r2, r3, #1
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	430a      	orrs	r2, r1
 8000eaa:	631a      	str	r2, [r3, #48]	@ 0x30
 8000eac:	e007      	b.n	8000ebe <HAL_ADC_Init+0x24a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	f022 020f 	bic.w	r2, r2, #15
 8000ebc:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ec2:	f023 0303 	bic.w	r3, r3, #3
 8000ec6:	f043 0201 	orr.w	r2, r3, #1
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	659a      	str	r2, [r3, #88]	@ 0x58
 8000ece:	e007      	b.n	8000ee0 <HAL_ADC_Init+0x26c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ed4:	f043 0210 	orr.w	r2, r3, #16
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8000edc:	2301      	movs	r3, #1
 8000ede:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8000ee0:	7ffb      	ldrb	r3, [r7, #31]
}
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	3720      	adds	r7, #32
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	20000000 	.word	0x20000000
 8000ef0:	053e2d63 	.word	0x053e2d63
 8000ef4:	50040000 	.word	0x50040000
 8000ef8:	50040300 	.word	0x50040300
 8000efc:	fff0c007 	.word	0xfff0c007

08000f00 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b084      	sub	sp, #16
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	f7ff fe77 	bl	8000c00 <LL_ADC_REG_IsConversionOngoing>
 8000f12:	4603      	mov	r3, r0
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d14f      	bne.n	8000fb8 <HAL_ADC_Start+0xb8>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8000f1e:	2b01      	cmp	r3, #1
 8000f20:	d101      	bne.n	8000f26 <HAL_ADC_Start+0x26>
 8000f22:	2302      	movs	r3, #2
 8000f24:	e04b      	b.n	8000fbe <HAL_ADC_Start+0xbe>
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	2201      	movs	r2, #1
 8000f2a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8000f2e:	6878      	ldr	r0, [r7, #4]
 8000f30:	f000 fdd0 	bl	8001ad4 <ADC_Enable>
 8000f34:	4603      	mov	r3, r0
 8000f36:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8000f38:	7bfb      	ldrb	r3, [r7, #15]
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d137      	bne.n	8000fae <HAL_ADC_Start+0xae>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f42:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8000f46:	f023 0301 	bic.w	r3, r3, #1
 8000f4a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	659a      	str	r2, [r3, #88]	@ 0x58
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f56:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000f5a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8000f5e:	d106      	bne.n	8000f6e <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000f64:	f023 0206 	bic.w	r2, r3, #6
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	65da      	str	r2, [r3, #92]	@ 0x5c
 8000f6c:	e002      	b.n	8000f74 <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	2200      	movs	r2, #0
 8000f72:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	221c      	movs	r2, #28
 8000f7a:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	2200      	movs	r2, #0
 8000f80:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }

      }
#else
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	68db      	ldr	r3, [r3, #12]
 8000f8a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d007      	beq.n	8000fa2 <HAL_ADC_Start+0xa2>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f96:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8000f9a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f7ff fe02 	bl	8000bb0 <LL_ADC_REG_StartConversion>
 8000fac:	e006      	b.n	8000fbc <HAL_ADC_Start+0xbc>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
 8000fb6:	e001      	b.n	8000fbc <HAL_ADC_Start+0xbc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8000fb8:	2302      	movs	r3, #2
 8000fba:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 8000fbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	3710      	adds	r7, #16
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}

08000fc6 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8000fc6:	b580      	push	{r7, lr}
 8000fc8:	b084      	sub	sp, #16
 8000fca:	af00      	add	r7, sp, #0
 8000fcc:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8000fd4:	2b01      	cmp	r3, #1
 8000fd6:	d101      	bne.n	8000fdc <HAL_ADC_Stop+0x16>
 8000fd8:	2302      	movs	r3, #2
 8000fda:	e023      	b.n	8001024 <HAL_ADC_Stop+0x5e>
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	2201      	movs	r2, #1
 8000fe0:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8000fe4:	2103      	movs	r1, #3
 8000fe6:	6878      	ldr	r0, [r7, #4]
 8000fe8:	f000 fcb8 	bl	800195c <ADC_ConversionStop>
 8000fec:	4603      	mov	r3, r0
 8000fee:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8000ff0:	7bfb      	ldrb	r3, [r7, #15]
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d111      	bne.n	800101a <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8000ff6:	6878      	ldr	r0, [r7, #4]
 8000ff8:	f000 fdf2 	bl	8001be0 <ADC_Disable>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8001000:	7bfb      	ldrb	r3, [r7, #15]
 8001002:	2b00      	cmp	r3, #0
 8001004:	d109      	bne.n	800101a <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800100a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800100e:	f023 0301 	bic.w	r3, r3, #1
 8001012:	f043 0201 	orr.w	r2, r3, #1
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	2200      	movs	r2, #0
 800101e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 8001022:	7bfb      	ldrb	r3, [r7, #15]
}
 8001024:	4618      	mov	r0, r3
 8001026:	3710      	adds	r7, #16
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}

0800102c <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b086      	sub	sp, #24
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
 8001034:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	695b      	ldr	r3, [r3, #20]
 800103a:	2b08      	cmp	r3, #8
 800103c:	d102      	bne.n	8001044 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 800103e:	2308      	movs	r3, #8
 8001040:	617b      	str	r3, [r7, #20]
 8001042:	e010      	b.n	8001066 <HAL_ADC_PollForConversion+0x3a>
        tmp_Flag_End = (ADC_FLAG_EOC);
      }
    }
#else
    /* Check ADC DMA mode */
    if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	68db      	ldr	r3, [r3, #12]
 800104a:	f003 0301 	and.w	r3, r3, #1
 800104e:	2b00      	cmp	r3, #0
 8001050:	d007      	beq.n	8001062 <HAL_ADC_PollForConversion+0x36>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001056:	f043 0220 	orr.w	r2, r3, #32
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 800105e:	2301      	movs	r3, #1
 8001060:	e06f      	b.n	8001142 <HAL_ADC_PollForConversion+0x116>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 8001062:	2304      	movs	r3, #4
 8001064:	617b      	str	r3, [r7, #20]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8001066:	f7ff fbd1 	bl	800080c <HAL_GetTick>
 800106a:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800106c:	e021      	b.n	80010b2 <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001074:	d01d      	beq.n	80010b2 <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8001076:	f7ff fbc9 	bl	800080c <HAL_GetTick>
 800107a:	4602      	mov	r2, r0
 800107c:	693b      	ldr	r3, [r7, #16]
 800107e:	1ad3      	subs	r3, r2, r3
 8001080:	683a      	ldr	r2, [r7, #0]
 8001082:	429a      	cmp	r2, r3
 8001084:	d302      	bcc.n	800108c <HAL_ADC_PollForConversion+0x60>
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	2b00      	cmp	r3, #0
 800108a:	d112      	bne.n	80010b2 <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	681a      	ldr	r2, [r3, #0]
 8001092:	697b      	ldr	r3, [r7, #20]
 8001094:	4013      	ands	r3, r2
 8001096:	2b00      	cmp	r3, #0
 8001098:	d10b      	bne.n	80010b2 <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800109e:	f043 0204 	orr.w	r2, r3, #4
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	2200      	movs	r2, #0
 80010aa:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

          return HAL_TIMEOUT;
 80010ae:	2303      	movs	r3, #3
 80010b0:	e047      	b.n	8001142 <HAL_ADC_PollForConversion+0x116>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	681a      	ldr	r2, [r3, #0]
 80010b8:	697b      	ldr	r3, [r7, #20]
 80010ba:	4013      	ands	r3, r2
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d0d6      	beq.n	800106e <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010c4:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	4618      	mov	r0, r3
 80010d2:	f7ff fc43 	bl	800095c <LL_ADC_REG_IsTriggerSourceSWStart>
 80010d6:	4603      	mov	r3, r0
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d01c      	beq.n	8001116 <HAL_ADC_PollForConversion+0xea>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	7e5b      	ldrb	r3, [r3, #25]
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d118      	bne.n	8001116 <HAL_ADC_PollForConversion+0xea>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	f003 0308 	and.w	r3, r3, #8
 80010ee:	2b08      	cmp	r3, #8
 80010f0:	d111      	bne.n	8001116 <HAL_ADC_PollForConversion+0xea>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010f6:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	659a      	str	r2, [r3, #88]	@ 0x58

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001102:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001106:	2b00      	cmp	r3, #0
 8001108:	d105      	bne.n	8001116 <HAL_ADC_PollForConversion+0xea>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800110e:	f043 0201 	orr.w	r2, r3, #1
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	659a      	str	r2, [r3, #88]	@ 0x58
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
  }
#else
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	68db      	ldr	r3, [r3, #12]
 800111c:	60fb      	str	r3, [r7, #12]
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 800111e:	697b      	ldr	r3, [r7, #20]
 8001120:	2b08      	cmp	r3, #8
 8001122:	d104      	bne.n	800112e <HAL_ADC_PollForConversion+0x102>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	2208      	movs	r2, #8
 800112a:	601a      	str	r2, [r3, #0]
 800112c:	e008      	b.n	8001140 <HAL_ADC_PollForConversion+0x114>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001134:	2b00      	cmp	r3, #0
 8001136:	d103      	bne.n	8001140 <HAL_ADC_PollForConversion+0x114>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	220c      	movs	r2, #12
 800113e:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8001140:	2300      	movs	r3, #0
}
 8001142:	4618      	mov	r0, r3
 8001144:	3718      	adds	r7, #24
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}

0800114a <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 800114a:	b480      	push	{r7}
 800114c:	b083      	sub	sp, #12
 800114e:	af00      	add	r7, sp, #0
 8001150:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8001158:	4618      	mov	r0, r3
 800115a:	370c      	adds	r7, #12
 800115c:	46bd      	mov	sp, r7
 800115e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001162:	4770      	bx	lr

08001164 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b0b6      	sub	sp, #216	@ 0xd8
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
 800116c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800116e:	2300      	movs	r3, #0
 8001170:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001174:	2300      	movs	r3, #0
 8001176:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800117e:	2b01      	cmp	r3, #1
 8001180:	d101      	bne.n	8001186 <HAL_ADC_ConfigChannel+0x22>
 8001182:	2302      	movs	r3, #2
 8001184:	e3d5      	b.n	8001932 <HAL_ADC_ConfigChannel+0x7ce>
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	2201      	movs	r2, #1
 800118a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	4618      	mov	r0, r3
 8001194:	f7ff fd34 	bl	8000c00 <LL_ADC_REG_IsConversionOngoing>
 8001198:	4603      	mov	r3, r0
 800119a:	2b00      	cmp	r3, #0
 800119c:	f040 83ba 	bne.w	8001914 <HAL_ADC_ConfigChannel+0x7b0>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	685b      	ldr	r3, [r3, #4]
 80011a4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	2b05      	cmp	r3, #5
 80011ae:	d824      	bhi.n	80011fa <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	685b      	ldr	r3, [r3, #4]
 80011b4:	3b02      	subs	r3, #2
 80011b6:	2b03      	cmp	r3, #3
 80011b8:	d81b      	bhi.n	80011f2 <HAL_ADC_ConfigChannel+0x8e>
 80011ba:	a201      	add	r2, pc, #4	@ (adr r2, 80011c0 <HAL_ADC_ConfigChannel+0x5c>)
 80011bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011c0:	080011d1 	.word	0x080011d1
 80011c4:	080011d9 	.word	0x080011d9
 80011c8:	080011e1 	.word	0x080011e1
 80011cc:	080011e9 	.word	0x080011e9
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 80011d0:	230c      	movs	r3, #12
 80011d2:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80011d6:	e010      	b.n	80011fa <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 80011d8:	2312      	movs	r3, #18
 80011da:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80011de:	e00c      	b.n	80011fa <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 80011e0:	2318      	movs	r3, #24
 80011e2:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80011e6:	e008      	b.n	80011fa <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 80011e8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80011ec:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80011f0:	e003      	b.n	80011fa <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 80011f2:	2306      	movs	r3, #6
 80011f4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80011f8:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	6818      	ldr	r0, [r3, #0]
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	461a      	mov	r2, r3
 8001204:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8001208:	f7ff fbbb 	bl	8000982 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	4618      	mov	r0, r3
 8001212:	f7ff fcf5 	bl	8000c00 <LL_ADC_REG_IsConversionOngoing>
 8001216:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	4618      	mov	r0, r3
 8001220:	f7ff fd15 	bl	8000c4e <LL_ADC_INJ_IsConversionOngoing>
 8001224:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001228:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800122c:	2b00      	cmp	r3, #0
 800122e:	f040 81bf 	bne.w	80015b0 <HAL_ADC_ConfigChannel+0x44c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001232:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8001236:	2b00      	cmp	r3, #0
 8001238:	f040 81ba 	bne.w	80015b0 <HAL_ADC_ConfigChannel+0x44c>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	689b      	ldr	r3, [r3, #8]
 8001240:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001244:	d10f      	bne.n	8001266 <HAL_ADC_ConfigChannel+0x102>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	6818      	ldr	r0, [r3, #0]
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	2200      	movs	r2, #0
 8001250:	4619      	mov	r1, r3
 8001252:	f7ff fbc2 	bl	80009da <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 800125e:	4618      	mov	r0, r3
 8001260:	f7ff fb69 	bl	8000936 <LL_ADC_SetSamplingTimeCommonConfig>
 8001264:	e00e      	b.n	8001284 <HAL_ADC_ConfigChannel+0x120>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	6818      	ldr	r0, [r3, #0]
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	6819      	ldr	r1, [r3, #0]
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	689b      	ldr	r3, [r3, #8]
 8001272:	461a      	mov	r2, r3
 8001274:	f7ff fbb1 	bl	80009da <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	2100      	movs	r1, #0
 800127e:	4618      	mov	r0, r3
 8001280:	f7ff fb59 	bl	8000936 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	695a      	ldr	r2, [r3, #20]
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	68db      	ldr	r3, [r3, #12]
 800128e:	08db      	lsrs	r3, r3, #3
 8001290:	f003 0303 	and.w	r3, r3, #3
 8001294:	005b      	lsls	r3, r3, #1
 8001296:	fa02 f303 	lsl.w	r3, r2, r3
 800129a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	691b      	ldr	r3, [r3, #16]
 80012a2:	2b04      	cmp	r3, #4
 80012a4:	d00a      	beq.n	80012bc <HAL_ADC_ConfigChannel+0x158>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	6818      	ldr	r0, [r3, #0]
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	6919      	ldr	r1, [r3, #16]
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	681a      	ldr	r2, [r3, #0]
 80012b2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80012b6:	f7ff fae9 	bl	800088c <LL_ADC_SetOffset>
 80012ba:	e179      	b.n	80015b0 <HAL_ADC_ConfigChannel+0x44c>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	2100      	movs	r1, #0
 80012c2:	4618      	mov	r0, r3
 80012c4:	f7ff fb06 	bl	80008d4 <LL_ADC_GetOffsetChannel>
 80012c8:	4603      	mov	r3, r0
 80012ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d10a      	bne.n	80012e8 <HAL_ADC_ConfigChannel+0x184>
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	2100      	movs	r1, #0
 80012d8:	4618      	mov	r0, r3
 80012da:	f7ff fafb 	bl	80008d4 <LL_ADC_GetOffsetChannel>
 80012de:	4603      	mov	r3, r0
 80012e0:	0e9b      	lsrs	r3, r3, #26
 80012e2:	f003 021f 	and.w	r2, r3, #31
 80012e6:	e01e      	b.n	8001326 <HAL_ADC_ConfigChannel+0x1c2>
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	2100      	movs	r1, #0
 80012ee:	4618      	mov	r0, r3
 80012f0:	f7ff faf0 	bl	80008d4 <LL_ADC_GetOffsetChannel>
 80012f4:	4603      	mov	r3, r0
 80012f6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012fa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80012fe:	fa93 f3a3 	rbit	r3, r3
 8001302:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001306:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800130a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800130e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001312:	2b00      	cmp	r3, #0
 8001314:	d101      	bne.n	800131a <HAL_ADC_ConfigChannel+0x1b6>
  {
    return 32U;
 8001316:	2320      	movs	r3, #32
 8001318:	e004      	b.n	8001324 <HAL_ADC_ConfigChannel+0x1c0>
  }
  return __builtin_clz(value);
 800131a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800131e:	fab3 f383 	clz	r3, r3
 8001322:	b2db      	uxtb	r3, r3
 8001324:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800132e:	2b00      	cmp	r3, #0
 8001330:	d105      	bne.n	800133e <HAL_ADC_ConfigChannel+0x1da>
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	0e9b      	lsrs	r3, r3, #26
 8001338:	f003 031f 	and.w	r3, r3, #31
 800133c:	e018      	b.n	8001370 <HAL_ADC_ConfigChannel+0x20c>
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001346:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800134a:	fa93 f3a3 	rbit	r3, r3
 800134e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8001352:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001356:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 800135a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800135e:	2b00      	cmp	r3, #0
 8001360:	d101      	bne.n	8001366 <HAL_ADC_ConfigChannel+0x202>
    return 32U;
 8001362:	2320      	movs	r3, #32
 8001364:	e004      	b.n	8001370 <HAL_ADC_ConfigChannel+0x20c>
  return __builtin_clz(value);
 8001366:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800136a:	fab3 f383 	clz	r3, r3
 800136e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001370:	429a      	cmp	r2, r3
 8001372:	d106      	bne.n	8001382 <HAL_ADC_ConfigChannel+0x21e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	2200      	movs	r2, #0
 800137a:	2100      	movs	r1, #0
 800137c:	4618      	mov	r0, r3
 800137e:	f7ff fabf 	bl	8000900 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	2101      	movs	r1, #1
 8001388:	4618      	mov	r0, r3
 800138a:	f7ff faa3 	bl	80008d4 <LL_ADC_GetOffsetChannel>
 800138e:	4603      	mov	r3, r0
 8001390:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001394:	2b00      	cmp	r3, #0
 8001396:	d10a      	bne.n	80013ae <HAL_ADC_ConfigChannel+0x24a>
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	2101      	movs	r1, #1
 800139e:	4618      	mov	r0, r3
 80013a0:	f7ff fa98 	bl	80008d4 <LL_ADC_GetOffsetChannel>
 80013a4:	4603      	mov	r3, r0
 80013a6:	0e9b      	lsrs	r3, r3, #26
 80013a8:	f003 021f 	and.w	r2, r3, #31
 80013ac:	e01e      	b.n	80013ec <HAL_ADC_ConfigChannel+0x288>
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	2101      	movs	r1, #1
 80013b4:	4618      	mov	r0, r3
 80013b6:	f7ff fa8d 	bl	80008d4 <LL_ADC_GetOffsetChannel>
 80013ba:	4603      	mov	r3, r0
 80013bc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013c0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80013c4:	fa93 f3a3 	rbit	r3, r3
 80013c8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 80013cc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80013d0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 80013d4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d101      	bne.n	80013e0 <HAL_ADC_ConfigChannel+0x27c>
    return 32U;
 80013dc:	2320      	movs	r3, #32
 80013de:	e004      	b.n	80013ea <HAL_ADC_ConfigChannel+0x286>
  return __builtin_clz(value);
 80013e0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80013e4:	fab3 f383 	clz	r3, r3
 80013e8:	b2db      	uxtb	r3, r3
 80013ea:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d105      	bne.n	8001404 <HAL_ADC_ConfigChannel+0x2a0>
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	0e9b      	lsrs	r3, r3, #26
 80013fe:	f003 031f 	and.w	r3, r3, #31
 8001402:	e018      	b.n	8001436 <HAL_ADC_ConfigChannel+0x2d2>
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800140c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001410:	fa93 f3a3 	rbit	r3, r3
 8001414:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8001418:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800141c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8001420:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001424:	2b00      	cmp	r3, #0
 8001426:	d101      	bne.n	800142c <HAL_ADC_ConfigChannel+0x2c8>
    return 32U;
 8001428:	2320      	movs	r3, #32
 800142a:	e004      	b.n	8001436 <HAL_ADC_ConfigChannel+0x2d2>
  return __builtin_clz(value);
 800142c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001430:	fab3 f383 	clz	r3, r3
 8001434:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001436:	429a      	cmp	r2, r3
 8001438:	d106      	bne.n	8001448 <HAL_ADC_ConfigChannel+0x2e4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	2200      	movs	r2, #0
 8001440:	2101      	movs	r1, #1
 8001442:	4618      	mov	r0, r3
 8001444:	f7ff fa5c 	bl	8000900 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	2102      	movs	r1, #2
 800144e:	4618      	mov	r0, r3
 8001450:	f7ff fa40 	bl	80008d4 <LL_ADC_GetOffsetChannel>
 8001454:	4603      	mov	r3, r0
 8001456:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800145a:	2b00      	cmp	r3, #0
 800145c:	d10a      	bne.n	8001474 <HAL_ADC_ConfigChannel+0x310>
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	2102      	movs	r1, #2
 8001464:	4618      	mov	r0, r3
 8001466:	f7ff fa35 	bl	80008d4 <LL_ADC_GetOffsetChannel>
 800146a:	4603      	mov	r3, r0
 800146c:	0e9b      	lsrs	r3, r3, #26
 800146e:	f003 021f 	and.w	r2, r3, #31
 8001472:	e01e      	b.n	80014b2 <HAL_ADC_ConfigChannel+0x34e>
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	2102      	movs	r1, #2
 800147a:	4618      	mov	r0, r3
 800147c:	f7ff fa2a 	bl	80008d4 <LL_ADC_GetOffsetChannel>
 8001480:	4603      	mov	r3, r0
 8001482:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001486:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800148a:	fa93 f3a3 	rbit	r3, r3
 800148e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8001492:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001496:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 800149a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d101      	bne.n	80014a6 <HAL_ADC_ConfigChannel+0x342>
    return 32U;
 80014a2:	2320      	movs	r3, #32
 80014a4:	e004      	b.n	80014b0 <HAL_ADC_ConfigChannel+0x34c>
  return __builtin_clz(value);
 80014a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80014aa:	fab3 f383 	clz	r3, r3
 80014ae:	b2db      	uxtb	r3, r3
 80014b0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d105      	bne.n	80014ca <HAL_ADC_ConfigChannel+0x366>
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	0e9b      	lsrs	r3, r3, #26
 80014c4:	f003 031f 	and.w	r3, r3, #31
 80014c8:	e014      	b.n	80014f4 <HAL_ADC_ConfigChannel+0x390>
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014d0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80014d2:	fa93 f3a3 	rbit	r3, r3
 80014d6:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 80014d8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80014da:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 80014de:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d101      	bne.n	80014ea <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 80014e6:	2320      	movs	r3, #32
 80014e8:	e004      	b.n	80014f4 <HAL_ADC_ConfigChannel+0x390>
  return __builtin_clz(value);
 80014ea:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80014ee:	fab3 f383 	clz	r3, r3
 80014f2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80014f4:	429a      	cmp	r2, r3
 80014f6:	d106      	bne.n	8001506 <HAL_ADC_ConfigChannel+0x3a2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	2200      	movs	r2, #0
 80014fe:	2102      	movs	r1, #2
 8001500:	4618      	mov	r0, r3
 8001502:	f7ff f9fd 	bl	8000900 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	2103      	movs	r1, #3
 800150c:	4618      	mov	r0, r3
 800150e:	f7ff f9e1 	bl	80008d4 <LL_ADC_GetOffsetChannel>
 8001512:	4603      	mov	r3, r0
 8001514:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001518:	2b00      	cmp	r3, #0
 800151a:	d10a      	bne.n	8001532 <HAL_ADC_ConfigChannel+0x3ce>
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	2103      	movs	r1, #3
 8001522:	4618      	mov	r0, r3
 8001524:	f7ff f9d6 	bl	80008d4 <LL_ADC_GetOffsetChannel>
 8001528:	4603      	mov	r3, r0
 800152a:	0e9b      	lsrs	r3, r3, #26
 800152c:	f003 021f 	and.w	r2, r3, #31
 8001530:	e017      	b.n	8001562 <HAL_ADC_ConfigChannel+0x3fe>
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	2103      	movs	r1, #3
 8001538:	4618      	mov	r0, r3
 800153a:	f7ff f9cb 	bl	80008d4 <LL_ADC_GetOffsetChannel>
 800153e:	4603      	mov	r3, r0
 8001540:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001542:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001544:	fa93 f3a3 	rbit	r3, r3
 8001548:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 800154a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800154c:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 800154e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001550:	2b00      	cmp	r3, #0
 8001552:	d101      	bne.n	8001558 <HAL_ADC_ConfigChannel+0x3f4>
    return 32U;
 8001554:	2320      	movs	r3, #32
 8001556:	e003      	b.n	8001560 <HAL_ADC_ConfigChannel+0x3fc>
  return __builtin_clz(value);
 8001558:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800155a:	fab3 f383 	clz	r3, r3
 800155e:	b2db      	uxtb	r3, r3
 8001560:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800156a:	2b00      	cmp	r3, #0
 800156c:	d105      	bne.n	800157a <HAL_ADC_ConfigChannel+0x416>
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	0e9b      	lsrs	r3, r3, #26
 8001574:	f003 031f 	and.w	r3, r3, #31
 8001578:	e011      	b.n	800159e <HAL_ADC_ConfigChannel+0x43a>
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001580:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001582:	fa93 f3a3 	rbit	r3, r3
 8001586:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8001588:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800158a:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 800158c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800158e:	2b00      	cmp	r3, #0
 8001590:	d101      	bne.n	8001596 <HAL_ADC_ConfigChannel+0x432>
    return 32U;
 8001592:	2320      	movs	r3, #32
 8001594:	e003      	b.n	800159e <HAL_ADC_ConfigChannel+0x43a>
  return __builtin_clz(value);
 8001596:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001598:	fab3 f383 	clz	r3, r3
 800159c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800159e:	429a      	cmp	r2, r3
 80015a0:	d106      	bne.n	80015b0 <HAL_ADC_ConfigChannel+0x44c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	2200      	movs	r2, #0
 80015a8:	2103      	movs	r1, #3
 80015aa:	4618      	mov	r0, r3
 80015ac:	f7ff f9a8 	bl	8000900 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	4618      	mov	r0, r3
 80015b6:	f7ff fad5 	bl	8000b64 <LL_ADC_IsEnabled>
 80015ba:	4603      	mov	r3, r0
 80015bc:	2b00      	cmp	r3, #0
 80015be:	f040 813f 	bne.w	8001840 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	6818      	ldr	r0, [r3, #0]
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	6819      	ldr	r1, [r3, #0]
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	68db      	ldr	r3, [r3, #12]
 80015ce:	461a      	mov	r2, r3
 80015d0:	f7ff fa2e 	bl	8000a30 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80015d4:	683b      	ldr	r3, [r7, #0]
 80015d6:	68db      	ldr	r3, [r3, #12]
 80015d8:	4a8e      	ldr	r2, [pc, #568]	@ (8001814 <HAL_ADC_ConfigChannel+0x6b0>)
 80015da:	4293      	cmp	r3, r2
 80015dc:	f040 8130 	bne.w	8001840 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d10b      	bne.n	8001608 <HAL_ADC_ConfigChannel+0x4a4>
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	0e9b      	lsrs	r3, r3, #26
 80015f6:	3301      	adds	r3, #1
 80015f8:	f003 031f 	and.w	r3, r3, #31
 80015fc:	2b09      	cmp	r3, #9
 80015fe:	bf94      	ite	ls
 8001600:	2301      	movls	r3, #1
 8001602:	2300      	movhi	r3, #0
 8001604:	b2db      	uxtb	r3, r3
 8001606:	e019      	b.n	800163c <HAL_ADC_ConfigChannel+0x4d8>
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800160e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001610:	fa93 f3a3 	rbit	r3, r3
 8001614:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8001616:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001618:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 800161a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800161c:	2b00      	cmp	r3, #0
 800161e:	d101      	bne.n	8001624 <HAL_ADC_ConfigChannel+0x4c0>
    return 32U;
 8001620:	2320      	movs	r3, #32
 8001622:	e003      	b.n	800162c <HAL_ADC_ConfigChannel+0x4c8>
  return __builtin_clz(value);
 8001624:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001626:	fab3 f383 	clz	r3, r3
 800162a:	b2db      	uxtb	r3, r3
 800162c:	3301      	adds	r3, #1
 800162e:	f003 031f 	and.w	r3, r3, #31
 8001632:	2b09      	cmp	r3, #9
 8001634:	bf94      	ite	ls
 8001636:	2301      	movls	r3, #1
 8001638:	2300      	movhi	r3, #0
 800163a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800163c:	2b00      	cmp	r3, #0
 800163e:	d079      	beq.n	8001734 <HAL_ADC_ConfigChannel+0x5d0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001648:	2b00      	cmp	r3, #0
 800164a:	d107      	bne.n	800165c <HAL_ADC_ConfigChannel+0x4f8>
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	0e9b      	lsrs	r3, r3, #26
 8001652:	3301      	adds	r3, #1
 8001654:	069b      	lsls	r3, r3, #26
 8001656:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800165a:	e015      	b.n	8001688 <HAL_ADC_ConfigChannel+0x524>
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001662:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001664:	fa93 f3a3 	rbit	r3, r3
 8001668:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 800166a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800166c:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 800166e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001670:	2b00      	cmp	r3, #0
 8001672:	d101      	bne.n	8001678 <HAL_ADC_ConfigChannel+0x514>
    return 32U;
 8001674:	2320      	movs	r3, #32
 8001676:	e003      	b.n	8001680 <HAL_ADC_ConfigChannel+0x51c>
  return __builtin_clz(value);
 8001678:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800167a:	fab3 f383 	clz	r3, r3
 800167e:	b2db      	uxtb	r3, r3
 8001680:	3301      	adds	r3, #1
 8001682:	069b      	lsls	r3, r3, #26
 8001684:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001690:	2b00      	cmp	r3, #0
 8001692:	d109      	bne.n	80016a8 <HAL_ADC_ConfigChannel+0x544>
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	0e9b      	lsrs	r3, r3, #26
 800169a:	3301      	adds	r3, #1
 800169c:	f003 031f 	and.w	r3, r3, #31
 80016a0:	2101      	movs	r1, #1
 80016a2:	fa01 f303 	lsl.w	r3, r1, r3
 80016a6:	e017      	b.n	80016d8 <HAL_ADC_ConfigChannel+0x574>
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016ae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80016b0:	fa93 f3a3 	rbit	r3, r3
 80016b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 80016b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80016b8:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 80016ba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d101      	bne.n	80016c4 <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 80016c0:	2320      	movs	r3, #32
 80016c2:	e003      	b.n	80016cc <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 80016c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80016c6:	fab3 f383 	clz	r3, r3
 80016ca:	b2db      	uxtb	r3, r3
 80016cc:	3301      	adds	r3, #1
 80016ce:	f003 031f 	and.w	r3, r3, #31
 80016d2:	2101      	movs	r1, #1
 80016d4:	fa01 f303 	lsl.w	r3, r1, r3
 80016d8:	ea42 0103 	orr.w	r1, r2, r3
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d10a      	bne.n	80016fe <HAL_ADC_ConfigChannel+0x59a>
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	0e9b      	lsrs	r3, r3, #26
 80016ee:	3301      	adds	r3, #1
 80016f0:	f003 021f 	and.w	r2, r3, #31
 80016f4:	4613      	mov	r3, r2
 80016f6:	005b      	lsls	r3, r3, #1
 80016f8:	4413      	add	r3, r2
 80016fa:	051b      	lsls	r3, r3, #20
 80016fc:	e018      	b.n	8001730 <HAL_ADC_ConfigChannel+0x5cc>
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001704:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001706:	fa93 f3a3 	rbit	r3, r3
 800170a:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 800170c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800170e:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8001710:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001712:	2b00      	cmp	r3, #0
 8001714:	d101      	bne.n	800171a <HAL_ADC_ConfigChannel+0x5b6>
    return 32U;
 8001716:	2320      	movs	r3, #32
 8001718:	e003      	b.n	8001722 <HAL_ADC_ConfigChannel+0x5be>
  return __builtin_clz(value);
 800171a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800171c:	fab3 f383 	clz	r3, r3
 8001720:	b2db      	uxtb	r3, r3
 8001722:	3301      	adds	r3, #1
 8001724:	f003 021f 	and.w	r2, r3, #31
 8001728:	4613      	mov	r3, r2
 800172a:	005b      	lsls	r3, r3, #1
 800172c:	4413      	add	r3, r2
 800172e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001730:	430b      	orrs	r3, r1
 8001732:	e080      	b.n	8001836 <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800173c:	2b00      	cmp	r3, #0
 800173e:	d107      	bne.n	8001750 <HAL_ADC_ConfigChannel+0x5ec>
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	0e9b      	lsrs	r3, r3, #26
 8001746:	3301      	adds	r3, #1
 8001748:	069b      	lsls	r3, r3, #26
 800174a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800174e:	e015      	b.n	800177c <HAL_ADC_ConfigChannel+0x618>
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001756:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001758:	fa93 f3a3 	rbit	r3, r3
 800175c:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 800175e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001760:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8001762:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001764:	2b00      	cmp	r3, #0
 8001766:	d101      	bne.n	800176c <HAL_ADC_ConfigChannel+0x608>
    return 32U;
 8001768:	2320      	movs	r3, #32
 800176a:	e003      	b.n	8001774 <HAL_ADC_ConfigChannel+0x610>
  return __builtin_clz(value);
 800176c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800176e:	fab3 f383 	clz	r3, r3
 8001772:	b2db      	uxtb	r3, r3
 8001774:	3301      	adds	r3, #1
 8001776:	069b      	lsls	r3, r3, #26
 8001778:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001784:	2b00      	cmp	r3, #0
 8001786:	d109      	bne.n	800179c <HAL_ADC_ConfigChannel+0x638>
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	0e9b      	lsrs	r3, r3, #26
 800178e:	3301      	adds	r3, #1
 8001790:	f003 031f 	and.w	r3, r3, #31
 8001794:	2101      	movs	r1, #1
 8001796:	fa01 f303 	lsl.w	r3, r1, r3
 800179a:	e017      	b.n	80017cc <HAL_ADC_ConfigChannel+0x668>
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017a2:	69fb      	ldr	r3, [r7, #28]
 80017a4:	fa93 f3a3 	rbit	r3, r3
 80017a8:	61bb      	str	r3, [r7, #24]
  return result;
 80017aa:	69bb      	ldr	r3, [r7, #24]
 80017ac:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80017ae:	6a3b      	ldr	r3, [r7, #32]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d101      	bne.n	80017b8 <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 80017b4:	2320      	movs	r3, #32
 80017b6:	e003      	b.n	80017c0 <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 80017b8:	6a3b      	ldr	r3, [r7, #32]
 80017ba:	fab3 f383 	clz	r3, r3
 80017be:	b2db      	uxtb	r3, r3
 80017c0:	3301      	adds	r3, #1
 80017c2:	f003 031f 	and.w	r3, r3, #31
 80017c6:	2101      	movs	r1, #1
 80017c8:	fa01 f303 	lsl.w	r3, r1, r3
 80017cc:	ea42 0103 	orr.w	r1, r2, r3
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d10d      	bne.n	80017f8 <HAL_ADC_ConfigChannel+0x694>
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	0e9b      	lsrs	r3, r3, #26
 80017e2:	3301      	adds	r3, #1
 80017e4:	f003 021f 	and.w	r2, r3, #31
 80017e8:	4613      	mov	r3, r2
 80017ea:	005b      	lsls	r3, r3, #1
 80017ec:	4413      	add	r3, r2
 80017ee:	3b1e      	subs	r3, #30
 80017f0:	051b      	lsls	r3, r3, #20
 80017f2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80017f6:	e01d      	b.n	8001834 <HAL_ADC_ConfigChannel+0x6d0>
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017fe:	693b      	ldr	r3, [r7, #16]
 8001800:	fa93 f3a3 	rbit	r3, r3
 8001804:	60fb      	str	r3, [r7, #12]
  return result;
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800180a:	697b      	ldr	r3, [r7, #20]
 800180c:	2b00      	cmp	r3, #0
 800180e:	d103      	bne.n	8001818 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8001810:	2320      	movs	r3, #32
 8001812:	e005      	b.n	8001820 <HAL_ADC_ConfigChannel+0x6bc>
 8001814:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8001818:	697b      	ldr	r3, [r7, #20]
 800181a:	fab3 f383 	clz	r3, r3
 800181e:	b2db      	uxtb	r3, r3
 8001820:	3301      	adds	r3, #1
 8001822:	f003 021f 	and.w	r2, r3, #31
 8001826:	4613      	mov	r3, r2
 8001828:	005b      	lsls	r3, r3, #1
 800182a:	4413      	add	r3, r2
 800182c:	3b1e      	subs	r3, #30
 800182e:	051b      	lsls	r3, r3, #20
 8001830:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001834:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8001836:	683a      	ldr	r2, [r7, #0]
 8001838:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800183a:	4619      	mov	r1, r3
 800183c:	f7ff f8cd 	bl	80009da <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	681a      	ldr	r2, [r3, #0]
 8001844:	4b3d      	ldr	r3, [pc, #244]	@ (800193c <HAL_ADC_ConfigChannel+0x7d8>)
 8001846:	4013      	ands	r3, r2
 8001848:	2b00      	cmp	r3, #0
 800184a:	d06c      	beq.n	8001926 <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800184c:	483c      	ldr	r0, [pc, #240]	@ (8001940 <HAL_ADC_ConfigChannel+0x7dc>)
 800184e:	f7ff f80f 	bl	8000870 <LL_ADC_GetCommonPathInternalCh>
 8001852:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	4a3a      	ldr	r2, [pc, #232]	@ (8001944 <HAL_ADC_ConfigChannel+0x7e0>)
 800185c:	4293      	cmp	r3, r2
 800185e:	d127      	bne.n	80018b0 <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001860:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001864:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001868:	2b00      	cmp	r3, #0
 800186a:	d121      	bne.n	80018b0 <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4a35      	ldr	r2, [pc, #212]	@ (8001948 <HAL_ADC_ConfigChannel+0x7e4>)
 8001872:	4293      	cmp	r3, r2
 8001874:	d157      	bne.n	8001926 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001876:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800187a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800187e:	4619      	mov	r1, r3
 8001880:	482f      	ldr	r0, [pc, #188]	@ (8001940 <HAL_ADC_ConfigChannel+0x7dc>)
 8001882:	f7fe ffe2 	bl	800084a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001886:	4b31      	ldr	r3, [pc, #196]	@ (800194c <HAL_ADC_ConfigChannel+0x7e8>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	099b      	lsrs	r3, r3, #6
 800188c:	4a30      	ldr	r2, [pc, #192]	@ (8001950 <HAL_ADC_ConfigChannel+0x7ec>)
 800188e:	fba2 2303 	umull	r2, r3, r2, r3
 8001892:	099b      	lsrs	r3, r3, #6
 8001894:	1c5a      	adds	r2, r3, #1
 8001896:	4613      	mov	r3, r2
 8001898:	005b      	lsls	r3, r3, #1
 800189a:	4413      	add	r3, r2
 800189c:	009b      	lsls	r3, r3, #2
 800189e:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80018a0:	e002      	b.n	80018a8 <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 80018a2:	68bb      	ldr	r3, [r7, #8]
 80018a4:	3b01      	subs	r3, #1
 80018a6:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80018a8:	68bb      	ldr	r3, [r7, #8]
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d1f9      	bne.n	80018a2 <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80018ae:	e03a      	b.n	8001926 <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	4a27      	ldr	r2, [pc, #156]	@ (8001954 <HAL_ADC_ConfigChannel+0x7f0>)
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d113      	bne.n	80018e2 <HAL_ADC_ConfigChannel+0x77e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80018ba:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80018be:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d10d      	bne.n	80018e2 <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	4a1f      	ldr	r2, [pc, #124]	@ (8001948 <HAL_ADC_ConfigChannel+0x7e4>)
 80018cc:	4293      	cmp	r3, r2
 80018ce:	d12a      	bne.n	8001926 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80018d0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80018d4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80018d8:	4619      	mov	r1, r3
 80018da:	4819      	ldr	r0, [pc, #100]	@ (8001940 <HAL_ADC_ConfigChannel+0x7dc>)
 80018dc:	f7fe ffb5 	bl	800084a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80018e0:	e021      	b.n	8001926 <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4a1c      	ldr	r2, [pc, #112]	@ (8001958 <HAL_ADC_ConfigChannel+0x7f4>)
 80018e8:	4293      	cmp	r3, r2
 80018ea:	d11c      	bne.n	8001926 <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80018ec:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80018f0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d116      	bne.n	8001926 <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4a12      	ldr	r2, [pc, #72]	@ (8001948 <HAL_ADC_ConfigChannel+0x7e4>)
 80018fe:	4293      	cmp	r3, r2
 8001900:	d111      	bne.n	8001926 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001902:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001906:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800190a:	4619      	mov	r1, r3
 800190c:	480c      	ldr	r0, [pc, #48]	@ (8001940 <HAL_ADC_ConfigChannel+0x7dc>)
 800190e:	f7fe ff9c 	bl	800084a <LL_ADC_SetCommonPathInternalCh>
 8001912:	e008      	b.n	8001926 <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001918:	f043 0220 	orr.w	r2, r3, #32
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001920:	2301      	movs	r3, #1
 8001922:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	2200      	movs	r2, #0
 800192a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 800192e:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8001932:	4618      	mov	r0, r3
 8001934:	37d8      	adds	r7, #216	@ 0xd8
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}
 800193a:	bf00      	nop
 800193c:	80080000 	.word	0x80080000
 8001940:	50040300 	.word	0x50040300
 8001944:	c7520000 	.word	0xc7520000
 8001948:	50040000 	.word	0x50040000
 800194c:	20000000 	.word	0x20000000
 8001950:	053e2d63 	.word	0x053e2d63
 8001954:	cb840000 	.word	0xcb840000
 8001958:	80000001 	.word	0x80000001

0800195c <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b088      	sub	sp, #32
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
 8001964:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8001966:	2300      	movs	r3, #0
 8001968:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	4618      	mov	r0, r3
 8001974:	f7ff f944 	bl	8000c00 <LL_ADC_REG_IsConversionOngoing>
 8001978:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	4618      	mov	r0, r3
 8001980:	f7ff f965 	bl	8000c4e <LL_ADC_INJ_IsConversionOngoing>
 8001984:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8001986:	693b      	ldr	r3, [r7, #16]
 8001988:	2b00      	cmp	r3, #0
 800198a:	d103      	bne.n	8001994 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	2b00      	cmp	r3, #0
 8001990:	f000 8098 	beq.w	8001ac4 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	68db      	ldr	r3, [r3, #12]
 800199a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d02a      	beq.n	80019f8 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	7e5b      	ldrb	r3, [r3, #25]
 80019a6:	2b01      	cmp	r3, #1
 80019a8:	d126      	bne.n	80019f8 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	7e1b      	ldrb	r3, [r3, #24]
 80019ae:	2b01      	cmp	r3, #1
 80019b0:	d122      	bne.n	80019f8 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 80019b2:	2301      	movs	r3, #1
 80019b4:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80019b6:	e014      	b.n	80019e2 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 80019b8:	69fb      	ldr	r3, [r7, #28]
 80019ba:	4a45      	ldr	r2, [pc, #276]	@ (8001ad0 <ADC_ConversionStop+0x174>)
 80019bc:	4293      	cmp	r3, r2
 80019be:	d90d      	bls.n	80019dc <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019c4:	f043 0210 	orr.w	r2, r3, #16
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80019d0:	f043 0201 	orr.w	r2, r3, #1
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 80019d8:	2301      	movs	r3, #1
 80019da:	e074      	b.n	8001ac6 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 80019dc:	69fb      	ldr	r3, [r7, #28]
 80019de:	3301      	adds	r3, #1
 80019e0:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80019ec:	2b40      	cmp	r3, #64	@ 0x40
 80019ee:	d1e3      	bne.n	80019b8 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	2240      	movs	r2, #64	@ 0x40
 80019f6:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 80019f8:	69bb      	ldr	r3, [r7, #24]
 80019fa:	2b02      	cmp	r3, #2
 80019fc:	d014      	beq.n	8001a28 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	4618      	mov	r0, r3
 8001a04:	f7ff f8fc 	bl	8000c00 <LL_ADC_REG_IsConversionOngoing>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d00c      	beq.n	8001a28 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4618      	mov	r0, r3
 8001a14:	f7ff f8b9 	bl	8000b8a <LL_ADC_IsDisableOngoing>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d104      	bne.n	8001a28 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	4618      	mov	r0, r3
 8001a24:	f7ff f8d8 	bl	8000bd8 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8001a28:	69bb      	ldr	r3, [r7, #24]
 8001a2a:	2b01      	cmp	r3, #1
 8001a2c:	d014      	beq.n	8001a58 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	4618      	mov	r0, r3
 8001a34:	f7ff f90b 	bl	8000c4e <LL_ADC_INJ_IsConversionOngoing>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d00c      	beq.n	8001a58 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4618      	mov	r0, r3
 8001a44:	f7ff f8a1 	bl	8000b8a <LL_ADC_IsDisableOngoing>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d104      	bne.n	8001a58 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	4618      	mov	r0, r3
 8001a54:	f7ff f8e7 	bl	8000c26 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8001a58:	69bb      	ldr	r3, [r7, #24]
 8001a5a:	2b02      	cmp	r3, #2
 8001a5c:	d005      	beq.n	8001a6a <ADC_ConversionStop+0x10e>
 8001a5e:	69bb      	ldr	r3, [r7, #24]
 8001a60:	2b03      	cmp	r3, #3
 8001a62:	d105      	bne.n	8001a70 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8001a64:	230c      	movs	r3, #12
 8001a66:	617b      	str	r3, [r7, #20]
        break;
 8001a68:	e005      	b.n	8001a76 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8001a6a:	2308      	movs	r3, #8
 8001a6c:	617b      	str	r3, [r7, #20]
        break;
 8001a6e:	e002      	b.n	8001a76 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8001a70:	2304      	movs	r3, #4
 8001a72:	617b      	str	r3, [r7, #20]
        break;
 8001a74:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8001a76:	f7fe fec9 	bl	800080c <HAL_GetTick>
 8001a7a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8001a7c:	e01b      	b.n	8001ab6 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8001a7e:	f7fe fec5 	bl	800080c <HAL_GetTick>
 8001a82:	4602      	mov	r2, r0
 8001a84:	68bb      	ldr	r3, [r7, #8]
 8001a86:	1ad3      	subs	r3, r2, r3
 8001a88:	2b05      	cmp	r3, #5
 8001a8a:	d914      	bls.n	8001ab6 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	689a      	ldr	r2, [r3, #8]
 8001a92:	697b      	ldr	r3, [r7, #20]
 8001a94:	4013      	ands	r3, r2
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d00d      	beq.n	8001ab6 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a9e:	f043 0210 	orr.w	r2, r3, #16
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001aaa:	f043 0201 	orr.w	r2, r3, #1
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	e007      	b.n	8001ac6 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	689a      	ldr	r2, [r3, #8]
 8001abc:	697b      	ldr	r3, [r7, #20]
 8001abe:	4013      	ands	r3, r2
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d1dc      	bne.n	8001a7e <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8001ac4:	2300      	movs	r3, #0
}
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	3720      	adds	r7, #32
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}
 8001ace:	bf00      	nop
 8001ad0:	a33fffff 	.word	0xa33fffff

08001ad4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b084      	sub	sp, #16
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8001adc:	2300      	movs	r3, #0
 8001ade:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	f7ff f83d 	bl	8000b64 <LL_ADC_IsEnabled>
 8001aea:	4603      	mov	r3, r0
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d169      	bne.n	8001bc4 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	689a      	ldr	r2, [r3, #8]
 8001af6:	4b36      	ldr	r3, [pc, #216]	@ (8001bd0 <ADC_Enable+0xfc>)
 8001af8:	4013      	ands	r3, r2
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d00d      	beq.n	8001b1a <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b02:	f043 0210 	orr.w	r2, r3, #16
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b0e:	f043 0201 	orr.w	r2, r3, #1
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8001b16:	2301      	movs	r3, #1
 8001b18:	e055      	b.n	8001bc6 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f7fe fff8 	bl	8000b14 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8001b24:	482b      	ldr	r0, [pc, #172]	@ (8001bd4 <ADC_Enable+0x100>)
 8001b26:	f7fe fea3 	bl	8000870 <LL_ADC_GetCommonPathInternalCh>
 8001b2a:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8001b2c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d013      	beq.n	8001b5c <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001b34:	4b28      	ldr	r3, [pc, #160]	@ (8001bd8 <ADC_Enable+0x104>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	099b      	lsrs	r3, r3, #6
 8001b3a:	4a28      	ldr	r2, [pc, #160]	@ (8001bdc <ADC_Enable+0x108>)
 8001b3c:	fba2 2303 	umull	r2, r3, r2, r3
 8001b40:	099b      	lsrs	r3, r3, #6
 8001b42:	1c5a      	adds	r2, r3, #1
 8001b44:	4613      	mov	r3, r2
 8001b46:	005b      	lsls	r3, r3, #1
 8001b48:	4413      	add	r3, r2
 8001b4a:	009b      	lsls	r3, r3, #2
 8001b4c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8001b4e:	e002      	b.n	8001b56 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8001b50:	68bb      	ldr	r3, [r7, #8]
 8001b52:	3b01      	subs	r3, #1
 8001b54:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8001b56:	68bb      	ldr	r3, [r7, #8]
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d1f9      	bne.n	8001b50 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8001b5c:	f7fe fe56 	bl	800080c <HAL_GetTick>
 8001b60:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001b62:	e028      	b.n	8001bb6 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4618      	mov	r0, r3
 8001b6a:	f7fe fffb 	bl	8000b64 <LL_ADC_IsEnabled>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d104      	bne.n	8001b7e <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f7fe ffcb 	bl	8000b14 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001b7e:	f7fe fe45 	bl	800080c <HAL_GetTick>
 8001b82:	4602      	mov	r2, r0
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	1ad3      	subs	r3, r2, r3
 8001b88:	2b02      	cmp	r3, #2
 8001b8a:	d914      	bls.n	8001bb6 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f003 0301 	and.w	r3, r3, #1
 8001b96:	2b01      	cmp	r3, #1
 8001b98:	d00d      	beq.n	8001bb6 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b9e:	f043 0210 	orr.w	r2, r3, #16
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001baa:	f043 0201 	orr.w	r2, r3, #1
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	e007      	b.n	8001bc6 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f003 0301 	and.w	r3, r3, #1
 8001bc0:	2b01      	cmp	r3, #1
 8001bc2:	d1cf      	bne.n	8001b64 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001bc4:	2300      	movs	r3, #0
}
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	3710      	adds	r7, #16
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}
 8001bce:	bf00      	nop
 8001bd0:	8000003f 	.word	0x8000003f
 8001bd4:	50040300 	.word	0x50040300
 8001bd8:	20000000 	.word	0x20000000
 8001bdc:	053e2d63 	.word	0x053e2d63

08001be0 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b084      	sub	sp, #16
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4618      	mov	r0, r3
 8001bee:	f7fe ffcc 	bl	8000b8a <LL_ADC_IsDisableOngoing>
 8001bf2:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	f7fe ffb3 	bl	8000b64 <LL_ADC_IsEnabled>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d047      	beq.n	8001c94 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d144      	bne.n	8001c94 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	689b      	ldr	r3, [r3, #8]
 8001c10:	f003 030d 	and.w	r3, r3, #13
 8001c14:	2b01      	cmp	r3, #1
 8001c16:	d10c      	bne.n	8001c32 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	f7fe ff8d 	bl	8000b3c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	2203      	movs	r2, #3
 8001c28:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001c2a:	f7fe fdef 	bl	800080c <HAL_GetTick>
 8001c2e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8001c30:	e029      	b.n	8001c86 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c36:	f043 0210 	orr.w	r2, r3, #16
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	659a      	str	r2, [r3, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c42:	f043 0201 	orr.w	r2, r3, #1
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	65da      	str	r2, [r3, #92]	@ 0x5c
      return HAL_ERROR;
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	e023      	b.n	8001c96 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001c4e:	f7fe fddd 	bl	800080c <HAL_GetTick>
 8001c52:	4602      	mov	r2, r0
 8001c54:	68bb      	ldr	r3, [r7, #8]
 8001c56:	1ad3      	subs	r3, r2, r3
 8001c58:	2b02      	cmp	r3, #2
 8001c5a:	d914      	bls.n	8001c86 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	689b      	ldr	r3, [r3, #8]
 8001c62:	f003 0301 	and.w	r3, r3, #1
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d00d      	beq.n	8001c86 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c6e:	f043 0210 	orr.w	r2, r3, #16
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c7a:	f043 0201 	orr.w	r2, r3, #1
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8001c82:	2301      	movs	r3, #1
 8001c84:	e007      	b.n	8001c96 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	689b      	ldr	r3, [r3, #8]
 8001c8c:	f003 0301 	and.w	r3, r3, #1
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d1dc      	bne.n	8001c4e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001c94:	2300      	movs	r3, #0
}
 8001c96:	4618      	mov	r0, r3
 8001c98:	3710      	adds	r7, #16
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}
	...

08001ca0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b085      	sub	sp, #20
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	f003 0307 	and.w	r3, r3, #7
 8001cae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cb0:	4b0c      	ldr	r3, [pc, #48]	@ (8001ce4 <__NVIC_SetPriorityGrouping+0x44>)
 8001cb2:	68db      	ldr	r3, [r3, #12]
 8001cb4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cb6:	68ba      	ldr	r2, [r7, #8]
 8001cb8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001cbc:	4013      	ands	r3, r2
 8001cbe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001cc4:	68bb      	ldr	r3, [r7, #8]
 8001cc6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001cc8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001ccc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001cd0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cd2:	4a04      	ldr	r2, [pc, #16]	@ (8001ce4 <__NVIC_SetPriorityGrouping+0x44>)
 8001cd4:	68bb      	ldr	r3, [r7, #8]
 8001cd6:	60d3      	str	r3, [r2, #12]
}
 8001cd8:	bf00      	nop
 8001cda:	3714      	adds	r7, #20
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce2:	4770      	bx	lr
 8001ce4:	e000ed00 	.word	0xe000ed00

08001ce8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001cec:	4b04      	ldr	r3, [pc, #16]	@ (8001d00 <__NVIC_GetPriorityGrouping+0x18>)
 8001cee:	68db      	ldr	r3, [r3, #12]
 8001cf0:	0a1b      	lsrs	r3, r3, #8
 8001cf2:	f003 0307 	and.w	r3, r3, #7
}
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfe:	4770      	bx	lr
 8001d00:	e000ed00 	.word	0xe000ed00

08001d04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d04:	b480      	push	{r7}
 8001d06:	b083      	sub	sp, #12
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	6039      	str	r1, [r7, #0]
 8001d0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	db0a      	blt.n	8001d2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	b2da      	uxtb	r2, r3
 8001d1c:	490c      	ldr	r1, [pc, #48]	@ (8001d50 <__NVIC_SetPriority+0x4c>)
 8001d1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d22:	0112      	lsls	r2, r2, #4
 8001d24:	b2d2      	uxtb	r2, r2
 8001d26:	440b      	add	r3, r1
 8001d28:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d2c:	e00a      	b.n	8001d44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	b2da      	uxtb	r2, r3
 8001d32:	4908      	ldr	r1, [pc, #32]	@ (8001d54 <__NVIC_SetPriority+0x50>)
 8001d34:	79fb      	ldrb	r3, [r7, #7]
 8001d36:	f003 030f 	and.w	r3, r3, #15
 8001d3a:	3b04      	subs	r3, #4
 8001d3c:	0112      	lsls	r2, r2, #4
 8001d3e:	b2d2      	uxtb	r2, r2
 8001d40:	440b      	add	r3, r1
 8001d42:	761a      	strb	r2, [r3, #24]
}
 8001d44:	bf00      	nop
 8001d46:	370c      	adds	r7, #12
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4e:	4770      	bx	lr
 8001d50:	e000e100 	.word	0xe000e100
 8001d54:	e000ed00 	.word	0xe000ed00

08001d58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	b089      	sub	sp, #36	@ 0x24
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	60f8      	str	r0, [r7, #12]
 8001d60:	60b9      	str	r1, [r7, #8]
 8001d62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	f003 0307 	and.w	r3, r3, #7
 8001d6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d6c:	69fb      	ldr	r3, [r7, #28]
 8001d6e:	f1c3 0307 	rsb	r3, r3, #7
 8001d72:	2b04      	cmp	r3, #4
 8001d74:	bf28      	it	cs
 8001d76:	2304      	movcs	r3, #4
 8001d78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d7a:	69fb      	ldr	r3, [r7, #28]
 8001d7c:	3304      	adds	r3, #4
 8001d7e:	2b06      	cmp	r3, #6
 8001d80:	d902      	bls.n	8001d88 <NVIC_EncodePriority+0x30>
 8001d82:	69fb      	ldr	r3, [r7, #28]
 8001d84:	3b03      	subs	r3, #3
 8001d86:	e000      	b.n	8001d8a <NVIC_EncodePriority+0x32>
 8001d88:	2300      	movs	r3, #0
 8001d8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d8c:	f04f 32ff 	mov.w	r2, #4294967295
 8001d90:	69bb      	ldr	r3, [r7, #24]
 8001d92:	fa02 f303 	lsl.w	r3, r2, r3
 8001d96:	43da      	mvns	r2, r3
 8001d98:	68bb      	ldr	r3, [r7, #8]
 8001d9a:	401a      	ands	r2, r3
 8001d9c:	697b      	ldr	r3, [r7, #20]
 8001d9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001da0:	f04f 31ff 	mov.w	r1, #4294967295
 8001da4:	697b      	ldr	r3, [r7, #20]
 8001da6:	fa01 f303 	lsl.w	r3, r1, r3
 8001daa:	43d9      	mvns	r1, r3
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001db0:	4313      	orrs	r3, r2
         );
}
 8001db2:	4618      	mov	r0, r3
 8001db4:	3724      	adds	r7, #36	@ 0x24
 8001db6:	46bd      	mov	sp, r7
 8001db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbc:	4770      	bx	lr
	...

08001dc0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b082      	sub	sp, #8
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	3b01      	subs	r3, #1
 8001dcc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001dd0:	d301      	bcc.n	8001dd6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	e00f      	b.n	8001df6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001dd6:	4a0a      	ldr	r2, [pc, #40]	@ (8001e00 <SysTick_Config+0x40>)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	3b01      	subs	r3, #1
 8001ddc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001dde:	210f      	movs	r1, #15
 8001de0:	f04f 30ff 	mov.w	r0, #4294967295
 8001de4:	f7ff ff8e 	bl	8001d04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001de8:	4b05      	ldr	r3, [pc, #20]	@ (8001e00 <SysTick_Config+0x40>)
 8001dea:	2200      	movs	r2, #0
 8001dec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001dee:	4b04      	ldr	r3, [pc, #16]	@ (8001e00 <SysTick_Config+0x40>)
 8001df0:	2207      	movs	r2, #7
 8001df2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001df4:	2300      	movs	r3, #0
}
 8001df6:	4618      	mov	r0, r3
 8001df8:	3708      	adds	r7, #8
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}
 8001dfe:	bf00      	nop
 8001e00:	e000e010 	.word	0xe000e010

08001e04 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b082      	sub	sp, #8
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e0c:	6878      	ldr	r0, [r7, #4]
 8001e0e:	f7ff ff47 	bl	8001ca0 <__NVIC_SetPriorityGrouping>
}
 8001e12:	bf00      	nop
 8001e14:	3708      	adds	r7, #8
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}

08001e1a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e1a:	b580      	push	{r7, lr}
 8001e1c:	b086      	sub	sp, #24
 8001e1e:	af00      	add	r7, sp, #0
 8001e20:	4603      	mov	r3, r0
 8001e22:	60b9      	str	r1, [r7, #8]
 8001e24:	607a      	str	r2, [r7, #4]
 8001e26:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001e2c:	f7ff ff5c 	bl	8001ce8 <__NVIC_GetPriorityGrouping>
 8001e30:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e32:	687a      	ldr	r2, [r7, #4]
 8001e34:	68b9      	ldr	r1, [r7, #8]
 8001e36:	6978      	ldr	r0, [r7, #20]
 8001e38:	f7ff ff8e 	bl	8001d58 <NVIC_EncodePriority>
 8001e3c:	4602      	mov	r2, r0
 8001e3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e42:	4611      	mov	r1, r2
 8001e44:	4618      	mov	r0, r3
 8001e46:	f7ff ff5d 	bl	8001d04 <__NVIC_SetPriority>
}
 8001e4a:	bf00      	nop
 8001e4c:	3718      	adds	r7, #24
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}

08001e52 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e52:	b580      	push	{r7, lr}
 8001e54:	b082      	sub	sp, #8
 8001e56:	af00      	add	r7, sp, #0
 8001e58:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e5a:	6878      	ldr	r0, [r7, #4]
 8001e5c:	f7ff ffb0 	bl	8001dc0 <SysTick_Config>
 8001e60:	4603      	mov	r3, r0
}
 8001e62:	4618      	mov	r0, r3
 8001e64:	3708      	adds	r7, #8
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}
	...

08001e6c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b087      	sub	sp, #28
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
 8001e74:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e76:	2300      	movs	r3, #0
 8001e78:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e7a:	e166      	b.n	800214a <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	681a      	ldr	r2, [r3, #0]
 8001e80:	2101      	movs	r1, #1
 8001e82:	697b      	ldr	r3, [r7, #20]
 8001e84:	fa01 f303 	lsl.w	r3, r1, r3
 8001e88:	4013      	ands	r3, r2
 8001e8a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	f000 8158 	beq.w	8002144 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	f003 0303 	and.w	r3, r3, #3
 8001e9c:	2b01      	cmp	r3, #1
 8001e9e:	d005      	beq.n	8001eac <HAL_GPIO_Init+0x40>
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	f003 0303 	and.w	r3, r3, #3
 8001ea8:	2b02      	cmp	r3, #2
 8001eaa:	d130      	bne.n	8001f0e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	689b      	ldr	r3, [r3, #8]
 8001eb0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001eb2:	697b      	ldr	r3, [r7, #20]
 8001eb4:	005b      	lsls	r3, r3, #1
 8001eb6:	2203      	movs	r2, #3
 8001eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ebc:	43db      	mvns	r3, r3
 8001ebe:	693a      	ldr	r2, [r7, #16]
 8001ec0:	4013      	ands	r3, r2
 8001ec2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	68da      	ldr	r2, [r3, #12]
 8001ec8:	697b      	ldr	r3, [r7, #20]
 8001eca:	005b      	lsls	r3, r3, #1
 8001ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed0:	693a      	ldr	r2, [r7, #16]
 8001ed2:	4313      	orrs	r3, r2
 8001ed4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	693a      	ldr	r2, [r7, #16]
 8001eda:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001ee2:	2201      	movs	r2, #1
 8001ee4:	697b      	ldr	r3, [r7, #20]
 8001ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eea:	43db      	mvns	r3, r3
 8001eec:	693a      	ldr	r2, [r7, #16]
 8001eee:	4013      	ands	r3, r2
 8001ef0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	091b      	lsrs	r3, r3, #4
 8001ef8:	f003 0201 	and.w	r2, r3, #1
 8001efc:	697b      	ldr	r3, [r7, #20]
 8001efe:	fa02 f303 	lsl.w	r3, r2, r3
 8001f02:	693a      	ldr	r2, [r7, #16]
 8001f04:	4313      	orrs	r3, r2
 8001f06:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	693a      	ldr	r2, [r7, #16]
 8001f0c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	685b      	ldr	r3, [r3, #4]
 8001f12:	f003 0303 	and.w	r3, r3, #3
 8001f16:	2b03      	cmp	r3, #3
 8001f18:	d017      	beq.n	8001f4a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	68db      	ldr	r3, [r3, #12]
 8001f1e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001f20:	697b      	ldr	r3, [r7, #20]
 8001f22:	005b      	lsls	r3, r3, #1
 8001f24:	2203      	movs	r2, #3
 8001f26:	fa02 f303 	lsl.w	r3, r2, r3
 8001f2a:	43db      	mvns	r3, r3
 8001f2c:	693a      	ldr	r2, [r7, #16]
 8001f2e:	4013      	ands	r3, r2
 8001f30:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	689a      	ldr	r2, [r3, #8]
 8001f36:	697b      	ldr	r3, [r7, #20]
 8001f38:	005b      	lsls	r3, r3, #1
 8001f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f3e:	693a      	ldr	r2, [r7, #16]
 8001f40:	4313      	orrs	r3, r2
 8001f42:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	693a      	ldr	r2, [r7, #16]
 8001f48:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	685b      	ldr	r3, [r3, #4]
 8001f4e:	f003 0303 	and.w	r3, r3, #3
 8001f52:	2b02      	cmp	r3, #2
 8001f54:	d123      	bne.n	8001f9e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001f56:	697b      	ldr	r3, [r7, #20]
 8001f58:	08da      	lsrs	r2, r3, #3
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	3208      	adds	r2, #8
 8001f5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f62:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001f64:	697b      	ldr	r3, [r7, #20]
 8001f66:	f003 0307 	and.w	r3, r3, #7
 8001f6a:	009b      	lsls	r3, r3, #2
 8001f6c:	220f      	movs	r2, #15
 8001f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f72:	43db      	mvns	r3, r3
 8001f74:	693a      	ldr	r2, [r7, #16]
 8001f76:	4013      	ands	r3, r2
 8001f78:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	691a      	ldr	r2, [r3, #16]
 8001f7e:	697b      	ldr	r3, [r7, #20]
 8001f80:	f003 0307 	and.w	r3, r3, #7
 8001f84:	009b      	lsls	r3, r3, #2
 8001f86:	fa02 f303 	lsl.w	r3, r2, r3
 8001f8a:	693a      	ldr	r2, [r7, #16]
 8001f8c:	4313      	orrs	r3, r2
 8001f8e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001f90:	697b      	ldr	r3, [r7, #20]
 8001f92:	08da      	lsrs	r2, r3, #3
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	3208      	adds	r2, #8
 8001f98:	6939      	ldr	r1, [r7, #16]
 8001f9a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001fa4:	697b      	ldr	r3, [r7, #20]
 8001fa6:	005b      	lsls	r3, r3, #1
 8001fa8:	2203      	movs	r2, #3
 8001faa:	fa02 f303 	lsl.w	r3, r2, r3
 8001fae:	43db      	mvns	r3, r3
 8001fb0:	693a      	ldr	r2, [r7, #16]
 8001fb2:	4013      	ands	r3, r2
 8001fb4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	f003 0203 	and.w	r2, r3, #3
 8001fbe:	697b      	ldr	r3, [r7, #20]
 8001fc0:	005b      	lsls	r3, r3, #1
 8001fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc6:	693a      	ldr	r2, [r7, #16]
 8001fc8:	4313      	orrs	r3, r2
 8001fca:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	693a      	ldr	r2, [r7, #16]
 8001fd0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	f000 80b2 	beq.w	8002144 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fe0:	4b61      	ldr	r3, [pc, #388]	@ (8002168 <HAL_GPIO_Init+0x2fc>)
 8001fe2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001fe4:	4a60      	ldr	r2, [pc, #384]	@ (8002168 <HAL_GPIO_Init+0x2fc>)
 8001fe6:	f043 0301 	orr.w	r3, r3, #1
 8001fea:	6613      	str	r3, [r2, #96]	@ 0x60
 8001fec:	4b5e      	ldr	r3, [pc, #376]	@ (8002168 <HAL_GPIO_Init+0x2fc>)
 8001fee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ff0:	f003 0301 	and.w	r3, r3, #1
 8001ff4:	60bb      	str	r3, [r7, #8]
 8001ff6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001ff8:	4a5c      	ldr	r2, [pc, #368]	@ (800216c <HAL_GPIO_Init+0x300>)
 8001ffa:	697b      	ldr	r3, [r7, #20]
 8001ffc:	089b      	lsrs	r3, r3, #2
 8001ffe:	3302      	adds	r3, #2
 8002000:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002004:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002006:	697b      	ldr	r3, [r7, #20]
 8002008:	f003 0303 	and.w	r3, r3, #3
 800200c:	009b      	lsls	r3, r3, #2
 800200e:	220f      	movs	r2, #15
 8002010:	fa02 f303 	lsl.w	r3, r2, r3
 8002014:	43db      	mvns	r3, r3
 8002016:	693a      	ldr	r2, [r7, #16]
 8002018:	4013      	ands	r3, r2
 800201a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002022:	d02b      	beq.n	800207c <HAL_GPIO_Init+0x210>
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	4a52      	ldr	r2, [pc, #328]	@ (8002170 <HAL_GPIO_Init+0x304>)
 8002028:	4293      	cmp	r3, r2
 800202a:	d025      	beq.n	8002078 <HAL_GPIO_Init+0x20c>
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	4a51      	ldr	r2, [pc, #324]	@ (8002174 <HAL_GPIO_Init+0x308>)
 8002030:	4293      	cmp	r3, r2
 8002032:	d01f      	beq.n	8002074 <HAL_GPIO_Init+0x208>
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	4a50      	ldr	r2, [pc, #320]	@ (8002178 <HAL_GPIO_Init+0x30c>)
 8002038:	4293      	cmp	r3, r2
 800203a:	d019      	beq.n	8002070 <HAL_GPIO_Init+0x204>
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	4a4f      	ldr	r2, [pc, #316]	@ (800217c <HAL_GPIO_Init+0x310>)
 8002040:	4293      	cmp	r3, r2
 8002042:	d013      	beq.n	800206c <HAL_GPIO_Init+0x200>
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	4a4e      	ldr	r2, [pc, #312]	@ (8002180 <HAL_GPIO_Init+0x314>)
 8002048:	4293      	cmp	r3, r2
 800204a:	d00d      	beq.n	8002068 <HAL_GPIO_Init+0x1fc>
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	4a4d      	ldr	r2, [pc, #308]	@ (8002184 <HAL_GPIO_Init+0x318>)
 8002050:	4293      	cmp	r3, r2
 8002052:	d007      	beq.n	8002064 <HAL_GPIO_Init+0x1f8>
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	4a4c      	ldr	r2, [pc, #304]	@ (8002188 <HAL_GPIO_Init+0x31c>)
 8002058:	4293      	cmp	r3, r2
 800205a:	d101      	bne.n	8002060 <HAL_GPIO_Init+0x1f4>
 800205c:	2307      	movs	r3, #7
 800205e:	e00e      	b.n	800207e <HAL_GPIO_Init+0x212>
 8002060:	2308      	movs	r3, #8
 8002062:	e00c      	b.n	800207e <HAL_GPIO_Init+0x212>
 8002064:	2306      	movs	r3, #6
 8002066:	e00a      	b.n	800207e <HAL_GPIO_Init+0x212>
 8002068:	2305      	movs	r3, #5
 800206a:	e008      	b.n	800207e <HAL_GPIO_Init+0x212>
 800206c:	2304      	movs	r3, #4
 800206e:	e006      	b.n	800207e <HAL_GPIO_Init+0x212>
 8002070:	2303      	movs	r3, #3
 8002072:	e004      	b.n	800207e <HAL_GPIO_Init+0x212>
 8002074:	2302      	movs	r3, #2
 8002076:	e002      	b.n	800207e <HAL_GPIO_Init+0x212>
 8002078:	2301      	movs	r3, #1
 800207a:	e000      	b.n	800207e <HAL_GPIO_Init+0x212>
 800207c:	2300      	movs	r3, #0
 800207e:	697a      	ldr	r2, [r7, #20]
 8002080:	f002 0203 	and.w	r2, r2, #3
 8002084:	0092      	lsls	r2, r2, #2
 8002086:	4093      	lsls	r3, r2
 8002088:	693a      	ldr	r2, [r7, #16]
 800208a:	4313      	orrs	r3, r2
 800208c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800208e:	4937      	ldr	r1, [pc, #220]	@ (800216c <HAL_GPIO_Init+0x300>)
 8002090:	697b      	ldr	r3, [r7, #20]
 8002092:	089b      	lsrs	r3, r3, #2
 8002094:	3302      	adds	r3, #2
 8002096:	693a      	ldr	r2, [r7, #16]
 8002098:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800209c:	4b3b      	ldr	r3, [pc, #236]	@ (800218c <HAL_GPIO_Init+0x320>)
 800209e:	689b      	ldr	r3, [r3, #8]
 80020a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	43db      	mvns	r3, r3
 80020a6:	693a      	ldr	r2, [r7, #16]
 80020a8:	4013      	ands	r3, r2
 80020aa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d003      	beq.n	80020c0 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80020b8:	693a      	ldr	r2, [r7, #16]
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	4313      	orrs	r3, r2
 80020be:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80020c0:	4a32      	ldr	r2, [pc, #200]	@ (800218c <HAL_GPIO_Init+0x320>)
 80020c2:	693b      	ldr	r3, [r7, #16]
 80020c4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80020c6:	4b31      	ldr	r3, [pc, #196]	@ (800218c <HAL_GPIO_Init+0x320>)
 80020c8:	68db      	ldr	r3, [r3, #12]
 80020ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	43db      	mvns	r3, r3
 80020d0:	693a      	ldr	r2, [r7, #16]
 80020d2:	4013      	ands	r3, r2
 80020d4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d003      	beq.n	80020ea <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80020e2:	693a      	ldr	r2, [r7, #16]
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	4313      	orrs	r3, r2
 80020e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80020ea:	4a28      	ldr	r2, [pc, #160]	@ (800218c <HAL_GPIO_Init+0x320>)
 80020ec:	693b      	ldr	r3, [r7, #16]
 80020ee:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80020f0:	4b26      	ldr	r3, [pc, #152]	@ (800218c <HAL_GPIO_Init+0x320>)
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	43db      	mvns	r3, r3
 80020fa:	693a      	ldr	r2, [r7, #16]
 80020fc:	4013      	ands	r3, r2
 80020fe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002108:	2b00      	cmp	r3, #0
 800210a:	d003      	beq.n	8002114 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 800210c:	693a      	ldr	r2, [r7, #16]
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	4313      	orrs	r3, r2
 8002112:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002114:	4a1d      	ldr	r2, [pc, #116]	@ (800218c <HAL_GPIO_Init+0x320>)
 8002116:	693b      	ldr	r3, [r7, #16]
 8002118:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800211a:	4b1c      	ldr	r3, [pc, #112]	@ (800218c <HAL_GPIO_Init+0x320>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	43db      	mvns	r3, r3
 8002124:	693a      	ldr	r2, [r7, #16]
 8002126:	4013      	ands	r3, r2
 8002128:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002132:	2b00      	cmp	r3, #0
 8002134:	d003      	beq.n	800213e <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8002136:	693a      	ldr	r2, [r7, #16]
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	4313      	orrs	r3, r2
 800213c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800213e:	4a13      	ldr	r2, [pc, #76]	@ (800218c <HAL_GPIO_Init+0x320>)
 8002140:	693b      	ldr	r3, [r7, #16]
 8002142:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002144:	697b      	ldr	r3, [r7, #20]
 8002146:	3301      	adds	r3, #1
 8002148:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	681a      	ldr	r2, [r3, #0]
 800214e:	697b      	ldr	r3, [r7, #20]
 8002150:	fa22 f303 	lsr.w	r3, r2, r3
 8002154:	2b00      	cmp	r3, #0
 8002156:	f47f ae91 	bne.w	8001e7c <HAL_GPIO_Init+0x10>
  }
}
 800215a:	bf00      	nop
 800215c:	bf00      	nop
 800215e:	371c      	adds	r7, #28
 8002160:	46bd      	mov	sp, r7
 8002162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002166:	4770      	bx	lr
 8002168:	40021000 	.word	0x40021000
 800216c:	40010000 	.word	0x40010000
 8002170:	48000400 	.word	0x48000400
 8002174:	48000800 	.word	0x48000800
 8002178:	48000c00 	.word	0x48000c00
 800217c:	48001000 	.word	0x48001000
 8002180:	48001400 	.word	0x48001400
 8002184:	48001800 	.word	0x48001800
 8002188:	48001c00 	.word	0x48001c00
 800218c:	40010400 	.word	0x40010400

08002190 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002190:	b480      	push	{r7}
 8002192:	b085      	sub	sp, #20
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
 8002198:	460b      	mov	r3, r1
 800219a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	691a      	ldr	r2, [r3, #16]
 80021a0:	887b      	ldrh	r3, [r7, #2]
 80021a2:	4013      	ands	r3, r2
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d002      	beq.n	80021ae <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80021a8:	2301      	movs	r3, #1
 80021aa:	73fb      	strb	r3, [r7, #15]
 80021ac:	e001      	b.n	80021b2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80021ae:	2300      	movs	r3, #0
 80021b0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80021b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80021b4:	4618      	mov	r0, r3
 80021b6:	3714      	adds	r7, #20
 80021b8:	46bd      	mov	sp, r7
 80021ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021be:	4770      	bx	lr

080021c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021c0:	b480      	push	{r7}
 80021c2:	b083      	sub	sp, #12
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
 80021c8:	460b      	mov	r3, r1
 80021ca:	807b      	strh	r3, [r7, #2]
 80021cc:	4613      	mov	r3, r2
 80021ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80021d0:	787b      	ldrb	r3, [r7, #1]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d003      	beq.n	80021de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80021d6:	887a      	ldrh	r2, [r7, #2]
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80021dc:	e002      	b.n	80021e4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80021de:	887a      	ldrh	r2, [r7, #2]
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80021e4:	bf00      	nop
 80021e6:	370c      	adds	r7, #12
 80021e8:	46bd      	mov	sp, r7
 80021ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ee:	4770      	bx	lr

080021f0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80021f0:	b480      	push	{r7}
 80021f2:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80021f4:	4b0d      	ldr	r3, [pc, #52]	@ (800222c <HAL_PWREx_GetVoltageRange+0x3c>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80021fc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002200:	d102      	bne.n	8002208 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8002202:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002206:	e00b      	b.n	8002220 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8002208:	4b08      	ldr	r3, [pc, #32]	@ (800222c <HAL_PWREx_GetVoltageRange+0x3c>)
 800220a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800220e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002212:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002216:	d102      	bne.n	800221e <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8002218:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800221c:	e000      	b.n	8002220 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 800221e:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8002220:	4618      	mov	r0, r3
 8002222:	46bd      	mov	sp, r7
 8002224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002228:	4770      	bx	lr
 800222a:	bf00      	nop
 800222c:	40007000 	.word	0x40007000

08002230 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002230:	b480      	push	{r7}
 8002232:	b085      	sub	sp, #20
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d141      	bne.n	80022c2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800223e:	4b4b      	ldr	r3, [pc, #300]	@ (800236c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002246:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800224a:	d131      	bne.n	80022b0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800224c:	4b47      	ldr	r3, [pc, #284]	@ (800236c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800224e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002252:	4a46      	ldr	r2, [pc, #280]	@ (800236c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002254:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002258:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800225c:	4b43      	ldr	r3, [pc, #268]	@ (800236c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002264:	4a41      	ldr	r2, [pc, #260]	@ (800236c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002266:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800226a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 800226c:	4b40      	ldr	r3, [pc, #256]	@ (8002370 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	2232      	movs	r2, #50	@ 0x32
 8002272:	fb02 f303 	mul.w	r3, r2, r3
 8002276:	4a3f      	ldr	r2, [pc, #252]	@ (8002374 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002278:	fba2 2303 	umull	r2, r3, r2, r3
 800227c:	0c9b      	lsrs	r3, r3, #18
 800227e:	3301      	adds	r3, #1
 8002280:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002282:	e002      	b.n	800228a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	3b01      	subs	r3, #1
 8002288:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800228a:	4b38      	ldr	r3, [pc, #224]	@ (800236c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800228c:	695b      	ldr	r3, [r3, #20]
 800228e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002292:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002296:	d102      	bne.n	800229e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	2b00      	cmp	r3, #0
 800229c:	d1f2      	bne.n	8002284 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800229e:	4b33      	ldr	r3, [pc, #204]	@ (800236c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022a0:	695b      	ldr	r3, [r3, #20]
 80022a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80022a6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80022aa:	d158      	bne.n	800235e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80022ac:	2303      	movs	r3, #3
 80022ae:	e057      	b.n	8002360 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80022b0:	4b2e      	ldr	r3, [pc, #184]	@ (800236c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80022b6:	4a2d      	ldr	r2, [pc, #180]	@ (800236c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022b8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80022bc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80022c0:	e04d      	b.n	800235e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80022c8:	d141      	bne.n	800234e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80022ca:	4b28      	ldr	r3, [pc, #160]	@ (800236c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80022d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80022d6:	d131      	bne.n	800233c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80022d8:	4b24      	ldr	r3, [pc, #144]	@ (800236c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022da:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80022de:	4a23      	ldr	r2, [pc, #140]	@ (800236c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80022e4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80022e8:	4b20      	ldr	r3, [pc, #128]	@ (800236c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80022f0:	4a1e      	ldr	r2, [pc, #120]	@ (800236c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022f2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80022f6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80022f8:	4b1d      	ldr	r3, [pc, #116]	@ (8002370 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	2232      	movs	r2, #50	@ 0x32
 80022fe:	fb02 f303 	mul.w	r3, r2, r3
 8002302:	4a1c      	ldr	r2, [pc, #112]	@ (8002374 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002304:	fba2 2303 	umull	r2, r3, r2, r3
 8002308:	0c9b      	lsrs	r3, r3, #18
 800230a:	3301      	adds	r3, #1
 800230c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800230e:	e002      	b.n	8002316 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	3b01      	subs	r3, #1
 8002314:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002316:	4b15      	ldr	r3, [pc, #84]	@ (800236c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002318:	695b      	ldr	r3, [r3, #20]
 800231a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800231e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002322:	d102      	bne.n	800232a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d1f2      	bne.n	8002310 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800232a:	4b10      	ldr	r3, [pc, #64]	@ (800236c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800232c:	695b      	ldr	r3, [r3, #20]
 800232e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002332:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002336:	d112      	bne.n	800235e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002338:	2303      	movs	r3, #3
 800233a:	e011      	b.n	8002360 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800233c:	4b0b      	ldr	r3, [pc, #44]	@ (800236c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800233e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002342:	4a0a      	ldr	r2, [pc, #40]	@ (800236c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002344:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002348:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800234c:	e007      	b.n	800235e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800234e:	4b07      	ldr	r3, [pc, #28]	@ (800236c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002356:	4a05      	ldr	r2, [pc, #20]	@ (800236c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002358:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800235c:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800235e:	2300      	movs	r3, #0
}
 8002360:	4618      	mov	r0, r3
 8002362:	3714      	adds	r7, #20
 8002364:	46bd      	mov	sp, r7
 8002366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236a:	4770      	bx	lr
 800236c:	40007000 	.word	0x40007000
 8002370:	20000000 	.word	0x20000000
 8002374:	431bde83 	.word	0x431bde83

08002378 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b088      	sub	sp, #32
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d102      	bne.n	800238c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002386:	2301      	movs	r3, #1
 8002388:	f000 bc08 	b.w	8002b9c <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800238c:	4b96      	ldr	r3, [pc, #600]	@ (80025e8 <HAL_RCC_OscConfig+0x270>)
 800238e:	689b      	ldr	r3, [r3, #8]
 8002390:	f003 030c 	and.w	r3, r3, #12
 8002394:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002396:	4b94      	ldr	r3, [pc, #592]	@ (80025e8 <HAL_RCC_OscConfig+0x270>)
 8002398:	68db      	ldr	r3, [r3, #12]
 800239a:	f003 0303 	and.w	r3, r3, #3
 800239e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f003 0310 	and.w	r3, r3, #16
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	f000 80e4 	beq.w	8002576 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80023ae:	69bb      	ldr	r3, [r7, #24]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d007      	beq.n	80023c4 <HAL_RCC_OscConfig+0x4c>
 80023b4:	69bb      	ldr	r3, [r7, #24]
 80023b6:	2b0c      	cmp	r3, #12
 80023b8:	f040 808b 	bne.w	80024d2 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80023bc:	697b      	ldr	r3, [r7, #20]
 80023be:	2b01      	cmp	r3, #1
 80023c0:	f040 8087 	bne.w	80024d2 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80023c4:	4b88      	ldr	r3, [pc, #544]	@ (80025e8 <HAL_RCC_OscConfig+0x270>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f003 0302 	and.w	r3, r3, #2
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d005      	beq.n	80023dc <HAL_RCC_OscConfig+0x64>
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	699b      	ldr	r3, [r3, #24]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d101      	bne.n	80023dc <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80023d8:	2301      	movs	r3, #1
 80023da:	e3df      	b.n	8002b9c <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6a1a      	ldr	r2, [r3, #32]
 80023e0:	4b81      	ldr	r3, [pc, #516]	@ (80025e8 <HAL_RCC_OscConfig+0x270>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f003 0308 	and.w	r3, r3, #8
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d004      	beq.n	80023f6 <HAL_RCC_OscConfig+0x7e>
 80023ec:	4b7e      	ldr	r3, [pc, #504]	@ (80025e8 <HAL_RCC_OscConfig+0x270>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80023f4:	e005      	b.n	8002402 <HAL_RCC_OscConfig+0x8a>
 80023f6:	4b7c      	ldr	r3, [pc, #496]	@ (80025e8 <HAL_RCC_OscConfig+0x270>)
 80023f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80023fc:	091b      	lsrs	r3, r3, #4
 80023fe:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002402:	4293      	cmp	r3, r2
 8002404:	d223      	bcs.n	800244e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6a1b      	ldr	r3, [r3, #32]
 800240a:	4618      	mov	r0, r3
 800240c:	f000 fd94 	bl	8002f38 <RCC_SetFlashLatencyFromMSIRange>
 8002410:	4603      	mov	r3, r0
 8002412:	2b00      	cmp	r3, #0
 8002414:	d001      	beq.n	800241a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002416:	2301      	movs	r3, #1
 8002418:	e3c0      	b.n	8002b9c <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800241a:	4b73      	ldr	r3, [pc, #460]	@ (80025e8 <HAL_RCC_OscConfig+0x270>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	4a72      	ldr	r2, [pc, #456]	@ (80025e8 <HAL_RCC_OscConfig+0x270>)
 8002420:	f043 0308 	orr.w	r3, r3, #8
 8002424:	6013      	str	r3, [r2, #0]
 8002426:	4b70      	ldr	r3, [pc, #448]	@ (80025e8 <HAL_RCC_OscConfig+0x270>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6a1b      	ldr	r3, [r3, #32]
 8002432:	496d      	ldr	r1, [pc, #436]	@ (80025e8 <HAL_RCC_OscConfig+0x270>)
 8002434:	4313      	orrs	r3, r2
 8002436:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002438:	4b6b      	ldr	r3, [pc, #428]	@ (80025e8 <HAL_RCC_OscConfig+0x270>)
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	69db      	ldr	r3, [r3, #28]
 8002444:	021b      	lsls	r3, r3, #8
 8002446:	4968      	ldr	r1, [pc, #416]	@ (80025e8 <HAL_RCC_OscConfig+0x270>)
 8002448:	4313      	orrs	r3, r2
 800244a:	604b      	str	r3, [r1, #4]
 800244c:	e025      	b.n	800249a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800244e:	4b66      	ldr	r3, [pc, #408]	@ (80025e8 <HAL_RCC_OscConfig+0x270>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4a65      	ldr	r2, [pc, #404]	@ (80025e8 <HAL_RCC_OscConfig+0x270>)
 8002454:	f043 0308 	orr.w	r3, r3, #8
 8002458:	6013      	str	r3, [r2, #0]
 800245a:	4b63      	ldr	r3, [pc, #396]	@ (80025e8 <HAL_RCC_OscConfig+0x270>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6a1b      	ldr	r3, [r3, #32]
 8002466:	4960      	ldr	r1, [pc, #384]	@ (80025e8 <HAL_RCC_OscConfig+0x270>)
 8002468:	4313      	orrs	r3, r2
 800246a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800246c:	4b5e      	ldr	r3, [pc, #376]	@ (80025e8 <HAL_RCC_OscConfig+0x270>)
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	69db      	ldr	r3, [r3, #28]
 8002478:	021b      	lsls	r3, r3, #8
 800247a:	495b      	ldr	r1, [pc, #364]	@ (80025e8 <HAL_RCC_OscConfig+0x270>)
 800247c:	4313      	orrs	r3, r2
 800247e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002480:	69bb      	ldr	r3, [r7, #24]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d109      	bne.n	800249a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6a1b      	ldr	r3, [r3, #32]
 800248a:	4618      	mov	r0, r3
 800248c:	f000 fd54 	bl	8002f38 <RCC_SetFlashLatencyFromMSIRange>
 8002490:	4603      	mov	r3, r0
 8002492:	2b00      	cmp	r3, #0
 8002494:	d001      	beq.n	800249a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002496:	2301      	movs	r3, #1
 8002498:	e380      	b.n	8002b9c <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800249a:	f000 fcc1 	bl	8002e20 <HAL_RCC_GetSysClockFreq>
 800249e:	4602      	mov	r2, r0
 80024a0:	4b51      	ldr	r3, [pc, #324]	@ (80025e8 <HAL_RCC_OscConfig+0x270>)
 80024a2:	689b      	ldr	r3, [r3, #8]
 80024a4:	091b      	lsrs	r3, r3, #4
 80024a6:	f003 030f 	and.w	r3, r3, #15
 80024aa:	4950      	ldr	r1, [pc, #320]	@ (80025ec <HAL_RCC_OscConfig+0x274>)
 80024ac:	5ccb      	ldrb	r3, [r1, r3]
 80024ae:	f003 031f 	and.w	r3, r3, #31
 80024b2:	fa22 f303 	lsr.w	r3, r2, r3
 80024b6:	4a4e      	ldr	r2, [pc, #312]	@ (80025f0 <HAL_RCC_OscConfig+0x278>)
 80024b8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80024ba:	4b4e      	ldr	r3, [pc, #312]	@ (80025f4 <HAL_RCC_OscConfig+0x27c>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4618      	mov	r0, r3
 80024c0:	f7fe f954 	bl	800076c <HAL_InitTick>
 80024c4:	4603      	mov	r3, r0
 80024c6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80024c8:	7bfb      	ldrb	r3, [r7, #15]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d052      	beq.n	8002574 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80024ce:	7bfb      	ldrb	r3, [r7, #15]
 80024d0:	e364      	b.n	8002b9c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	699b      	ldr	r3, [r3, #24]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d032      	beq.n	8002540 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80024da:	4b43      	ldr	r3, [pc, #268]	@ (80025e8 <HAL_RCC_OscConfig+0x270>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	4a42      	ldr	r2, [pc, #264]	@ (80025e8 <HAL_RCC_OscConfig+0x270>)
 80024e0:	f043 0301 	orr.w	r3, r3, #1
 80024e4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80024e6:	f7fe f991 	bl	800080c <HAL_GetTick>
 80024ea:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80024ec:	e008      	b.n	8002500 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80024ee:	f7fe f98d 	bl	800080c <HAL_GetTick>
 80024f2:	4602      	mov	r2, r0
 80024f4:	693b      	ldr	r3, [r7, #16]
 80024f6:	1ad3      	subs	r3, r2, r3
 80024f8:	2b02      	cmp	r3, #2
 80024fa:	d901      	bls.n	8002500 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80024fc:	2303      	movs	r3, #3
 80024fe:	e34d      	b.n	8002b9c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002500:	4b39      	ldr	r3, [pc, #228]	@ (80025e8 <HAL_RCC_OscConfig+0x270>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f003 0302 	and.w	r3, r3, #2
 8002508:	2b00      	cmp	r3, #0
 800250a:	d0f0      	beq.n	80024ee <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800250c:	4b36      	ldr	r3, [pc, #216]	@ (80025e8 <HAL_RCC_OscConfig+0x270>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4a35      	ldr	r2, [pc, #212]	@ (80025e8 <HAL_RCC_OscConfig+0x270>)
 8002512:	f043 0308 	orr.w	r3, r3, #8
 8002516:	6013      	str	r3, [r2, #0]
 8002518:	4b33      	ldr	r3, [pc, #204]	@ (80025e8 <HAL_RCC_OscConfig+0x270>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6a1b      	ldr	r3, [r3, #32]
 8002524:	4930      	ldr	r1, [pc, #192]	@ (80025e8 <HAL_RCC_OscConfig+0x270>)
 8002526:	4313      	orrs	r3, r2
 8002528:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800252a:	4b2f      	ldr	r3, [pc, #188]	@ (80025e8 <HAL_RCC_OscConfig+0x270>)
 800252c:	685b      	ldr	r3, [r3, #4]
 800252e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	69db      	ldr	r3, [r3, #28]
 8002536:	021b      	lsls	r3, r3, #8
 8002538:	492b      	ldr	r1, [pc, #172]	@ (80025e8 <HAL_RCC_OscConfig+0x270>)
 800253a:	4313      	orrs	r3, r2
 800253c:	604b      	str	r3, [r1, #4]
 800253e:	e01a      	b.n	8002576 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002540:	4b29      	ldr	r3, [pc, #164]	@ (80025e8 <HAL_RCC_OscConfig+0x270>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4a28      	ldr	r2, [pc, #160]	@ (80025e8 <HAL_RCC_OscConfig+0x270>)
 8002546:	f023 0301 	bic.w	r3, r3, #1
 800254a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800254c:	f7fe f95e 	bl	800080c <HAL_GetTick>
 8002550:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002552:	e008      	b.n	8002566 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002554:	f7fe f95a 	bl	800080c <HAL_GetTick>
 8002558:	4602      	mov	r2, r0
 800255a:	693b      	ldr	r3, [r7, #16]
 800255c:	1ad3      	subs	r3, r2, r3
 800255e:	2b02      	cmp	r3, #2
 8002560:	d901      	bls.n	8002566 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002562:	2303      	movs	r3, #3
 8002564:	e31a      	b.n	8002b9c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002566:	4b20      	ldr	r3, [pc, #128]	@ (80025e8 <HAL_RCC_OscConfig+0x270>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f003 0302 	and.w	r3, r3, #2
 800256e:	2b00      	cmp	r3, #0
 8002570:	d1f0      	bne.n	8002554 <HAL_RCC_OscConfig+0x1dc>
 8002572:	e000      	b.n	8002576 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002574:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f003 0301 	and.w	r3, r3, #1
 800257e:	2b00      	cmp	r3, #0
 8002580:	d073      	beq.n	800266a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002582:	69bb      	ldr	r3, [r7, #24]
 8002584:	2b08      	cmp	r3, #8
 8002586:	d005      	beq.n	8002594 <HAL_RCC_OscConfig+0x21c>
 8002588:	69bb      	ldr	r3, [r7, #24]
 800258a:	2b0c      	cmp	r3, #12
 800258c:	d10e      	bne.n	80025ac <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800258e:	697b      	ldr	r3, [r7, #20]
 8002590:	2b03      	cmp	r3, #3
 8002592:	d10b      	bne.n	80025ac <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002594:	4b14      	ldr	r3, [pc, #80]	@ (80025e8 <HAL_RCC_OscConfig+0x270>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800259c:	2b00      	cmp	r3, #0
 800259e:	d063      	beq.n	8002668 <HAL_RCC_OscConfig+0x2f0>
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d15f      	bne.n	8002668 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80025a8:	2301      	movs	r3, #1
 80025aa:	e2f7      	b.n	8002b9c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80025b4:	d106      	bne.n	80025c4 <HAL_RCC_OscConfig+0x24c>
 80025b6:	4b0c      	ldr	r3, [pc, #48]	@ (80025e8 <HAL_RCC_OscConfig+0x270>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	4a0b      	ldr	r2, [pc, #44]	@ (80025e8 <HAL_RCC_OscConfig+0x270>)
 80025bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80025c0:	6013      	str	r3, [r2, #0]
 80025c2:	e025      	b.n	8002610 <HAL_RCC_OscConfig+0x298>
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80025cc:	d114      	bne.n	80025f8 <HAL_RCC_OscConfig+0x280>
 80025ce:	4b06      	ldr	r3, [pc, #24]	@ (80025e8 <HAL_RCC_OscConfig+0x270>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4a05      	ldr	r2, [pc, #20]	@ (80025e8 <HAL_RCC_OscConfig+0x270>)
 80025d4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80025d8:	6013      	str	r3, [r2, #0]
 80025da:	4b03      	ldr	r3, [pc, #12]	@ (80025e8 <HAL_RCC_OscConfig+0x270>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4a02      	ldr	r2, [pc, #8]	@ (80025e8 <HAL_RCC_OscConfig+0x270>)
 80025e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80025e4:	6013      	str	r3, [r2, #0]
 80025e6:	e013      	b.n	8002610 <HAL_RCC_OscConfig+0x298>
 80025e8:	40021000 	.word	0x40021000
 80025ec:	08003b88 	.word	0x08003b88
 80025f0:	20000000 	.word	0x20000000
 80025f4:	20000004 	.word	0x20000004
 80025f8:	4ba0      	ldr	r3, [pc, #640]	@ (800287c <HAL_RCC_OscConfig+0x504>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	4a9f      	ldr	r2, [pc, #636]	@ (800287c <HAL_RCC_OscConfig+0x504>)
 80025fe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002602:	6013      	str	r3, [r2, #0]
 8002604:	4b9d      	ldr	r3, [pc, #628]	@ (800287c <HAL_RCC_OscConfig+0x504>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4a9c      	ldr	r2, [pc, #624]	@ (800287c <HAL_RCC_OscConfig+0x504>)
 800260a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800260e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	2b00      	cmp	r3, #0
 8002616:	d013      	beq.n	8002640 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002618:	f7fe f8f8 	bl	800080c <HAL_GetTick>
 800261c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800261e:	e008      	b.n	8002632 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002620:	f7fe f8f4 	bl	800080c <HAL_GetTick>
 8002624:	4602      	mov	r2, r0
 8002626:	693b      	ldr	r3, [r7, #16]
 8002628:	1ad3      	subs	r3, r2, r3
 800262a:	2b64      	cmp	r3, #100	@ 0x64
 800262c:	d901      	bls.n	8002632 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800262e:	2303      	movs	r3, #3
 8002630:	e2b4      	b.n	8002b9c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002632:	4b92      	ldr	r3, [pc, #584]	@ (800287c <HAL_RCC_OscConfig+0x504>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800263a:	2b00      	cmp	r3, #0
 800263c:	d0f0      	beq.n	8002620 <HAL_RCC_OscConfig+0x2a8>
 800263e:	e014      	b.n	800266a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002640:	f7fe f8e4 	bl	800080c <HAL_GetTick>
 8002644:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002646:	e008      	b.n	800265a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002648:	f7fe f8e0 	bl	800080c <HAL_GetTick>
 800264c:	4602      	mov	r2, r0
 800264e:	693b      	ldr	r3, [r7, #16]
 8002650:	1ad3      	subs	r3, r2, r3
 8002652:	2b64      	cmp	r3, #100	@ 0x64
 8002654:	d901      	bls.n	800265a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002656:	2303      	movs	r3, #3
 8002658:	e2a0      	b.n	8002b9c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800265a:	4b88      	ldr	r3, [pc, #544]	@ (800287c <HAL_RCC_OscConfig+0x504>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002662:	2b00      	cmp	r3, #0
 8002664:	d1f0      	bne.n	8002648 <HAL_RCC_OscConfig+0x2d0>
 8002666:	e000      	b.n	800266a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002668:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f003 0302 	and.w	r3, r3, #2
 8002672:	2b00      	cmp	r3, #0
 8002674:	d060      	beq.n	8002738 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002676:	69bb      	ldr	r3, [r7, #24]
 8002678:	2b04      	cmp	r3, #4
 800267a:	d005      	beq.n	8002688 <HAL_RCC_OscConfig+0x310>
 800267c:	69bb      	ldr	r3, [r7, #24]
 800267e:	2b0c      	cmp	r3, #12
 8002680:	d119      	bne.n	80026b6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002682:	697b      	ldr	r3, [r7, #20]
 8002684:	2b02      	cmp	r3, #2
 8002686:	d116      	bne.n	80026b6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002688:	4b7c      	ldr	r3, [pc, #496]	@ (800287c <HAL_RCC_OscConfig+0x504>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002690:	2b00      	cmp	r3, #0
 8002692:	d005      	beq.n	80026a0 <HAL_RCC_OscConfig+0x328>
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	68db      	ldr	r3, [r3, #12]
 8002698:	2b00      	cmp	r3, #0
 800269a:	d101      	bne.n	80026a0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800269c:	2301      	movs	r3, #1
 800269e:	e27d      	b.n	8002b9c <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026a0:	4b76      	ldr	r3, [pc, #472]	@ (800287c <HAL_RCC_OscConfig+0x504>)
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	691b      	ldr	r3, [r3, #16]
 80026ac:	061b      	lsls	r3, r3, #24
 80026ae:	4973      	ldr	r1, [pc, #460]	@ (800287c <HAL_RCC_OscConfig+0x504>)
 80026b0:	4313      	orrs	r3, r2
 80026b2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80026b4:	e040      	b.n	8002738 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	68db      	ldr	r3, [r3, #12]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d023      	beq.n	8002706 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80026be:	4b6f      	ldr	r3, [pc, #444]	@ (800287c <HAL_RCC_OscConfig+0x504>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4a6e      	ldr	r2, [pc, #440]	@ (800287c <HAL_RCC_OscConfig+0x504>)
 80026c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80026c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026ca:	f7fe f89f 	bl	800080c <HAL_GetTick>
 80026ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80026d0:	e008      	b.n	80026e4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026d2:	f7fe f89b 	bl	800080c <HAL_GetTick>
 80026d6:	4602      	mov	r2, r0
 80026d8:	693b      	ldr	r3, [r7, #16]
 80026da:	1ad3      	subs	r3, r2, r3
 80026dc:	2b02      	cmp	r3, #2
 80026de:	d901      	bls.n	80026e4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80026e0:	2303      	movs	r3, #3
 80026e2:	e25b      	b.n	8002b9c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80026e4:	4b65      	ldr	r3, [pc, #404]	@ (800287c <HAL_RCC_OscConfig+0x504>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d0f0      	beq.n	80026d2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026f0:	4b62      	ldr	r3, [pc, #392]	@ (800287c <HAL_RCC_OscConfig+0x504>)
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	691b      	ldr	r3, [r3, #16]
 80026fc:	061b      	lsls	r3, r3, #24
 80026fe:	495f      	ldr	r1, [pc, #380]	@ (800287c <HAL_RCC_OscConfig+0x504>)
 8002700:	4313      	orrs	r3, r2
 8002702:	604b      	str	r3, [r1, #4]
 8002704:	e018      	b.n	8002738 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002706:	4b5d      	ldr	r3, [pc, #372]	@ (800287c <HAL_RCC_OscConfig+0x504>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4a5c      	ldr	r2, [pc, #368]	@ (800287c <HAL_RCC_OscConfig+0x504>)
 800270c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002710:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002712:	f7fe f87b 	bl	800080c <HAL_GetTick>
 8002716:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002718:	e008      	b.n	800272c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800271a:	f7fe f877 	bl	800080c <HAL_GetTick>
 800271e:	4602      	mov	r2, r0
 8002720:	693b      	ldr	r3, [r7, #16]
 8002722:	1ad3      	subs	r3, r2, r3
 8002724:	2b02      	cmp	r3, #2
 8002726:	d901      	bls.n	800272c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002728:	2303      	movs	r3, #3
 800272a:	e237      	b.n	8002b9c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800272c:	4b53      	ldr	r3, [pc, #332]	@ (800287c <HAL_RCC_OscConfig+0x504>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002734:	2b00      	cmp	r3, #0
 8002736:	d1f0      	bne.n	800271a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f003 0308 	and.w	r3, r3, #8
 8002740:	2b00      	cmp	r3, #0
 8002742:	d03c      	beq.n	80027be <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	695b      	ldr	r3, [r3, #20]
 8002748:	2b00      	cmp	r3, #0
 800274a:	d01c      	beq.n	8002786 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800274c:	4b4b      	ldr	r3, [pc, #300]	@ (800287c <HAL_RCC_OscConfig+0x504>)
 800274e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002752:	4a4a      	ldr	r2, [pc, #296]	@ (800287c <HAL_RCC_OscConfig+0x504>)
 8002754:	f043 0301 	orr.w	r3, r3, #1
 8002758:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800275c:	f7fe f856 	bl	800080c <HAL_GetTick>
 8002760:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002762:	e008      	b.n	8002776 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002764:	f7fe f852 	bl	800080c <HAL_GetTick>
 8002768:	4602      	mov	r2, r0
 800276a:	693b      	ldr	r3, [r7, #16]
 800276c:	1ad3      	subs	r3, r2, r3
 800276e:	2b02      	cmp	r3, #2
 8002770:	d901      	bls.n	8002776 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002772:	2303      	movs	r3, #3
 8002774:	e212      	b.n	8002b9c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002776:	4b41      	ldr	r3, [pc, #260]	@ (800287c <HAL_RCC_OscConfig+0x504>)
 8002778:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800277c:	f003 0302 	and.w	r3, r3, #2
 8002780:	2b00      	cmp	r3, #0
 8002782:	d0ef      	beq.n	8002764 <HAL_RCC_OscConfig+0x3ec>
 8002784:	e01b      	b.n	80027be <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002786:	4b3d      	ldr	r3, [pc, #244]	@ (800287c <HAL_RCC_OscConfig+0x504>)
 8002788:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800278c:	4a3b      	ldr	r2, [pc, #236]	@ (800287c <HAL_RCC_OscConfig+0x504>)
 800278e:	f023 0301 	bic.w	r3, r3, #1
 8002792:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002796:	f7fe f839 	bl	800080c <HAL_GetTick>
 800279a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800279c:	e008      	b.n	80027b0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800279e:	f7fe f835 	bl	800080c <HAL_GetTick>
 80027a2:	4602      	mov	r2, r0
 80027a4:	693b      	ldr	r3, [r7, #16]
 80027a6:	1ad3      	subs	r3, r2, r3
 80027a8:	2b02      	cmp	r3, #2
 80027aa:	d901      	bls.n	80027b0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80027ac:	2303      	movs	r3, #3
 80027ae:	e1f5      	b.n	8002b9c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80027b0:	4b32      	ldr	r3, [pc, #200]	@ (800287c <HAL_RCC_OscConfig+0x504>)
 80027b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80027b6:	f003 0302 	and.w	r3, r3, #2
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d1ef      	bne.n	800279e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f003 0304 	and.w	r3, r3, #4
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	f000 80a6 	beq.w	8002918 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027cc:	2300      	movs	r3, #0
 80027ce:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80027d0:	4b2a      	ldr	r3, [pc, #168]	@ (800287c <HAL_RCC_OscConfig+0x504>)
 80027d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d10d      	bne.n	80027f8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027dc:	4b27      	ldr	r3, [pc, #156]	@ (800287c <HAL_RCC_OscConfig+0x504>)
 80027de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027e0:	4a26      	ldr	r2, [pc, #152]	@ (800287c <HAL_RCC_OscConfig+0x504>)
 80027e2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80027e6:	6593      	str	r3, [r2, #88]	@ 0x58
 80027e8:	4b24      	ldr	r3, [pc, #144]	@ (800287c <HAL_RCC_OscConfig+0x504>)
 80027ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027f0:	60bb      	str	r3, [r7, #8]
 80027f2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027f4:	2301      	movs	r3, #1
 80027f6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80027f8:	4b21      	ldr	r3, [pc, #132]	@ (8002880 <HAL_RCC_OscConfig+0x508>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002800:	2b00      	cmp	r3, #0
 8002802:	d118      	bne.n	8002836 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002804:	4b1e      	ldr	r3, [pc, #120]	@ (8002880 <HAL_RCC_OscConfig+0x508>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4a1d      	ldr	r2, [pc, #116]	@ (8002880 <HAL_RCC_OscConfig+0x508>)
 800280a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800280e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002810:	f7fd fffc 	bl	800080c <HAL_GetTick>
 8002814:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002816:	e008      	b.n	800282a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002818:	f7fd fff8 	bl	800080c <HAL_GetTick>
 800281c:	4602      	mov	r2, r0
 800281e:	693b      	ldr	r3, [r7, #16]
 8002820:	1ad3      	subs	r3, r2, r3
 8002822:	2b02      	cmp	r3, #2
 8002824:	d901      	bls.n	800282a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002826:	2303      	movs	r3, #3
 8002828:	e1b8      	b.n	8002b9c <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800282a:	4b15      	ldr	r3, [pc, #84]	@ (8002880 <HAL_RCC_OscConfig+0x508>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002832:	2b00      	cmp	r3, #0
 8002834:	d0f0      	beq.n	8002818 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	689b      	ldr	r3, [r3, #8]
 800283a:	2b01      	cmp	r3, #1
 800283c:	d108      	bne.n	8002850 <HAL_RCC_OscConfig+0x4d8>
 800283e:	4b0f      	ldr	r3, [pc, #60]	@ (800287c <HAL_RCC_OscConfig+0x504>)
 8002840:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002844:	4a0d      	ldr	r2, [pc, #52]	@ (800287c <HAL_RCC_OscConfig+0x504>)
 8002846:	f043 0301 	orr.w	r3, r3, #1
 800284a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800284e:	e029      	b.n	80028a4 <HAL_RCC_OscConfig+0x52c>
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	689b      	ldr	r3, [r3, #8]
 8002854:	2b05      	cmp	r3, #5
 8002856:	d115      	bne.n	8002884 <HAL_RCC_OscConfig+0x50c>
 8002858:	4b08      	ldr	r3, [pc, #32]	@ (800287c <HAL_RCC_OscConfig+0x504>)
 800285a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800285e:	4a07      	ldr	r2, [pc, #28]	@ (800287c <HAL_RCC_OscConfig+0x504>)
 8002860:	f043 0304 	orr.w	r3, r3, #4
 8002864:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002868:	4b04      	ldr	r3, [pc, #16]	@ (800287c <HAL_RCC_OscConfig+0x504>)
 800286a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800286e:	4a03      	ldr	r2, [pc, #12]	@ (800287c <HAL_RCC_OscConfig+0x504>)
 8002870:	f043 0301 	orr.w	r3, r3, #1
 8002874:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002878:	e014      	b.n	80028a4 <HAL_RCC_OscConfig+0x52c>
 800287a:	bf00      	nop
 800287c:	40021000 	.word	0x40021000
 8002880:	40007000 	.word	0x40007000
 8002884:	4b9d      	ldr	r3, [pc, #628]	@ (8002afc <HAL_RCC_OscConfig+0x784>)
 8002886:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800288a:	4a9c      	ldr	r2, [pc, #624]	@ (8002afc <HAL_RCC_OscConfig+0x784>)
 800288c:	f023 0301 	bic.w	r3, r3, #1
 8002890:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002894:	4b99      	ldr	r3, [pc, #612]	@ (8002afc <HAL_RCC_OscConfig+0x784>)
 8002896:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800289a:	4a98      	ldr	r2, [pc, #608]	@ (8002afc <HAL_RCC_OscConfig+0x784>)
 800289c:	f023 0304 	bic.w	r3, r3, #4
 80028a0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	689b      	ldr	r3, [r3, #8]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d016      	beq.n	80028da <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028ac:	f7fd ffae 	bl	800080c <HAL_GetTick>
 80028b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80028b2:	e00a      	b.n	80028ca <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028b4:	f7fd ffaa 	bl	800080c <HAL_GetTick>
 80028b8:	4602      	mov	r2, r0
 80028ba:	693b      	ldr	r3, [r7, #16]
 80028bc:	1ad3      	subs	r3, r2, r3
 80028be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d901      	bls.n	80028ca <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80028c6:	2303      	movs	r3, #3
 80028c8:	e168      	b.n	8002b9c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80028ca:	4b8c      	ldr	r3, [pc, #560]	@ (8002afc <HAL_RCC_OscConfig+0x784>)
 80028cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028d0:	f003 0302 	and.w	r3, r3, #2
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d0ed      	beq.n	80028b4 <HAL_RCC_OscConfig+0x53c>
 80028d8:	e015      	b.n	8002906 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028da:	f7fd ff97 	bl	800080c <HAL_GetTick>
 80028de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80028e0:	e00a      	b.n	80028f8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028e2:	f7fd ff93 	bl	800080c <HAL_GetTick>
 80028e6:	4602      	mov	r2, r0
 80028e8:	693b      	ldr	r3, [r7, #16]
 80028ea:	1ad3      	subs	r3, r2, r3
 80028ec:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d901      	bls.n	80028f8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80028f4:	2303      	movs	r3, #3
 80028f6:	e151      	b.n	8002b9c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80028f8:	4b80      	ldr	r3, [pc, #512]	@ (8002afc <HAL_RCC_OscConfig+0x784>)
 80028fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028fe:	f003 0302 	and.w	r3, r3, #2
 8002902:	2b00      	cmp	r3, #0
 8002904:	d1ed      	bne.n	80028e2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002906:	7ffb      	ldrb	r3, [r7, #31]
 8002908:	2b01      	cmp	r3, #1
 800290a:	d105      	bne.n	8002918 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800290c:	4b7b      	ldr	r3, [pc, #492]	@ (8002afc <HAL_RCC_OscConfig+0x784>)
 800290e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002910:	4a7a      	ldr	r2, [pc, #488]	@ (8002afc <HAL_RCC_OscConfig+0x784>)
 8002912:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002916:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f003 0320 	and.w	r3, r3, #32
 8002920:	2b00      	cmp	r3, #0
 8002922:	d03c      	beq.n	800299e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002928:	2b00      	cmp	r3, #0
 800292a:	d01c      	beq.n	8002966 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800292c:	4b73      	ldr	r3, [pc, #460]	@ (8002afc <HAL_RCC_OscConfig+0x784>)
 800292e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002932:	4a72      	ldr	r2, [pc, #456]	@ (8002afc <HAL_RCC_OscConfig+0x784>)
 8002934:	f043 0301 	orr.w	r3, r3, #1
 8002938:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800293c:	f7fd ff66 	bl	800080c <HAL_GetTick>
 8002940:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002942:	e008      	b.n	8002956 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002944:	f7fd ff62 	bl	800080c <HAL_GetTick>
 8002948:	4602      	mov	r2, r0
 800294a:	693b      	ldr	r3, [r7, #16]
 800294c:	1ad3      	subs	r3, r2, r3
 800294e:	2b02      	cmp	r3, #2
 8002950:	d901      	bls.n	8002956 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002952:	2303      	movs	r3, #3
 8002954:	e122      	b.n	8002b9c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002956:	4b69      	ldr	r3, [pc, #420]	@ (8002afc <HAL_RCC_OscConfig+0x784>)
 8002958:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800295c:	f003 0302 	and.w	r3, r3, #2
 8002960:	2b00      	cmp	r3, #0
 8002962:	d0ef      	beq.n	8002944 <HAL_RCC_OscConfig+0x5cc>
 8002964:	e01b      	b.n	800299e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002966:	4b65      	ldr	r3, [pc, #404]	@ (8002afc <HAL_RCC_OscConfig+0x784>)
 8002968:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800296c:	4a63      	ldr	r2, [pc, #396]	@ (8002afc <HAL_RCC_OscConfig+0x784>)
 800296e:	f023 0301 	bic.w	r3, r3, #1
 8002972:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002976:	f7fd ff49 	bl	800080c <HAL_GetTick>
 800297a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800297c:	e008      	b.n	8002990 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800297e:	f7fd ff45 	bl	800080c <HAL_GetTick>
 8002982:	4602      	mov	r2, r0
 8002984:	693b      	ldr	r3, [r7, #16]
 8002986:	1ad3      	subs	r3, r2, r3
 8002988:	2b02      	cmp	r3, #2
 800298a:	d901      	bls.n	8002990 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800298c:	2303      	movs	r3, #3
 800298e:	e105      	b.n	8002b9c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002990:	4b5a      	ldr	r3, [pc, #360]	@ (8002afc <HAL_RCC_OscConfig+0x784>)
 8002992:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002996:	f003 0302 	and.w	r3, r3, #2
 800299a:	2b00      	cmp	r3, #0
 800299c:	d1ef      	bne.n	800297e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	f000 80f9 	beq.w	8002b9a <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029ac:	2b02      	cmp	r3, #2
 80029ae:	f040 80cf 	bne.w	8002b50 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80029b2:	4b52      	ldr	r3, [pc, #328]	@ (8002afc <HAL_RCC_OscConfig+0x784>)
 80029b4:	68db      	ldr	r3, [r3, #12]
 80029b6:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80029b8:	697b      	ldr	r3, [r7, #20]
 80029ba:	f003 0203 	and.w	r2, r3, #3
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029c2:	429a      	cmp	r2, r3
 80029c4:	d12c      	bne.n	8002a20 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80029c6:	697b      	ldr	r3, [r7, #20]
 80029c8:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029d0:	3b01      	subs	r3, #1
 80029d2:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80029d4:	429a      	cmp	r2, r3
 80029d6:	d123      	bne.n	8002a20 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80029d8:	697b      	ldr	r3, [r7, #20]
 80029da:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80029e2:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80029e4:	429a      	cmp	r2, r3
 80029e6:	d11b      	bne.n	8002a20 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80029e8:	697b      	ldr	r3, [r7, #20]
 80029ea:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029f2:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80029f4:	429a      	cmp	r2, r3
 80029f6:	d113      	bne.n	8002a20 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80029f8:	697b      	ldr	r3, [r7, #20]
 80029fa:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a02:	085b      	lsrs	r3, r3, #1
 8002a04:	3b01      	subs	r3, #1
 8002a06:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002a08:	429a      	cmp	r2, r3
 8002a0a:	d109      	bne.n	8002a20 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002a0c:	697b      	ldr	r3, [r7, #20]
 8002a0e:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a16:	085b      	lsrs	r3, r3, #1
 8002a18:	3b01      	subs	r3, #1
 8002a1a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002a1c:	429a      	cmp	r2, r3
 8002a1e:	d071      	beq.n	8002b04 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002a20:	69bb      	ldr	r3, [r7, #24]
 8002a22:	2b0c      	cmp	r3, #12
 8002a24:	d068      	beq.n	8002af8 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002a26:	4b35      	ldr	r3, [pc, #212]	@ (8002afc <HAL_RCC_OscConfig+0x784>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d105      	bne.n	8002a3e <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002a32:	4b32      	ldr	r3, [pc, #200]	@ (8002afc <HAL_RCC_OscConfig+0x784>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d001      	beq.n	8002a42 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8002a3e:	2301      	movs	r3, #1
 8002a40:	e0ac      	b.n	8002b9c <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002a42:	4b2e      	ldr	r3, [pc, #184]	@ (8002afc <HAL_RCC_OscConfig+0x784>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4a2d      	ldr	r2, [pc, #180]	@ (8002afc <HAL_RCC_OscConfig+0x784>)
 8002a48:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002a4c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002a4e:	f7fd fedd 	bl	800080c <HAL_GetTick>
 8002a52:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a54:	e008      	b.n	8002a68 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a56:	f7fd fed9 	bl	800080c <HAL_GetTick>
 8002a5a:	4602      	mov	r2, r0
 8002a5c:	693b      	ldr	r3, [r7, #16]
 8002a5e:	1ad3      	subs	r3, r2, r3
 8002a60:	2b02      	cmp	r3, #2
 8002a62:	d901      	bls.n	8002a68 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8002a64:	2303      	movs	r3, #3
 8002a66:	e099      	b.n	8002b9c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a68:	4b24      	ldr	r3, [pc, #144]	@ (8002afc <HAL_RCC_OscConfig+0x784>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d1f0      	bne.n	8002a56 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a74:	4b21      	ldr	r3, [pc, #132]	@ (8002afc <HAL_RCC_OscConfig+0x784>)
 8002a76:	68da      	ldr	r2, [r3, #12]
 8002a78:	4b21      	ldr	r3, [pc, #132]	@ (8002b00 <HAL_RCC_OscConfig+0x788>)
 8002a7a:	4013      	ands	r3, r2
 8002a7c:	687a      	ldr	r2, [r7, #4]
 8002a7e:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002a80:	687a      	ldr	r2, [r7, #4]
 8002a82:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002a84:	3a01      	subs	r2, #1
 8002a86:	0112      	lsls	r2, r2, #4
 8002a88:	4311      	orrs	r1, r2
 8002a8a:	687a      	ldr	r2, [r7, #4]
 8002a8c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002a8e:	0212      	lsls	r2, r2, #8
 8002a90:	4311      	orrs	r1, r2
 8002a92:	687a      	ldr	r2, [r7, #4]
 8002a94:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002a96:	0852      	lsrs	r2, r2, #1
 8002a98:	3a01      	subs	r2, #1
 8002a9a:	0552      	lsls	r2, r2, #21
 8002a9c:	4311      	orrs	r1, r2
 8002a9e:	687a      	ldr	r2, [r7, #4]
 8002aa0:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002aa2:	0852      	lsrs	r2, r2, #1
 8002aa4:	3a01      	subs	r2, #1
 8002aa6:	0652      	lsls	r2, r2, #25
 8002aa8:	4311      	orrs	r1, r2
 8002aaa:	687a      	ldr	r2, [r7, #4]
 8002aac:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002aae:	06d2      	lsls	r2, r2, #27
 8002ab0:	430a      	orrs	r2, r1
 8002ab2:	4912      	ldr	r1, [pc, #72]	@ (8002afc <HAL_RCC_OscConfig+0x784>)
 8002ab4:	4313      	orrs	r3, r2
 8002ab6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002ab8:	4b10      	ldr	r3, [pc, #64]	@ (8002afc <HAL_RCC_OscConfig+0x784>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4a0f      	ldr	r2, [pc, #60]	@ (8002afc <HAL_RCC_OscConfig+0x784>)
 8002abe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002ac2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002ac4:	4b0d      	ldr	r3, [pc, #52]	@ (8002afc <HAL_RCC_OscConfig+0x784>)
 8002ac6:	68db      	ldr	r3, [r3, #12]
 8002ac8:	4a0c      	ldr	r2, [pc, #48]	@ (8002afc <HAL_RCC_OscConfig+0x784>)
 8002aca:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002ace:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002ad0:	f7fd fe9c 	bl	800080c <HAL_GetTick>
 8002ad4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ad6:	e008      	b.n	8002aea <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ad8:	f7fd fe98 	bl	800080c <HAL_GetTick>
 8002adc:	4602      	mov	r2, r0
 8002ade:	693b      	ldr	r3, [r7, #16]
 8002ae0:	1ad3      	subs	r3, r2, r3
 8002ae2:	2b02      	cmp	r3, #2
 8002ae4:	d901      	bls.n	8002aea <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8002ae6:	2303      	movs	r3, #3
 8002ae8:	e058      	b.n	8002b9c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002aea:	4b04      	ldr	r3, [pc, #16]	@ (8002afc <HAL_RCC_OscConfig+0x784>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d0f0      	beq.n	8002ad8 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002af6:	e050      	b.n	8002b9a <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002af8:	2301      	movs	r3, #1
 8002afa:	e04f      	b.n	8002b9c <HAL_RCC_OscConfig+0x824>
 8002afc:	40021000 	.word	0x40021000
 8002b00:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b04:	4b27      	ldr	r3, [pc, #156]	@ (8002ba4 <HAL_RCC_OscConfig+0x82c>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d144      	bne.n	8002b9a <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002b10:	4b24      	ldr	r3, [pc, #144]	@ (8002ba4 <HAL_RCC_OscConfig+0x82c>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4a23      	ldr	r2, [pc, #140]	@ (8002ba4 <HAL_RCC_OscConfig+0x82c>)
 8002b16:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002b1a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002b1c:	4b21      	ldr	r3, [pc, #132]	@ (8002ba4 <HAL_RCC_OscConfig+0x82c>)
 8002b1e:	68db      	ldr	r3, [r3, #12]
 8002b20:	4a20      	ldr	r2, [pc, #128]	@ (8002ba4 <HAL_RCC_OscConfig+0x82c>)
 8002b22:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002b26:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002b28:	f7fd fe70 	bl	800080c <HAL_GetTick>
 8002b2c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b2e:	e008      	b.n	8002b42 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b30:	f7fd fe6c 	bl	800080c <HAL_GetTick>
 8002b34:	4602      	mov	r2, r0
 8002b36:	693b      	ldr	r3, [r7, #16]
 8002b38:	1ad3      	subs	r3, r2, r3
 8002b3a:	2b02      	cmp	r3, #2
 8002b3c:	d901      	bls.n	8002b42 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8002b3e:	2303      	movs	r3, #3
 8002b40:	e02c      	b.n	8002b9c <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b42:	4b18      	ldr	r3, [pc, #96]	@ (8002ba4 <HAL_RCC_OscConfig+0x82c>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d0f0      	beq.n	8002b30 <HAL_RCC_OscConfig+0x7b8>
 8002b4e:	e024      	b.n	8002b9a <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002b50:	69bb      	ldr	r3, [r7, #24]
 8002b52:	2b0c      	cmp	r3, #12
 8002b54:	d01f      	beq.n	8002b96 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b56:	4b13      	ldr	r3, [pc, #76]	@ (8002ba4 <HAL_RCC_OscConfig+0x82c>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4a12      	ldr	r2, [pc, #72]	@ (8002ba4 <HAL_RCC_OscConfig+0x82c>)
 8002b5c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002b60:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b62:	f7fd fe53 	bl	800080c <HAL_GetTick>
 8002b66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b68:	e008      	b.n	8002b7c <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b6a:	f7fd fe4f 	bl	800080c <HAL_GetTick>
 8002b6e:	4602      	mov	r2, r0
 8002b70:	693b      	ldr	r3, [r7, #16]
 8002b72:	1ad3      	subs	r3, r2, r3
 8002b74:	2b02      	cmp	r3, #2
 8002b76:	d901      	bls.n	8002b7c <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8002b78:	2303      	movs	r3, #3
 8002b7a:	e00f      	b.n	8002b9c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b7c:	4b09      	ldr	r3, [pc, #36]	@ (8002ba4 <HAL_RCC_OscConfig+0x82c>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d1f0      	bne.n	8002b6a <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002b88:	4b06      	ldr	r3, [pc, #24]	@ (8002ba4 <HAL_RCC_OscConfig+0x82c>)
 8002b8a:	68da      	ldr	r2, [r3, #12]
 8002b8c:	4905      	ldr	r1, [pc, #20]	@ (8002ba4 <HAL_RCC_OscConfig+0x82c>)
 8002b8e:	4b06      	ldr	r3, [pc, #24]	@ (8002ba8 <HAL_RCC_OscConfig+0x830>)
 8002b90:	4013      	ands	r3, r2
 8002b92:	60cb      	str	r3, [r1, #12]
 8002b94:	e001      	b.n	8002b9a <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002b96:	2301      	movs	r3, #1
 8002b98:	e000      	b.n	8002b9c <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8002b9a:	2300      	movs	r3, #0
}
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	3720      	adds	r7, #32
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	bd80      	pop	{r7, pc}
 8002ba4:	40021000 	.word	0x40021000
 8002ba8:	feeefffc 	.word	0xfeeefffc

08002bac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b086      	sub	sp, #24
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
 8002bb4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d101      	bne.n	8002bc4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002bc0:	2301      	movs	r3, #1
 8002bc2:	e11d      	b.n	8002e00 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002bc4:	4b90      	ldr	r3, [pc, #576]	@ (8002e08 <HAL_RCC_ClockConfig+0x25c>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f003 030f 	and.w	r3, r3, #15
 8002bcc:	683a      	ldr	r2, [r7, #0]
 8002bce:	429a      	cmp	r2, r3
 8002bd0:	d910      	bls.n	8002bf4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bd2:	4b8d      	ldr	r3, [pc, #564]	@ (8002e08 <HAL_RCC_ClockConfig+0x25c>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f023 020f 	bic.w	r2, r3, #15
 8002bda:	498b      	ldr	r1, [pc, #556]	@ (8002e08 <HAL_RCC_ClockConfig+0x25c>)
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	4313      	orrs	r3, r2
 8002be0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002be2:	4b89      	ldr	r3, [pc, #548]	@ (8002e08 <HAL_RCC_ClockConfig+0x25c>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f003 030f 	and.w	r3, r3, #15
 8002bea:	683a      	ldr	r2, [r7, #0]
 8002bec:	429a      	cmp	r2, r3
 8002bee:	d001      	beq.n	8002bf4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	e105      	b.n	8002e00 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f003 0302 	and.w	r3, r3, #2
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d010      	beq.n	8002c22 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	689a      	ldr	r2, [r3, #8]
 8002c04:	4b81      	ldr	r3, [pc, #516]	@ (8002e0c <HAL_RCC_ClockConfig+0x260>)
 8002c06:	689b      	ldr	r3, [r3, #8]
 8002c08:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002c0c:	429a      	cmp	r2, r3
 8002c0e:	d908      	bls.n	8002c22 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c10:	4b7e      	ldr	r3, [pc, #504]	@ (8002e0c <HAL_RCC_ClockConfig+0x260>)
 8002c12:	689b      	ldr	r3, [r3, #8]
 8002c14:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	689b      	ldr	r3, [r3, #8]
 8002c1c:	497b      	ldr	r1, [pc, #492]	@ (8002e0c <HAL_RCC_ClockConfig+0x260>)
 8002c1e:	4313      	orrs	r3, r2
 8002c20:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f003 0301 	and.w	r3, r3, #1
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d079      	beq.n	8002d22 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	2b03      	cmp	r3, #3
 8002c34:	d11e      	bne.n	8002c74 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c36:	4b75      	ldr	r3, [pc, #468]	@ (8002e0c <HAL_RCC_ClockConfig+0x260>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d101      	bne.n	8002c46 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8002c42:	2301      	movs	r3, #1
 8002c44:	e0dc      	b.n	8002e00 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8002c46:	f000 f9d1 	bl	8002fec <RCC_GetSysClockFreqFromPLLSource>
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	4a70      	ldr	r2, [pc, #448]	@ (8002e10 <HAL_RCC_ClockConfig+0x264>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d946      	bls.n	8002ce0 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002c52:	4b6e      	ldr	r3, [pc, #440]	@ (8002e0c <HAL_RCC_ClockConfig+0x260>)
 8002c54:	689b      	ldr	r3, [r3, #8]
 8002c56:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d140      	bne.n	8002ce0 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002c5e:	4b6b      	ldr	r3, [pc, #428]	@ (8002e0c <HAL_RCC_ClockConfig+0x260>)
 8002c60:	689b      	ldr	r3, [r3, #8]
 8002c62:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002c66:	4a69      	ldr	r2, [pc, #420]	@ (8002e0c <HAL_RCC_ClockConfig+0x260>)
 8002c68:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002c6c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002c6e:	2380      	movs	r3, #128	@ 0x80
 8002c70:	617b      	str	r3, [r7, #20]
 8002c72:	e035      	b.n	8002ce0 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	2b02      	cmp	r3, #2
 8002c7a:	d107      	bne.n	8002c8c <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c7c:	4b63      	ldr	r3, [pc, #396]	@ (8002e0c <HAL_RCC_ClockConfig+0x260>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d115      	bne.n	8002cb4 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002c88:	2301      	movs	r3, #1
 8002c8a:	e0b9      	b.n	8002e00 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d107      	bne.n	8002ca4 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002c94:	4b5d      	ldr	r3, [pc, #372]	@ (8002e0c <HAL_RCC_ClockConfig+0x260>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f003 0302 	and.w	r3, r3, #2
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d109      	bne.n	8002cb4 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	e0ad      	b.n	8002e00 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ca4:	4b59      	ldr	r3, [pc, #356]	@ (8002e0c <HAL_RCC_ClockConfig+0x260>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d101      	bne.n	8002cb4 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	e0a5      	b.n	8002e00 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8002cb4:	f000 f8b4 	bl	8002e20 <HAL_RCC_GetSysClockFreq>
 8002cb8:	4603      	mov	r3, r0
 8002cba:	4a55      	ldr	r2, [pc, #340]	@ (8002e10 <HAL_RCC_ClockConfig+0x264>)
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	d90f      	bls.n	8002ce0 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002cc0:	4b52      	ldr	r3, [pc, #328]	@ (8002e0c <HAL_RCC_ClockConfig+0x260>)
 8002cc2:	689b      	ldr	r3, [r3, #8]
 8002cc4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d109      	bne.n	8002ce0 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002ccc:	4b4f      	ldr	r3, [pc, #316]	@ (8002e0c <HAL_RCC_ClockConfig+0x260>)
 8002cce:	689b      	ldr	r3, [r3, #8]
 8002cd0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002cd4:	4a4d      	ldr	r2, [pc, #308]	@ (8002e0c <HAL_RCC_ClockConfig+0x260>)
 8002cd6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002cda:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002cdc:	2380      	movs	r3, #128	@ 0x80
 8002cde:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002ce0:	4b4a      	ldr	r3, [pc, #296]	@ (8002e0c <HAL_RCC_ClockConfig+0x260>)
 8002ce2:	689b      	ldr	r3, [r3, #8]
 8002ce4:	f023 0203 	bic.w	r2, r3, #3
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	685b      	ldr	r3, [r3, #4]
 8002cec:	4947      	ldr	r1, [pc, #284]	@ (8002e0c <HAL_RCC_ClockConfig+0x260>)
 8002cee:	4313      	orrs	r3, r2
 8002cf0:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002cf2:	f7fd fd8b 	bl	800080c <HAL_GetTick>
 8002cf6:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cf8:	e00a      	b.n	8002d10 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002cfa:	f7fd fd87 	bl	800080c <HAL_GetTick>
 8002cfe:	4602      	mov	r2, r0
 8002d00:	693b      	ldr	r3, [r7, #16]
 8002d02:	1ad3      	subs	r3, r2, r3
 8002d04:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d08:	4293      	cmp	r3, r2
 8002d0a:	d901      	bls.n	8002d10 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8002d0c:	2303      	movs	r3, #3
 8002d0e:	e077      	b.n	8002e00 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d10:	4b3e      	ldr	r3, [pc, #248]	@ (8002e0c <HAL_RCC_ClockConfig+0x260>)
 8002d12:	689b      	ldr	r3, [r3, #8]
 8002d14:	f003 020c 	and.w	r2, r3, #12
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	009b      	lsls	r3, r3, #2
 8002d1e:	429a      	cmp	r2, r3
 8002d20:	d1eb      	bne.n	8002cfa <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8002d22:	697b      	ldr	r3, [r7, #20]
 8002d24:	2b80      	cmp	r3, #128	@ 0x80
 8002d26:	d105      	bne.n	8002d34 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002d28:	4b38      	ldr	r3, [pc, #224]	@ (8002e0c <HAL_RCC_ClockConfig+0x260>)
 8002d2a:	689b      	ldr	r3, [r3, #8]
 8002d2c:	4a37      	ldr	r2, [pc, #220]	@ (8002e0c <HAL_RCC_ClockConfig+0x260>)
 8002d2e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002d32:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f003 0302 	and.w	r3, r3, #2
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d010      	beq.n	8002d62 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	689a      	ldr	r2, [r3, #8]
 8002d44:	4b31      	ldr	r3, [pc, #196]	@ (8002e0c <HAL_RCC_ClockConfig+0x260>)
 8002d46:	689b      	ldr	r3, [r3, #8]
 8002d48:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002d4c:	429a      	cmp	r2, r3
 8002d4e:	d208      	bcs.n	8002d62 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d50:	4b2e      	ldr	r3, [pc, #184]	@ (8002e0c <HAL_RCC_ClockConfig+0x260>)
 8002d52:	689b      	ldr	r3, [r3, #8]
 8002d54:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	689b      	ldr	r3, [r3, #8]
 8002d5c:	492b      	ldr	r1, [pc, #172]	@ (8002e0c <HAL_RCC_ClockConfig+0x260>)
 8002d5e:	4313      	orrs	r3, r2
 8002d60:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002d62:	4b29      	ldr	r3, [pc, #164]	@ (8002e08 <HAL_RCC_ClockConfig+0x25c>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f003 030f 	and.w	r3, r3, #15
 8002d6a:	683a      	ldr	r2, [r7, #0]
 8002d6c:	429a      	cmp	r2, r3
 8002d6e:	d210      	bcs.n	8002d92 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d70:	4b25      	ldr	r3, [pc, #148]	@ (8002e08 <HAL_RCC_ClockConfig+0x25c>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f023 020f 	bic.w	r2, r3, #15
 8002d78:	4923      	ldr	r1, [pc, #140]	@ (8002e08 <HAL_RCC_ClockConfig+0x25c>)
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	4313      	orrs	r3, r2
 8002d7e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d80:	4b21      	ldr	r3, [pc, #132]	@ (8002e08 <HAL_RCC_ClockConfig+0x25c>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f003 030f 	and.w	r3, r3, #15
 8002d88:	683a      	ldr	r2, [r7, #0]
 8002d8a:	429a      	cmp	r2, r3
 8002d8c:	d001      	beq.n	8002d92 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8002d8e:	2301      	movs	r3, #1
 8002d90:	e036      	b.n	8002e00 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f003 0304 	and.w	r3, r3, #4
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d008      	beq.n	8002db0 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d9e:	4b1b      	ldr	r3, [pc, #108]	@ (8002e0c <HAL_RCC_ClockConfig+0x260>)
 8002da0:	689b      	ldr	r3, [r3, #8]
 8002da2:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	68db      	ldr	r3, [r3, #12]
 8002daa:	4918      	ldr	r1, [pc, #96]	@ (8002e0c <HAL_RCC_ClockConfig+0x260>)
 8002dac:	4313      	orrs	r3, r2
 8002dae:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f003 0308 	and.w	r3, r3, #8
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d009      	beq.n	8002dd0 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002dbc:	4b13      	ldr	r3, [pc, #76]	@ (8002e0c <HAL_RCC_ClockConfig+0x260>)
 8002dbe:	689b      	ldr	r3, [r3, #8]
 8002dc0:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	691b      	ldr	r3, [r3, #16]
 8002dc8:	00db      	lsls	r3, r3, #3
 8002dca:	4910      	ldr	r1, [pc, #64]	@ (8002e0c <HAL_RCC_ClockConfig+0x260>)
 8002dcc:	4313      	orrs	r3, r2
 8002dce:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002dd0:	f000 f826 	bl	8002e20 <HAL_RCC_GetSysClockFreq>
 8002dd4:	4602      	mov	r2, r0
 8002dd6:	4b0d      	ldr	r3, [pc, #52]	@ (8002e0c <HAL_RCC_ClockConfig+0x260>)
 8002dd8:	689b      	ldr	r3, [r3, #8]
 8002dda:	091b      	lsrs	r3, r3, #4
 8002ddc:	f003 030f 	and.w	r3, r3, #15
 8002de0:	490c      	ldr	r1, [pc, #48]	@ (8002e14 <HAL_RCC_ClockConfig+0x268>)
 8002de2:	5ccb      	ldrb	r3, [r1, r3]
 8002de4:	f003 031f 	and.w	r3, r3, #31
 8002de8:	fa22 f303 	lsr.w	r3, r2, r3
 8002dec:	4a0a      	ldr	r2, [pc, #40]	@ (8002e18 <HAL_RCC_ClockConfig+0x26c>)
 8002dee:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002df0:	4b0a      	ldr	r3, [pc, #40]	@ (8002e1c <HAL_RCC_ClockConfig+0x270>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4618      	mov	r0, r3
 8002df6:	f7fd fcb9 	bl	800076c <HAL_InitTick>
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	73fb      	strb	r3, [r7, #15]

  return status;
 8002dfe:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e00:	4618      	mov	r0, r3
 8002e02:	3718      	adds	r7, #24
 8002e04:	46bd      	mov	sp, r7
 8002e06:	bd80      	pop	{r7, pc}
 8002e08:	40022000 	.word	0x40022000
 8002e0c:	40021000 	.word	0x40021000
 8002e10:	04c4b400 	.word	0x04c4b400
 8002e14:	08003b88 	.word	0x08003b88
 8002e18:	20000000 	.word	0x20000000
 8002e1c:	20000004 	.word	0x20000004

08002e20 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e20:	b480      	push	{r7}
 8002e22:	b089      	sub	sp, #36	@ 0x24
 8002e24:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002e26:	2300      	movs	r3, #0
 8002e28:	61fb      	str	r3, [r7, #28]
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e2e:	4b3e      	ldr	r3, [pc, #248]	@ (8002f28 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e30:	689b      	ldr	r3, [r3, #8]
 8002e32:	f003 030c 	and.w	r3, r3, #12
 8002e36:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002e38:	4b3b      	ldr	r3, [pc, #236]	@ (8002f28 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e3a:	68db      	ldr	r3, [r3, #12]
 8002e3c:	f003 0303 	and.w	r3, r3, #3
 8002e40:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002e42:	693b      	ldr	r3, [r7, #16]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d005      	beq.n	8002e54 <HAL_RCC_GetSysClockFreq+0x34>
 8002e48:	693b      	ldr	r3, [r7, #16]
 8002e4a:	2b0c      	cmp	r3, #12
 8002e4c:	d121      	bne.n	8002e92 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	2b01      	cmp	r3, #1
 8002e52:	d11e      	bne.n	8002e92 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002e54:	4b34      	ldr	r3, [pc, #208]	@ (8002f28 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f003 0308 	and.w	r3, r3, #8
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d107      	bne.n	8002e70 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002e60:	4b31      	ldr	r3, [pc, #196]	@ (8002f28 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e62:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002e66:	0a1b      	lsrs	r3, r3, #8
 8002e68:	f003 030f 	and.w	r3, r3, #15
 8002e6c:	61fb      	str	r3, [r7, #28]
 8002e6e:	e005      	b.n	8002e7c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002e70:	4b2d      	ldr	r3, [pc, #180]	@ (8002f28 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	091b      	lsrs	r3, r3, #4
 8002e76:	f003 030f 	and.w	r3, r3, #15
 8002e7a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002e7c:	4a2b      	ldr	r2, [pc, #172]	@ (8002f2c <HAL_RCC_GetSysClockFreq+0x10c>)
 8002e7e:	69fb      	ldr	r3, [r7, #28]
 8002e80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e84:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002e86:	693b      	ldr	r3, [r7, #16]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d10d      	bne.n	8002ea8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002e8c:	69fb      	ldr	r3, [r7, #28]
 8002e8e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002e90:	e00a      	b.n	8002ea8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002e92:	693b      	ldr	r3, [r7, #16]
 8002e94:	2b04      	cmp	r3, #4
 8002e96:	d102      	bne.n	8002e9e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002e98:	4b25      	ldr	r3, [pc, #148]	@ (8002f30 <HAL_RCC_GetSysClockFreq+0x110>)
 8002e9a:	61bb      	str	r3, [r7, #24]
 8002e9c:	e004      	b.n	8002ea8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002e9e:	693b      	ldr	r3, [r7, #16]
 8002ea0:	2b08      	cmp	r3, #8
 8002ea2:	d101      	bne.n	8002ea8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002ea4:	4b23      	ldr	r3, [pc, #140]	@ (8002f34 <HAL_RCC_GetSysClockFreq+0x114>)
 8002ea6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002ea8:	693b      	ldr	r3, [r7, #16]
 8002eaa:	2b0c      	cmp	r3, #12
 8002eac:	d134      	bne.n	8002f18 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002eae:	4b1e      	ldr	r3, [pc, #120]	@ (8002f28 <HAL_RCC_GetSysClockFreq+0x108>)
 8002eb0:	68db      	ldr	r3, [r3, #12]
 8002eb2:	f003 0303 	and.w	r3, r3, #3
 8002eb6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002eb8:	68bb      	ldr	r3, [r7, #8]
 8002eba:	2b02      	cmp	r3, #2
 8002ebc:	d003      	beq.n	8002ec6 <HAL_RCC_GetSysClockFreq+0xa6>
 8002ebe:	68bb      	ldr	r3, [r7, #8]
 8002ec0:	2b03      	cmp	r3, #3
 8002ec2:	d003      	beq.n	8002ecc <HAL_RCC_GetSysClockFreq+0xac>
 8002ec4:	e005      	b.n	8002ed2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002ec6:	4b1a      	ldr	r3, [pc, #104]	@ (8002f30 <HAL_RCC_GetSysClockFreq+0x110>)
 8002ec8:	617b      	str	r3, [r7, #20]
      break;
 8002eca:	e005      	b.n	8002ed8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002ecc:	4b19      	ldr	r3, [pc, #100]	@ (8002f34 <HAL_RCC_GetSysClockFreq+0x114>)
 8002ece:	617b      	str	r3, [r7, #20]
      break;
 8002ed0:	e002      	b.n	8002ed8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002ed2:	69fb      	ldr	r3, [r7, #28]
 8002ed4:	617b      	str	r3, [r7, #20]
      break;
 8002ed6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002ed8:	4b13      	ldr	r3, [pc, #76]	@ (8002f28 <HAL_RCC_GetSysClockFreq+0x108>)
 8002eda:	68db      	ldr	r3, [r3, #12]
 8002edc:	091b      	lsrs	r3, r3, #4
 8002ede:	f003 030f 	and.w	r3, r3, #15
 8002ee2:	3301      	adds	r3, #1
 8002ee4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002ee6:	4b10      	ldr	r3, [pc, #64]	@ (8002f28 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ee8:	68db      	ldr	r3, [r3, #12]
 8002eea:	0a1b      	lsrs	r3, r3, #8
 8002eec:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002ef0:	697a      	ldr	r2, [r7, #20]
 8002ef2:	fb03 f202 	mul.w	r2, r3, r2
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002efc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002efe:	4b0a      	ldr	r3, [pc, #40]	@ (8002f28 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f00:	68db      	ldr	r3, [r3, #12]
 8002f02:	0e5b      	lsrs	r3, r3, #25
 8002f04:	f003 0303 	and.w	r3, r3, #3
 8002f08:	3301      	adds	r3, #1
 8002f0a:	005b      	lsls	r3, r3, #1
 8002f0c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002f0e:	697a      	ldr	r2, [r7, #20]
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f16:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002f18:	69bb      	ldr	r3, [r7, #24]
}
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	3724      	adds	r7, #36	@ 0x24
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f24:	4770      	bx	lr
 8002f26:	bf00      	nop
 8002f28:	40021000 	.word	0x40021000
 8002f2c:	08003b98 	.word	0x08003b98
 8002f30:	00f42400 	.word	0x00f42400
 8002f34:	007a1200 	.word	0x007a1200

08002f38 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b086      	sub	sp, #24
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002f40:	2300      	movs	r3, #0
 8002f42:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002f44:	4b27      	ldr	r3, [pc, #156]	@ (8002fe4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002f46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f48:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d003      	beq.n	8002f58 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002f50:	f7ff f94e 	bl	80021f0 <HAL_PWREx_GetVoltageRange>
 8002f54:	6178      	str	r0, [r7, #20]
 8002f56:	e014      	b.n	8002f82 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002f58:	4b22      	ldr	r3, [pc, #136]	@ (8002fe4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002f5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f5c:	4a21      	ldr	r2, [pc, #132]	@ (8002fe4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002f5e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002f62:	6593      	str	r3, [r2, #88]	@ 0x58
 8002f64:	4b1f      	ldr	r3, [pc, #124]	@ (8002fe4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002f66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f68:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f6c:	60fb      	str	r3, [r7, #12]
 8002f6e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002f70:	f7ff f93e 	bl	80021f0 <HAL_PWREx_GetVoltageRange>
 8002f74:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002f76:	4b1b      	ldr	r3, [pc, #108]	@ (8002fe4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002f78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f7a:	4a1a      	ldr	r2, [pc, #104]	@ (8002fe4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002f7c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002f80:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002f82:	697b      	ldr	r3, [r7, #20]
 8002f84:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002f88:	d10b      	bne.n	8002fa2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2b80      	cmp	r3, #128	@ 0x80
 8002f8e:	d913      	bls.n	8002fb8 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2ba0      	cmp	r3, #160	@ 0xa0
 8002f94:	d902      	bls.n	8002f9c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002f96:	2302      	movs	r3, #2
 8002f98:	613b      	str	r3, [r7, #16]
 8002f9a:	e00d      	b.n	8002fb8 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	613b      	str	r3, [r7, #16]
 8002fa0:	e00a      	b.n	8002fb8 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2b7f      	cmp	r3, #127	@ 0x7f
 8002fa6:	d902      	bls.n	8002fae <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8002fa8:	2302      	movs	r3, #2
 8002faa:	613b      	str	r3, [r7, #16]
 8002fac:	e004      	b.n	8002fb8 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2b70      	cmp	r3, #112	@ 0x70
 8002fb2:	d101      	bne.n	8002fb8 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002fb8:	4b0b      	ldr	r3, [pc, #44]	@ (8002fe8 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f023 020f 	bic.w	r2, r3, #15
 8002fc0:	4909      	ldr	r1, [pc, #36]	@ (8002fe8 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002fc2:	693b      	ldr	r3, [r7, #16]
 8002fc4:	4313      	orrs	r3, r2
 8002fc6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002fc8:	4b07      	ldr	r3, [pc, #28]	@ (8002fe8 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f003 030f 	and.w	r3, r3, #15
 8002fd0:	693a      	ldr	r2, [r7, #16]
 8002fd2:	429a      	cmp	r2, r3
 8002fd4:	d001      	beq.n	8002fda <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	e000      	b.n	8002fdc <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8002fda:	2300      	movs	r3, #0
}
 8002fdc:	4618      	mov	r0, r3
 8002fde:	3718      	adds	r7, #24
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	bd80      	pop	{r7, pc}
 8002fe4:	40021000 	.word	0x40021000
 8002fe8:	40022000 	.word	0x40022000

08002fec <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002fec:	b480      	push	{r7}
 8002fee:	b087      	sub	sp, #28
 8002ff0:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002ff2:	4b2d      	ldr	r3, [pc, #180]	@ (80030a8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002ff4:	68db      	ldr	r3, [r3, #12]
 8002ff6:	f003 0303 	and.w	r3, r3, #3
 8002ffa:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	2b03      	cmp	r3, #3
 8003000:	d00b      	beq.n	800301a <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	2b03      	cmp	r3, #3
 8003006:	d825      	bhi.n	8003054 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	2b01      	cmp	r3, #1
 800300c:	d008      	beq.n	8003020 <RCC_GetSysClockFreqFromPLLSource+0x34>
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	2b02      	cmp	r3, #2
 8003012:	d11f      	bne.n	8003054 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8003014:	4b25      	ldr	r3, [pc, #148]	@ (80030ac <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003016:	613b      	str	r3, [r7, #16]
    break;
 8003018:	e01f      	b.n	800305a <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 800301a:	4b25      	ldr	r3, [pc, #148]	@ (80030b0 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 800301c:	613b      	str	r3, [r7, #16]
    break;
 800301e:	e01c      	b.n	800305a <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003020:	4b21      	ldr	r3, [pc, #132]	@ (80030a8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f003 0308 	and.w	r3, r3, #8
 8003028:	2b00      	cmp	r3, #0
 800302a:	d107      	bne.n	800303c <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800302c:	4b1e      	ldr	r3, [pc, #120]	@ (80030a8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800302e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003032:	0a1b      	lsrs	r3, r3, #8
 8003034:	f003 030f 	and.w	r3, r3, #15
 8003038:	617b      	str	r3, [r7, #20]
 800303a:	e005      	b.n	8003048 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800303c:	4b1a      	ldr	r3, [pc, #104]	@ (80030a8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	091b      	lsrs	r3, r3, #4
 8003042:	f003 030f 	and.w	r3, r3, #15
 8003046:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8003048:	4a1a      	ldr	r2, [pc, #104]	@ (80030b4 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 800304a:	697b      	ldr	r3, [r7, #20]
 800304c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003050:	613b      	str	r3, [r7, #16]
    break;
 8003052:	e002      	b.n	800305a <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8003054:	2300      	movs	r3, #0
 8003056:	613b      	str	r3, [r7, #16]
    break;
 8003058:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800305a:	4b13      	ldr	r3, [pc, #76]	@ (80030a8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800305c:	68db      	ldr	r3, [r3, #12]
 800305e:	091b      	lsrs	r3, r3, #4
 8003060:	f003 030f 	and.w	r3, r3, #15
 8003064:	3301      	adds	r3, #1
 8003066:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003068:	4b0f      	ldr	r3, [pc, #60]	@ (80030a8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800306a:	68db      	ldr	r3, [r3, #12]
 800306c:	0a1b      	lsrs	r3, r3, #8
 800306e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003072:	693a      	ldr	r2, [r7, #16]
 8003074:	fb03 f202 	mul.w	r2, r3, r2
 8003078:	68bb      	ldr	r3, [r7, #8]
 800307a:	fbb2 f3f3 	udiv	r3, r2, r3
 800307e:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003080:	4b09      	ldr	r3, [pc, #36]	@ (80030a8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003082:	68db      	ldr	r3, [r3, #12]
 8003084:	0e5b      	lsrs	r3, r3, #25
 8003086:	f003 0303 	and.w	r3, r3, #3
 800308a:	3301      	adds	r3, #1
 800308c:	005b      	lsls	r3, r3, #1
 800308e:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8003090:	693a      	ldr	r2, [r7, #16]
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	fbb2 f3f3 	udiv	r3, r2, r3
 8003098:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 800309a:	683b      	ldr	r3, [r7, #0]
}
 800309c:	4618      	mov	r0, r3
 800309e:	371c      	adds	r7, #28
 80030a0:	46bd      	mov	sp, r7
 80030a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a6:	4770      	bx	lr
 80030a8:	40021000 	.word	0x40021000
 80030ac:	00f42400 	.word	0x00f42400
 80030b0:	007a1200 	.word	0x007a1200
 80030b4:	08003b98 	.word	0x08003b98

080030b8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b086      	sub	sp, #24
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80030c0:	2300      	movs	r3, #0
 80030c2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80030c4:	2300      	movs	r3, #0
 80030c6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d040      	beq.n	8003156 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80030d8:	2b80      	cmp	r3, #128	@ 0x80
 80030da:	d02a      	beq.n	8003132 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80030dc:	2b80      	cmp	r3, #128	@ 0x80
 80030de:	d825      	bhi.n	800312c <HAL_RCCEx_PeriphCLKConfig+0x74>
 80030e0:	2b60      	cmp	r3, #96	@ 0x60
 80030e2:	d026      	beq.n	8003132 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80030e4:	2b60      	cmp	r3, #96	@ 0x60
 80030e6:	d821      	bhi.n	800312c <HAL_RCCEx_PeriphCLKConfig+0x74>
 80030e8:	2b40      	cmp	r3, #64	@ 0x40
 80030ea:	d006      	beq.n	80030fa <HAL_RCCEx_PeriphCLKConfig+0x42>
 80030ec:	2b40      	cmp	r3, #64	@ 0x40
 80030ee:	d81d      	bhi.n	800312c <HAL_RCCEx_PeriphCLKConfig+0x74>
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d009      	beq.n	8003108 <HAL_RCCEx_PeriphCLKConfig+0x50>
 80030f4:	2b20      	cmp	r3, #32
 80030f6:	d010      	beq.n	800311a <HAL_RCCEx_PeriphCLKConfig+0x62>
 80030f8:	e018      	b.n	800312c <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80030fa:	4b89      	ldr	r3, [pc, #548]	@ (8003320 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80030fc:	68db      	ldr	r3, [r3, #12]
 80030fe:	4a88      	ldr	r2, [pc, #544]	@ (8003320 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003100:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003104:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003106:	e015      	b.n	8003134 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	3304      	adds	r3, #4
 800310c:	2100      	movs	r1, #0
 800310e:	4618      	mov	r0, r3
 8003110:	f000 fb02 	bl	8003718 <RCCEx_PLLSAI1_Config>
 8003114:	4603      	mov	r3, r0
 8003116:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003118:	e00c      	b.n	8003134 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	3320      	adds	r3, #32
 800311e:	2100      	movs	r1, #0
 8003120:	4618      	mov	r0, r3
 8003122:	f000 fbed 	bl	8003900 <RCCEx_PLLSAI2_Config>
 8003126:	4603      	mov	r3, r0
 8003128:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800312a:	e003      	b.n	8003134 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800312c:	2301      	movs	r3, #1
 800312e:	74fb      	strb	r3, [r7, #19]
      break;
 8003130:	e000      	b.n	8003134 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8003132:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003134:	7cfb      	ldrb	r3, [r7, #19]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d10b      	bne.n	8003152 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800313a:	4b79      	ldr	r3, [pc, #484]	@ (8003320 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800313c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003140:	f023 02e0 	bic.w	r2, r3, #224	@ 0xe0
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003148:	4975      	ldr	r1, [pc, #468]	@ (8003320 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800314a:	4313      	orrs	r3, r2
 800314c:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8003150:	e001      	b.n	8003156 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003152:	7cfb      	ldrb	r3, [r7, #19]
 8003154:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800315e:	2b00      	cmp	r3, #0
 8003160:	d047      	beq.n	80031f2 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003166:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800316a:	d030      	beq.n	80031ce <HAL_RCCEx_PeriphCLKConfig+0x116>
 800316c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003170:	d82a      	bhi.n	80031c8 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003172:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003176:	d02a      	beq.n	80031ce <HAL_RCCEx_PeriphCLKConfig+0x116>
 8003178:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800317c:	d824      	bhi.n	80031c8 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800317e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003182:	d008      	beq.n	8003196 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8003184:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003188:	d81e      	bhi.n	80031c8 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800318a:	2b00      	cmp	r3, #0
 800318c:	d00a      	beq.n	80031a4 <HAL_RCCEx_PeriphCLKConfig+0xec>
 800318e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003192:	d010      	beq.n	80031b6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003194:	e018      	b.n	80031c8 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003196:	4b62      	ldr	r3, [pc, #392]	@ (8003320 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003198:	68db      	ldr	r3, [r3, #12]
 800319a:	4a61      	ldr	r2, [pc, #388]	@ (8003320 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800319c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80031a0:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80031a2:	e015      	b.n	80031d0 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	3304      	adds	r3, #4
 80031a8:	2100      	movs	r1, #0
 80031aa:	4618      	mov	r0, r3
 80031ac:	f000 fab4 	bl	8003718 <RCCEx_PLLSAI1_Config>
 80031b0:	4603      	mov	r3, r0
 80031b2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80031b4:	e00c      	b.n	80031d0 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	3320      	adds	r3, #32
 80031ba:	2100      	movs	r1, #0
 80031bc:	4618      	mov	r0, r3
 80031be:	f000 fb9f 	bl	8003900 <RCCEx_PLLSAI2_Config>
 80031c2:	4603      	mov	r3, r0
 80031c4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80031c6:	e003      	b.n	80031d0 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80031c8:	2301      	movs	r3, #1
 80031ca:	74fb      	strb	r3, [r7, #19]
      break;
 80031cc:	e000      	b.n	80031d0 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 80031ce:	bf00      	nop
    }

    if(ret == HAL_OK)
 80031d0:	7cfb      	ldrb	r3, [r7, #19]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d10b      	bne.n	80031ee <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80031d6:	4b52      	ldr	r3, [pc, #328]	@ (8003320 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80031d8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80031dc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031e4:	494e      	ldr	r1, [pc, #312]	@ (8003320 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80031e6:	4313      	orrs	r3, r2
 80031e8:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 80031ec:	e001      	b.n	80031f2 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031ee:	7cfb      	ldrb	r3, [r7, #19]
 80031f0:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	f000 809f 	beq.w	800333e <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003200:	2300      	movs	r3, #0
 8003202:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003204:	4b46      	ldr	r3, [pc, #280]	@ (8003320 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003206:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003208:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800320c:	2b00      	cmp	r3, #0
 800320e:	d101      	bne.n	8003214 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8003210:	2301      	movs	r3, #1
 8003212:	e000      	b.n	8003216 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8003214:	2300      	movs	r3, #0
 8003216:	2b00      	cmp	r3, #0
 8003218:	d00d      	beq.n	8003236 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800321a:	4b41      	ldr	r3, [pc, #260]	@ (8003320 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800321c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800321e:	4a40      	ldr	r2, [pc, #256]	@ (8003320 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003220:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003224:	6593      	str	r3, [r2, #88]	@ 0x58
 8003226:	4b3e      	ldr	r3, [pc, #248]	@ (8003320 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003228:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800322a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800322e:	60bb      	str	r3, [r7, #8]
 8003230:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003232:	2301      	movs	r3, #1
 8003234:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003236:	4b3b      	ldr	r3, [pc, #236]	@ (8003324 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4a3a      	ldr	r2, [pc, #232]	@ (8003324 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800323c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003240:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003242:	f7fd fae3 	bl	800080c <HAL_GetTick>
 8003246:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003248:	e009      	b.n	800325e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800324a:	f7fd fadf 	bl	800080c <HAL_GetTick>
 800324e:	4602      	mov	r2, r0
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	1ad3      	subs	r3, r2, r3
 8003254:	2b02      	cmp	r3, #2
 8003256:	d902      	bls.n	800325e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8003258:	2303      	movs	r3, #3
 800325a:	74fb      	strb	r3, [r7, #19]
        break;
 800325c:	e005      	b.n	800326a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800325e:	4b31      	ldr	r3, [pc, #196]	@ (8003324 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003266:	2b00      	cmp	r3, #0
 8003268:	d0ef      	beq.n	800324a <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 800326a:	7cfb      	ldrb	r3, [r7, #19]
 800326c:	2b00      	cmp	r3, #0
 800326e:	d15b      	bne.n	8003328 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003270:	4b2b      	ldr	r3, [pc, #172]	@ (8003320 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003272:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003276:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800327a:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800327c:	697b      	ldr	r3, [r7, #20]
 800327e:	2b00      	cmp	r3, #0
 8003280:	d01f      	beq.n	80032c2 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003288:	697a      	ldr	r2, [r7, #20]
 800328a:	429a      	cmp	r2, r3
 800328c:	d019      	beq.n	80032c2 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800328e:	4b24      	ldr	r3, [pc, #144]	@ (8003320 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003290:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003294:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003298:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800329a:	4b21      	ldr	r3, [pc, #132]	@ (8003320 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800329c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032a0:	4a1f      	ldr	r2, [pc, #124]	@ (8003320 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80032a2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80032a6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80032aa:	4b1d      	ldr	r3, [pc, #116]	@ (8003320 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80032ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032b0:	4a1b      	ldr	r2, [pc, #108]	@ (8003320 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80032b2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80032b6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80032ba:	4a19      	ldr	r2, [pc, #100]	@ (8003320 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80032bc:	697b      	ldr	r3, [r7, #20]
 80032be:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80032c2:	697b      	ldr	r3, [r7, #20]
 80032c4:	f003 0301 	and.w	r3, r3, #1
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d016      	beq.n	80032fa <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032cc:	f7fd fa9e 	bl	800080c <HAL_GetTick>
 80032d0:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80032d2:	e00b      	b.n	80032ec <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032d4:	f7fd fa9a 	bl	800080c <HAL_GetTick>
 80032d8:	4602      	mov	r2, r0
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	1ad3      	subs	r3, r2, r3
 80032de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d902      	bls.n	80032ec <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 80032e6:	2303      	movs	r3, #3
 80032e8:	74fb      	strb	r3, [r7, #19]
            break;
 80032ea:	e006      	b.n	80032fa <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80032ec:	4b0c      	ldr	r3, [pc, #48]	@ (8003320 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80032ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032f2:	f003 0302 	and.w	r3, r3, #2
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d0ec      	beq.n	80032d4 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 80032fa:	7cfb      	ldrb	r3, [r7, #19]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d10c      	bne.n	800331a <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003300:	4b07      	ldr	r3, [pc, #28]	@ (8003320 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003302:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003306:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003310:	4903      	ldr	r1, [pc, #12]	@ (8003320 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003312:	4313      	orrs	r3, r2
 8003314:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003318:	e008      	b.n	800332c <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800331a:	7cfb      	ldrb	r3, [r7, #19]
 800331c:	74bb      	strb	r3, [r7, #18]
 800331e:	e005      	b.n	800332c <HAL_RCCEx_PeriphCLKConfig+0x274>
 8003320:	40021000 	.word	0x40021000
 8003324:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003328:	7cfb      	ldrb	r3, [r7, #19]
 800332a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800332c:	7c7b      	ldrb	r3, [r7, #17]
 800332e:	2b01      	cmp	r3, #1
 8003330:	d105      	bne.n	800333e <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003332:	4ba0      	ldr	r3, [pc, #640]	@ (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003334:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003336:	4a9f      	ldr	r2, [pc, #636]	@ (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003338:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800333c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f003 0301 	and.w	r3, r3, #1
 8003346:	2b00      	cmp	r3, #0
 8003348:	d00a      	beq.n	8003360 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800334a:	4b9a      	ldr	r3, [pc, #616]	@ (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800334c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003350:	f023 0203 	bic.w	r2, r3, #3
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003358:	4996      	ldr	r1, [pc, #600]	@ (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800335a:	4313      	orrs	r3, r2
 800335c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f003 0302 	and.w	r3, r3, #2
 8003368:	2b00      	cmp	r3, #0
 800336a:	d00a      	beq.n	8003382 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800336c:	4b91      	ldr	r3, [pc, #580]	@ (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800336e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003372:	f023 020c 	bic.w	r2, r3, #12
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800337a:	498e      	ldr	r1, [pc, #568]	@ (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800337c:	4313      	orrs	r3, r2
 800337e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f003 0304 	and.w	r3, r3, #4
 800338a:	2b00      	cmp	r3, #0
 800338c:	d00a      	beq.n	80033a4 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800338e:	4b89      	ldr	r3, [pc, #548]	@ (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003390:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003394:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800339c:	4985      	ldr	r1, [pc, #532]	@ (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800339e:	4313      	orrs	r3, r2
 80033a0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f003 0308 	and.w	r3, r3, #8
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d00a      	beq.n	80033c6 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80033b0:	4b80      	ldr	r3, [pc, #512]	@ (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80033b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033b6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80033be:	497d      	ldr	r1, [pc, #500]	@ (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80033c0:	4313      	orrs	r3, r2
 80033c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f003 0310 	and.w	r3, r3, #16
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d00a      	beq.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80033d2:	4b78      	ldr	r3, [pc, #480]	@ (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80033d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033d8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80033e0:	4974      	ldr	r1, [pc, #464]	@ (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80033e2:	4313      	orrs	r3, r2
 80033e4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f003 0320 	and.w	r3, r3, #32
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d00a      	beq.n	800340a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80033f4:	4b6f      	ldr	r3, [pc, #444]	@ (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80033f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033fa:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003402:	496c      	ldr	r1, [pc, #432]	@ (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003404:	4313      	orrs	r3, r2
 8003406:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003412:	2b00      	cmp	r3, #0
 8003414:	d00a      	beq.n	800342c <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003416:	4b67      	ldr	r3, [pc, #412]	@ (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003418:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800341c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003424:	4963      	ldr	r1, [pc, #396]	@ (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003426:	4313      	orrs	r3, r2
 8003428:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003434:	2b00      	cmp	r3, #0
 8003436:	d00a      	beq.n	800344e <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003438:	4b5e      	ldr	r3, [pc, #376]	@ (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800343a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800343e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003446:	495b      	ldr	r1, [pc, #364]	@ (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003448:	4313      	orrs	r3, r2
 800344a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003456:	2b00      	cmp	r3, #0
 8003458:	d00a      	beq.n	8003470 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800345a:	4b56      	ldr	r3, [pc, #344]	@ (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800345c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003460:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003468:	4952      	ldr	r1, [pc, #328]	@ (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800346a:	4313      	orrs	r3, r2
 800346c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003478:	2b00      	cmp	r3, #0
 800347a:	d00a      	beq.n	8003492 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800347c:	4b4d      	ldr	r3, [pc, #308]	@ (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800347e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003482:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800348a:	494a      	ldr	r1, [pc, #296]	@ (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800348c:	4313      	orrs	r3, r2
 800348e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800349a:	2b00      	cmp	r3, #0
 800349c:	d00a      	beq.n	80034b4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800349e:	4b45      	ldr	r3, [pc, #276]	@ (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80034a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034a4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034ac:	4941      	ldr	r1, [pc, #260]	@ (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80034ae:	4313      	orrs	r3, r2
 80034b0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d00a      	beq.n	80034d6 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80034c0:	4b3c      	ldr	r3, [pc, #240]	@ (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80034c2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80034c6:	f023 0203 	bic.w	r2, r3, #3
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80034ce:	4939      	ldr	r1, [pc, #228]	@ (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80034d0:	4313      	orrs	r3, r2
 80034d2:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d028      	beq.n	8003534 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80034e2:	4b34      	ldr	r3, [pc, #208]	@ (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80034e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034e8:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80034f0:	4930      	ldr	r1, [pc, #192]	@ (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80034f2:	4313      	orrs	r3, r2
 80034f4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80034fc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003500:	d106      	bne.n	8003510 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003502:	4b2c      	ldr	r3, [pc, #176]	@ (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003504:	68db      	ldr	r3, [r3, #12]
 8003506:	4a2b      	ldr	r2, [pc, #172]	@ (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003508:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800350c:	60d3      	str	r3, [r2, #12]
 800350e:	e011      	b.n	8003534 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003514:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003518:	d10c      	bne.n	8003534 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	3304      	adds	r3, #4
 800351e:	2101      	movs	r1, #1
 8003520:	4618      	mov	r0, r3
 8003522:	f000 f8f9 	bl	8003718 <RCCEx_PLLSAI1_Config>
 8003526:	4603      	mov	r3, r0
 8003528:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800352a:	7cfb      	ldrb	r3, [r7, #19]
 800352c:	2b00      	cmp	r3, #0
 800352e:	d001      	beq.n	8003534 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8003530:	7cfb      	ldrb	r3, [r7, #19]
 8003532:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800353c:	2b00      	cmp	r3, #0
 800353e:	d04d      	beq.n	80035dc <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003544:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003548:	d108      	bne.n	800355c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 800354a:	4b1a      	ldr	r3, [pc, #104]	@ (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800354c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003550:	4a18      	ldr	r2, [pc, #96]	@ (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003552:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003556:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 800355a:	e012      	b.n	8003582 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 800355c:	4b15      	ldr	r3, [pc, #84]	@ (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800355e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003562:	4a14      	ldr	r2, [pc, #80]	@ (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003564:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003568:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 800356c:	4b11      	ldr	r3, [pc, #68]	@ (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800356e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003572:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800357a:	490e      	ldr	r1, [pc, #56]	@ (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800357c:	4313      	orrs	r3, r2
 800357e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003586:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800358a:	d106      	bne.n	800359a <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800358c:	4b09      	ldr	r3, [pc, #36]	@ (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800358e:	68db      	ldr	r3, [r3, #12]
 8003590:	4a08      	ldr	r2, [pc, #32]	@ (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003592:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003596:	60d3      	str	r3, [r2, #12]
 8003598:	e020      	b.n	80035dc <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800359e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80035a2:	d109      	bne.n	80035b8 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80035a4:	4b03      	ldr	r3, [pc, #12]	@ (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80035a6:	68db      	ldr	r3, [r3, #12]
 80035a8:	4a02      	ldr	r2, [pc, #8]	@ (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80035aa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80035ae:	60d3      	str	r3, [r2, #12]
 80035b0:	e014      	b.n	80035dc <HAL_RCCEx_PeriphCLKConfig+0x524>
 80035b2:	bf00      	nop
 80035b4:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80035bc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80035c0:	d10c      	bne.n	80035dc <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	3304      	adds	r3, #4
 80035c6:	2101      	movs	r1, #1
 80035c8:	4618      	mov	r0, r3
 80035ca:	f000 f8a5 	bl	8003718 <RCCEx_PLLSAI1_Config>
 80035ce:	4603      	mov	r3, r0
 80035d0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80035d2:	7cfb      	ldrb	r3, [r7, #19]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d001      	beq.n	80035dc <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 80035d8:	7cfb      	ldrb	r3, [r7, #19]
 80035da:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d028      	beq.n	800363a <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80035e8:	4b4a      	ldr	r3, [pc, #296]	@ (8003714 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80035ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035ee:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80035f6:	4947      	ldr	r1, [pc, #284]	@ (8003714 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80035f8:	4313      	orrs	r3, r2
 80035fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003602:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003606:	d106      	bne.n	8003616 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003608:	4b42      	ldr	r3, [pc, #264]	@ (8003714 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800360a:	68db      	ldr	r3, [r3, #12]
 800360c:	4a41      	ldr	r2, [pc, #260]	@ (8003714 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800360e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003612:	60d3      	str	r3, [r2, #12]
 8003614:	e011      	b.n	800363a <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800361a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800361e:	d10c      	bne.n	800363a <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	3304      	adds	r3, #4
 8003624:	2101      	movs	r1, #1
 8003626:	4618      	mov	r0, r3
 8003628:	f000 f876 	bl	8003718 <RCCEx_PLLSAI1_Config>
 800362c:	4603      	mov	r3, r0
 800362e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003630:	7cfb      	ldrb	r3, [r7, #19]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d001      	beq.n	800363a <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8003636:	7cfb      	ldrb	r3, [r7, #19]
 8003638:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003642:	2b00      	cmp	r3, #0
 8003644:	d01e      	beq.n	8003684 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003646:	4b33      	ldr	r3, [pc, #204]	@ (8003714 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003648:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800364c:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003656:	492f      	ldr	r1, [pc, #188]	@ (8003714 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003658:	4313      	orrs	r3, r2
 800365a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003664:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003668:	d10c      	bne.n	8003684 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	3304      	adds	r3, #4
 800366e:	2102      	movs	r1, #2
 8003670:	4618      	mov	r0, r3
 8003672:	f000 f851 	bl	8003718 <RCCEx_PLLSAI1_Config>
 8003676:	4603      	mov	r3, r0
 8003678:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800367a:	7cfb      	ldrb	r3, [r7, #19]
 800367c:	2b00      	cmp	r3, #0
 800367e:	d001      	beq.n	8003684 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8003680:	7cfb      	ldrb	r3, [r7, #19]
 8003682:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800368c:	2b00      	cmp	r3, #0
 800368e:	d00b      	beq.n	80036a8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003690:	4b20      	ldr	r3, [pc, #128]	@ (8003714 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003692:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003696:	f023 0204 	bic.w	r2, r3, #4
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80036a0:	491c      	ldr	r1, [pc, #112]	@ (8003714 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80036a2:	4313      	orrs	r3, r2
 80036a4:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d00b      	beq.n	80036cc <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80036b4:	4b17      	ldr	r3, [pc, #92]	@ (8003714 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80036b6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80036ba:	f023 0218 	bic.w	r2, r3, #24
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036c4:	4913      	ldr	r1, [pc, #76]	@ (8003714 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80036c6:	4313      	orrs	r3, r2
 80036c8:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d017      	beq.n	8003708 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80036d8:	4b0e      	ldr	r3, [pc, #56]	@ (8003714 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80036da:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80036de:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80036e8:	490a      	ldr	r1, [pc, #40]	@ (8003714 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80036ea:	4313      	orrs	r3, r2
 80036ec:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80036f6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80036fa:	d105      	bne.n	8003708 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80036fc:	4b05      	ldr	r3, [pc, #20]	@ (8003714 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80036fe:	68db      	ldr	r3, [r3, #12]
 8003700:	4a04      	ldr	r2, [pc, #16]	@ (8003714 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003702:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003706:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003708:	7cbb      	ldrb	r3, [r7, #18]
}
 800370a:	4618      	mov	r0, r3
 800370c:	3718      	adds	r7, #24
 800370e:	46bd      	mov	sp, r7
 8003710:	bd80      	pop	{r7, pc}
 8003712:	bf00      	nop
 8003714:	40021000 	.word	0x40021000

08003718 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b084      	sub	sp, #16
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
 8003720:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003722:	2300      	movs	r3, #0
 8003724:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003726:	4b72      	ldr	r3, [pc, #456]	@ (80038f0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003728:	68db      	ldr	r3, [r3, #12]
 800372a:	f003 0303 	and.w	r3, r3, #3
 800372e:	2b00      	cmp	r3, #0
 8003730:	d00e      	beq.n	8003750 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003732:	4b6f      	ldr	r3, [pc, #444]	@ (80038f0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003734:	68db      	ldr	r3, [r3, #12]
 8003736:	f003 0203 	and.w	r2, r3, #3
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	429a      	cmp	r2, r3
 8003740:	d103      	bne.n	800374a <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
       ||
 8003746:	2b00      	cmp	r3, #0
 8003748:	d142      	bne.n	80037d0 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 800374a:	2301      	movs	r3, #1
 800374c:	73fb      	strb	r3, [r7, #15]
 800374e:	e03f      	b.n	80037d0 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	2b03      	cmp	r3, #3
 8003756:	d018      	beq.n	800378a <RCCEx_PLLSAI1_Config+0x72>
 8003758:	2b03      	cmp	r3, #3
 800375a:	d825      	bhi.n	80037a8 <RCCEx_PLLSAI1_Config+0x90>
 800375c:	2b01      	cmp	r3, #1
 800375e:	d002      	beq.n	8003766 <RCCEx_PLLSAI1_Config+0x4e>
 8003760:	2b02      	cmp	r3, #2
 8003762:	d009      	beq.n	8003778 <RCCEx_PLLSAI1_Config+0x60>
 8003764:	e020      	b.n	80037a8 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003766:	4b62      	ldr	r3, [pc, #392]	@ (80038f0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f003 0302 	and.w	r3, r3, #2
 800376e:	2b00      	cmp	r3, #0
 8003770:	d11d      	bne.n	80037ae <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8003772:	2301      	movs	r3, #1
 8003774:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003776:	e01a      	b.n	80037ae <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003778:	4b5d      	ldr	r3, [pc, #372]	@ (80038f0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003780:	2b00      	cmp	r3, #0
 8003782:	d116      	bne.n	80037b2 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8003784:	2301      	movs	r3, #1
 8003786:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003788:	e013      	b.n	80037b2 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800378a:	4b59      	ldr	r3, [pc, #356]	@ (80038f0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003792:	2b00      	cmp	r3, #0
 8003794:	d10f      	bne.n	80037b6 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003796:	4b56      	ldr	r3, [pc, #344]	@ (80038f0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d109      	bne.n	80037b6 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 80037a2:	2301      	movs	r3, #1
 80037a4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80037a6:	e006      	b.n	80037b6 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 80037a8:	2301      	movs	r3, #1
 80037aa:	73fb      	strb	r3, [r7, #15]
      break;
 80037ac:	e004      	b.n	80037b8 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80037ae:	bf00      	nop
 80037b0:	e002      	b.n	80037b8 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80037b2:	bf00      	nop
 80037b4:	e000      	b.n	80037b8 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80037b6:	bf00      	nop
    }

    if(status == HAL_OK)
 80037b8:	7bfb      	ldrb	r3, [r7, #15]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d108      	bne.n	80037d0 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 80037be:	4b4c      	ldr	r3, [pc, #304]	@ (80038f0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80037c0:	68db      	ldr	r3, [r3, #12]
 80037c2:	f023 0203 	bic.w	r2, r3, #3
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	4949      	ldr	r1, [pc, #292]	@ (80038f0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80037cc:	4313      	orrs	r3, r2
 80037ce:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80037d0:	7bfb      	ldrb	r3, [r7, #15]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	f040 8086 	bne.w	80038e4 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80037d8:	4b45      	ldr	r3, [pc, #276]	@ (80038f0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	4a44      	ldr	r2, [pc, #272]	@ (80038f0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80037de:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80037e2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80037e4:	f7fd f812 	bl	800080c <HAL_GetTick>
 80037e8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80037ea:	e009      	b.n	8003800 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80037ec:	f7fd f80e 	bl	800080c <HAL_GetTick>
 80037f0:	4602      	mov	r2, r0
 80037f2:	68bb      	ldr	r3, [r7, #8]
 80037f4:	1ad3      	subs	r3, r2, r3
 80037f6:	2b02      	cmp	r3, #2
 80037f8:	d902      	bls.n	8003800 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80037fa:	2303      	movs	r3, #3
 80037fc:	73fb      	strb	r3, [r7, #15]
        break;
 80037fe:	e005      	b.n	800380c <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003800:	4b3b      	ldr	r3, [pc, #236]	@ (80038f0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003808:	2b00      	cmp	r3, #0
 800380a:	d1ef      	bne.n	80037ec <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 800380c:	7bfb      	ldrb	r3, [r7, #15]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d168      	bne.n	80038e4 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d113      	bne.n	8003840 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003818:	4b35      	ldr	r3, [pc, #212]	@ (80038f0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800381a:	691a      	ldr	r2, [r3, #16]
 800381c:	4b35      	ldr	r3, [pc, #212]	@ (80038f4 <RCCEx_PLLSAI1_Config+0x1dc>)
 800381e:	4013      	ands	r3, r2
 8003820:	687a      	ldr	r2, [r7, #4]
 8003822:	6892      	ldr	r2, [r2, #8]
 8003824:	0211      	lsls	r1, r2, #8
 8003826:	687a      	ldr	r2, [r7, #4]
 8003828:	68d2      	ldr	r2, [r2, #12]
 800382a:	06d2      	lsls	r2, r2, #27
 800382c:	4311      	orrs	r1, r2
 800382e:	687a      	ldr	r2, [r7, #4]
 8003830:	6852      	ldr	r2, [r2, #4]
 8003832:	3a01      	subs	r2, #1
 8003834:	0112      	lsls	r2, r2, #4
 8003836:	430a      	orrs	r2, r1
 8003838:	492d      	ldr	r1, [pc, #180]	@ (80038f0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800383a:	4313      	orrs	r3, r2
 800383c:	610b      	str	r3, [r1, #16]
 800383e:	e02d      	b.n	800389c <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	2b01      	cmp	r3, #1
 8003844:	d115      	bne.n	8003872 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003846:	4b2a      	ldr	r3, [pc, #168]	@ (80038f0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003848:	691a      	ldr	r2, [r3, #16]
 800384a:	4b2b      	ldr	r3, [pc, #172]	@ (80038f8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800384c:	4013      	ands	r3, r2
 800384e:	687a      	ldr	r2, [r7, #4]
 8003850:	6892      	ldr	r2, [r2, #8]
 8003852:	0211      	lsls	r1, r2, #8
 8003854:	687a      	ldr	r2, [r7, #4]
 8003856:	6912      	ldr	r2, [r2, #16]
 8003858:	0852      	lsrs	r2, r2, #1
 800385a:	3a01      	subs	r2, #1
 800385c:	0552      	lsls	r2, r2, #21
 800385e:	4311      	orrs	r1, r2
 8003860:	687a      	ldr	r2, [r7, #4]
 8003862:	6852      	ldr	r2, [r2, #4]
 8003864:	3a01      	subs	r2, #1
 8003866:	0112      	lsls	r2, r2, #4
 8003868:	430a      	orrs	r2, r1
 800386a:	4921      	ldr	r1, [pc, #132]	@ (80038f0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800386c:	4313      	orrs	r3, r2
 800386e:	610b      	str	r3, [r1, #16]
 8003870:	e014      	b.n	800389c <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003872:	4b1f      	ldr	r3, [pc, #124]	@ (80038f0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003874:	691a      	ldr	r2, [r3, #16]
 8003876:	4b21      	ldr	r3, [pc, #132]	@ (80038fc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003878:	4013      	ands	r3, r2
 800387a:	687a      	ldr	r2, [r7, #4]
 800387c:	6892      	ldr	r2, [r2, #8]
 800387e:	0211      	lsls	r1, r2, #8
 8003880:	687a      	ldr	r2, [r7, #4]
 8003882:	6952      	ldr	r2, [r2, #20]
 8003884:	0852      	lsrs	r2, r2, #1
 8003886:	3a01      	subs	r2, #1
 8003888:	0652      	lsls	r2, r2, #25
 800388a:	4311      	orrs	r1, r2
 800388c:	687a      	ldr	r2, [r7, #4]
 800388e:	6852      	ldr	r2, [r2, #4]
 8003890:	3a01      	subs	r2, #1
 8003892:	0112      	lsls	r2, r2, #4
 8003894:	430a      	orrs	r2, r1
 8003896:	4916      	ldr	r1, [pc, #88]	@ (80038f0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003898:	4313      	orrs	r3, r2
 800389a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800389c:	4b14      	ldr	r3, [pc, #80]	@ (80038f0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4a13      	ldr	r2, [pc, #76]	@ (80038f0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80038a2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80038a6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038a8:	f7fc ffb0 	bl	800080c <HAL_GetTick>
 80038ac:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80038ae:	e009      	b.n	80038c4 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80038b0:	f7fc ffac 	bl	800080c <HAL_GetTick>
 80038b4:	4602      	mov	r2, r0
 80038b6:	68bb      	ldr	r3, [r7, #8]
 80038b8:	1ad3      	subs	r3, r2, r3
 80038ba:	2b02      	cmp	r3, #2
 80038bc:	d902      	bls.n	80038c4 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80038be:	2303      	movs	r3, #3
 80038c0:	73fb      	strb	r3, [r7, #15]
          break;
 80038c2:	e005      	b.n	80038d0 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80038c4:	4b0a      	ldr	r3, [pc, #40]	@ (80038f0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d0ef      	beq.n	80038b0 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80038d0:	7bfb      	ldrb	r3, [r7, #15]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d106      	bne.n	80038e4 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80038d6:	4b06      	ldr	r3, [pc, #24]	@ (80038f0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80038d8:	691a      	ldr	r2, [r3, #16]
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	699b      	ldr	r3, [r3, #24]
 80038de:	4904      	ldr	r1, [pc, #16]	@ (80038f0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80038e0:	4313      	orrs	r3, r2
 80038e2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80038e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80038e6:	4618      	mov	r0, r3
 80038e8:	3710      	adds	r7, #16
 80038ea:	46bd      	mov	sp, r7
 80038ec:	bd80      	pop	{r7, pc}
 80038ee:	bf00      	nop
 80038f0:	40021000 	.word	0x40021000
 80038f4:	07ff800f 	.word	0x07ff800f
 80038f8:	ff9f800f 	.word	0xff9f800f
 80038fc:	f9ff800f 	.word	0xf9ff800f

08003900 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b084      	sub	sp, #16
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
 8003908:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800390a:	2300      	movs	r3, #0
 800390c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800390e:	4b72      	ldr	r3, [pc, #456]	@ (8003ad8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003910:	68db      	ldr	r3, [r3, #12]
 8003912:	f003 0303 	and.w	r3, r3, #3
 8003916:	2b00      	cmp	r3, #0
 8003918:	d00e      	beq.n	8003938 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800391a:	4b6f      	ldr	r3, [pc, #444]	@ (8003ad8 <RCCEx_PLLSAI2_Config+0x1d8>)
 800391c:	68db      	ldr	r3, [r3, #12]
 800391e:	f003 0203 	and.w	r2, r3, #3
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	429a      	cmp	r2, r3
 8003928:	d103      	bne.n	8003932 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
       ||
 800392e:	2b00      	cmp	r3, #0
 8003930:	d142      	bne.n	80039b8 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8003932:	2301      	movs	r3, #1
 8003934:	73fb      	strb	r3, [r7, #15]
 8003936:	e03f      	b.n	80039b8 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	2b03      	cmp	r3, #3
 800393e:	d018      	beq.n	8003972 <RCCEx_PLLSAI2_Config+0x72>
 8003940:	2b03      	cmp	r3, #3
 8003942:	d825      	bhi.n	8003990 <RCCEx_PLLSAI2_Config+0x90>
 8003944:	2b01      	cmp	r3, #1
 8003946:	d002      	beq.n	800394e <RCCEx_PLLSAI2_Config+0x4e>
 8003948:	2b02      	cmp	r3, #2
 800394a:	d009      	beq.n	8003960 <RCCEx_PLLSAI2_Config+0x60>
 800394c:	e020      	b.n	8003990 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800394e:	4b62      	ldr	r3, [pc, #392]	@ (8003ad8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f003 0302 	and.w	r3, r3, #2
 8003956:	2b00      	cmp	r3, #0
 8003958:	d11d      	bne.n	8003996 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 800395a:	2301      	movs	r3, #1
 800395c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800395e:	e01a      	b.n	8003996 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003960:	4b5d      	ldr	r3, [pc, #372]	@ (8003ad8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003968:	2b00      	cmp	r3, #0
 800396a:	d116      	bne.n	800399a <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 800396c:	2301      	movs	r3, #1
 800396e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003970:	e013      	b.n	800399a <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003972:	4b59      	ldr	r3, [pc, #356]	@ (8003ad8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800397a:	2b00      	cmp	r3, #0
 800397c:	d10f      	bne.n	800399e <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800397e:	4b56      	ldr	r3, [pc, #344]	@ (8003ad8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003986:	2b00      	cmp	r3, #0
 8003988:	d109      	bne.n	800399e <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 800398a:	2301      	movs	r3, #1
 800398c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800398e:	e006      	b.n	800399e <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8003990:	2301      	movs	r3, #1
 8003992:	73fb      	strb	r3, [r7, #15]
      break;
 8003994:	e004      	b.n	80039a0 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8003996:	bf00      	nop
 8003998:	e002      	b.n	80039a0 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800399a:	bf00      	nop
 800399c:	e000      	b.n	80039a0 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800399e:	bf00      	nop
    }

    if(status == HAL_OK)
 80039a0:	7bfb      	ldrb	r3, [r7, #15]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d108      	bne.n	80039b8 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 80039a6:	4b4c      	ldr	r3, [pc, #304]	@ (8003ad8 <RCCEx_PLLSAI2_Config+0x1d8>)
 80039a8:	68db      	ldr	r3, [r3, #12]
 80039aa:	f023 0203 	bic.w	r2, r3, #3
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4949      	ldr	r1, [pc, #292]	@ (8003ad8 <RCCEx_PLLSAI2_Config+0x1d8>)
 80039b4:	4313      	orrs	r3, r2
 80039b6:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80039b8:	7bfb      	ldrb	r3, [r7, #15]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	f040 8086 	bne.w	8003acc <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80039c0:	4b45      	ldr	r3, [pc, #276]	@ (8003ad8 <RCCEx_PLLSAI2_Config+0x1d8>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4a44      	ldr	r2, [pc, #272]	@ (8003ad8 <RCCEx_PLLSAI2_Config+0x1d8>)
 80039c6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80039ca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80039cc:	f7fc ff1e 	bl	800080c <HAL_GetTick>
 80039d0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80039d2:	e009      	b.n	80039e8 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80039d4:	f7fc ff1a 	bl	800080c <HAL_GetTick>
 80039d8:	4602      	mov	r2, r0
 80039da:	68bb      	ldr	r3, [r7, #8]
 80039dc:	1ad3      	subs	r3, r2, r3
 80039de:	2b02      	cmp	r3, #2
 80039e0:	d902      	bls.n	80039e8 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80039e2:	2303      	movs	r3, #3
 80039e4:	73fb      	strb	r3, [r7, #15]
        break;
 80039e6:	e005      	b.n	80039f4 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80039e8:	4b3b      	ldr	r3, [pc, #236]	@ (8003ad8 <RCCEx_PLLSAI2_Config+0x1d8>)
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d1ef      	bne.n	80039d4 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80039f4:	7bfb      	ldrb	r3, [r7, #15]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d168      	bne.n	8003acc <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d113      	bne.n	8003a28 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003a00:	4b35      	ldr	r3, [pc, #212]	@ (8003ad8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003a02:	695a      	ldr	r2, [r3, #20]
 8003a04:	4b35      	ldr	r3, [pc, #212]	@ (8003adc <RCCEx_PLLSAI2_Config+0x1dc>)
 8003a06:	4013      	ands	r3, r2
 8003a08:	687a      	ldr	r2, [r7, #4]
 8003a0a:	6892      	ldr	r2, [r2, #8]
 8003a0c:	0211      	lsls	r1, r2, #8
 8003a0e:	687a      	ldr	r2, [r7, #4]
 8003a10:	68d2      	ldr	r2, [r2, #12]
 8003a12:	06d2      	lsls	r2, r2, #27
 8003a14:	4311      	orrs	r1, r2
 8003a16:	687a      	ldr	r2, [r7, #4]
 8003a18:	6852      	ldr	r2, [r2, #4]
 8003a1a:	3a01      	subs	r2, #1
 8003a1c:	0112      	lsls	r2, r2, #4
 8003a1e:	430a      	orrs	r2, r1
 8003a20:	492d      	ldr	r1, [pc, #180]	@ (8003ad8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003a22:	4313      	orrs	r3, r2
 8003a24:	614b      	str	r3, [r1, #20]
 8003a26:	e02d      	b.n	8003a84 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	2b01      	cmp	r3, #1
 8003a2c:	d115      	bne.n	8003a5a <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003a2e:	4b2a      	ldr	r3, [pc, #168]	@ (8003ad8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003a30:	695a      	ldr	r2, [r3, #20]
 8003a32:	4b2b      	ldr	r3, [pc, #172]	@ (8003ae0 <RCCEx_PLLSAI2_Config+0x1e0>)
 8003a34:	4013      	ands	r3, r2
 8003a36:	687a      	ldr	r2, [r7, #4]
 8003a38:	6892      	ldr	r2, [r2, #8]
 8003a3a:	0211      	lsls	r1, r2, #8
 8003a3c:	687a      	ldr	r2, [r7, #4]
 8003a3e:	6912      	ldr	r2, [r2, #16]
 8003a40:	0852      	lsrs	r2, r2, #1
 8003a42:	3a01      	subs	r2, #1
 8003a44:	0552      	lsls	r2, r2, #21
 8003a46:	4311      	orrs	r1, r2
 8003a48:	687a      	ldr	r2, [r7, #4]
 8003a4a:	6852      	ldr	r2, [r2, #4]
 8003a4c:	3a01      	subs	r2, #1
 8003a4e:	0112      	lsls	r2, r2, #4
 8003a50:	430a      	orrs	r2, r1
 8003a52:	4921      	ldr	r1, [pc, #132]	@ (8003ad8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003a54:	4313      	orrs	r3, r2
 8003a56:	614b      	str	r3, [r1, #20]
 8003a58:	e014      	b.n	8003a84 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003a5a:	4b1f      	ldr	r3, [pc, #124]	@ (8003ad8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003a5c:	695a      	ldr	r2, [r3, #20]
 8003a5e:	4b21      	ldr	r3, [pc, #132]	@ (8003ae4 <RCCEx_PLLSAI2_Config+0x1e4>)
 8003a60:	4013      	ands	r3, r2
 8003a62:	687a      	ldr	r2, [r7, #4]
 8003a64:	6892      	ldr	r2, [r2, #8]
 8003a66:	0211      	lsls	r1, r2, #8
 8003a68:	687a      	ldr	r2, [r7, #4]
 8003a6a:	6952      	ldr	r2, [r2, #20]
 8003a6c:	0852      	lsrs	r2, r2, #1
 8003a6e:	3a01      	subs	r2, #1
 8003a70:	0652      	lsls	r2, r2, #25
 8003a72:	4311      	orrs	r1, r2
 8003a74:	687a      	ldr	r2, [r7, #4]
 8003a76:	6852      	ldr	r2, [r2, #4]
 8003a78:	3a01      	subs	r2, #1
 8003a7a:	0112      	lsls	r2, r2, #4
 8003a7c:	430a      	orrs	r2, r1
 8003a7e:	4916      	ldr	r1, [pc, #88]	@ (8003ad8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003a80:	4313      	orrs	r3, r2
 8003a82:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003a84:	4b14      	ldr	r3, [pc, #80]	@ (8003ad8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4a13      	ldr	r2, [pc, #76]	@ (8003ad8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003a8a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003a8e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a90:	f7fc febc 	bl	800080c <HAL_GetTick>
 8003a94:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003a96:	e009      	b.n	8003aac <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003a98:	f7fc feb8 	bl	800080c <HAL_GetTick>
 8003a9c:	4602      	mov	r2, r0
 8003a9e:	68bb      	ldr	r3, [r7, #8]
 8003aa0:	1ad3      	subs	r3, r2, r3
 8003aa2:	2b02      	cmp	r3, #2
 8003aa4:	d902      	bls.n	8003aac <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8003aa6:	2303      	movs	r3, #3
 8003aa8:	73fb      	strb	r3, [r7, #15]
          break;
 8003aaa:	e005      	b.n	8003ab8 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003aac:	4b0a      	ldr	r3, [pc, #40]	@ (8003ad8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d0ef      	beq.n	8003a98 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8003ab8:	7bfb      	ldrb	r3, [r7, #15]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d106      	bne.n	8003acc <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003abe:	4b06      	ldr	r3, [pc, #24]	@ (8003ad8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003ac0:	695a      	ldr	r2, [r3, #20]
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	699b      	ldr	r3, [r3, #24]
 8003ac6:	4904      	ldr	r1, [pc, #16]	@ (8003ad8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003ac8:	4313      	orrs	r3, r2
 8003aca:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003acc:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ace:	4618      	mov	r0, r3
 8003ad0:	3710      	adds	r7, #16
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	bd80      	pop	{r7, pc}
 8003ad6:	bf00      	nop
 8003ad8:	40021000 	.word	0x40021000
 8003adc:	07ff800f 	.word	0x07ff800f
 8003ae0:	ff9f800f 	.word	0xff9f800f
 8003ae4:	f9ff800f 	.word	0xf9ff800f

08003ae8 <memset>:
 8003ae8:	4402      	add	r2, r0
 8003aea:	4603      	mov	r3, r0
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d100      	bne.n	8003af2 <memset+0xa>
 8003af0:	4770      	bx	lr
 8003af2:	f803 1b01 	strb.w	r1, [r3], #1
 8003af6:	e7f9      	b.n	8003aec <memset+0x4>

08003af8 <__libc_init_array>:
 8003af8:	b570      	push	{r4, r5, r6, lr}
 8003afa:	4d0d      	ldr	r5, [pc, #52]	@ (8003b30 <__libc_init_array+0x38>)
 8003afc:	4c0d      	ldr	r4, [pc, #52]	@ (8003b34 <__libc_init_array+0x3c>)
 8003afe:	1b64      	subs	r4, r4, r5
 8003b00:	10a4      	asrs	r4, r4, #2
 8003b02:	2600      	movs	r6, #0
 8003b04:	42a6      	cmp	r6, r4
 8003b06:	d109      	bne.n	8003b1c <__libc_init_array+0x24>
 8003b08:	4d0b      	ldr	r5, [pc, #44]	@ (8003b38 <__libc_init_array+0x40>)
 8003b0a:	4c0c      	ldr	r4, [pc, #48]	@ (8003b3c <__libc_init_array+0x44>)
 8003b0c:	f000 f818 	bl	8003b40 <_init>
 8003b10:	1b64      	subs	r4, r4, r5
 8003b12:	10a4      	asrs	r4, r4, #2
 8003b14:	2600      	movs	r6, #0
 8003b16:	42a6      	cmp	r6, r4
 8003b18:	d105      	bne.n	8003b26 <__libc_init_array+0x2e>
 8003b1a:	bd70      	pop	{r4, r5, r6, pc}
 8003b1c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b20:	4798      	blx	r3
 8003b22:	3601      	adds	r6, #1
 8003b24:	e7ee      	b.n	8003b04 <__libc_init_array+0xc>
 8003b26:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b2a:	4798      	blx	r3
 8003b2c:	3601      	adds	r6, #1
 8003b2e:	e7f2      	b.n	8003b16 <__libc_init_array+0x1e>
 8003b30:	08003bc8 	.word	0x08003bc8
 8003b34:	08003bc8 	.word	0x08003bc8
 8003b38:	08003bc8 	.word	0x08003bc8
 8003b3c:	08003bcc 	.word	0x08003bcc

08003b40 <_init>:
 8003b40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b42:	bf00      	nop
 8003b44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b46:	bc08      	pop	{r3}
 8003b48:	469e      	mov	lr, r3
 8003b4a:	4770      	bx	lr

08003b4c <_fini>:
 8003b4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b4e:	bf00      	nop
 8003b50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b52:	bc08      	pop	{r3}
 8003b54:	469e      	mov	lr, r3
 8003b56:	4770      	bx	lr
